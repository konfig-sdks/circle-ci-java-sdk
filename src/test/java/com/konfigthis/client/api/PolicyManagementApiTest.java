/*
 * CircleCI API
 * This describes the resources that make up the CircleCI API v2.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.BundleDiff;
import com.konfigthis.client.model.BundlePayload;
import com.konfigthis.client.model.Decision;
import com.konfigthis.client.model.DecisionLog;
import com.konfigthis.client.model.DecisionSettings;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.Policy;
import com.konfigthis.client.model.PolicyManagementEvaluateInputDataRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PolicyManagementApi
 */
@Disabled
public class PolicyManagementApiTest {

    private static PolicyManagementApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new PolicyManagementApi(apiClient);
    }

    /**
     * Creates policy bundle for the context
     *
     * This endpoint replaces the current policy bundle with the provided policy bundle
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPolicyBundleForContextTest() throws ApiException {
        String ownerID = null;
        String context = null;
        Map<String, String> policies = null;
        Boolean dry = null;
        BundleDiff response = api.createPolicyBundleForContext(ownerID, context)
                .policies(policies)
                .dry(dry)
                .execute();
        // TODO: test validations
    }

    /**
     * Makes a decision
     *
     * This endpoint will evaluate input data (config+metadata) against owner&#39;s stored policies and return a decision.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void evaluateInputDataTest() throws ApiException {
        String input = null;
        String ownerID = null;
        String context = null;
        Object metadata = null;
        Decision response = api.evaluateInputData(input, ownerID, context)
                .metadata(metadata)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves the owner&#39;s decision audit log by given decisionID
     *
     * This endpoint will retrieve a decision for a given decision log ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDecisionAuditLogByGivenIdTest() throws ApiException {
        String ownerID = null;
        String context = null;
        String decisionID = null;
        DecisionLog response = api.getDecisionAuditLogByGivenId(ownerID, context, decisionID)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves the owner&#39;s decision audit logs.
     *
     * This endpoint will return a list of decision audit logs that were made using this owner&#39;s policies.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDecisionAuditLogsTest() throws ApiException {
        String ownerID = null;
        String context = null;
        String status = null;
        OffsetDateTime after = null;
        OffsetDateTime before = null;
        String branch = null;
        String projectId = null;
        String buildNumber = null;
        Integer offset = null;
        List<DecisionLog> response = api.getDecisionAuditLogs(ownerID, context)
                .status(status)
                .after(after)
                .before(before)
                .branch(branch)
                .projectId(projectId)
                .buildNumber(buildNumber)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Get the decision settings
     *
     * This endpoint retrieves the current decision settings (eg enable/disable policy evaluation)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDecisionSettingsTest() throws ApiException {
        String ownerID = null;
        String context = null;
        DecisionSettings response = api.getDecisionSettings(ownerID, context)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves a policy document
     *
     * This endpoint will retrieve a policy document.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDocumentTest() throws ApiException {
        String ownerID = null;
        String context = null;
        String policyName = null;
        Policy response = api.getDocument(ownerID, context, policyName)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves Policy Bundle
     *
     * This endpoint will retrieve a policy bundle
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPolicyBundleTest() throws ApiException {
        String ownerID = null;
        String context = null;
        Map<String, List<Policy>> response = api.getPolicyBundle(ownerID, context)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves Policy Bundle for a given decision log ID
     *
     * This endpoint will retrieve a policy bundle for a given decision log ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPolicyBundleForDecisionTest() throws ApiException {
        String ownerID = null;
        String context = null;
        String decisionID = null;
        Map<String, List<Policy>> response = api.getPolicyBundleForDecision(ownerID, context, decisionID)
                .execute();
        // TODO: test validations
    }

    /**
     * Set the decision settings
     *
     * This endpoint allows modifying decision settings (eg enable/disable policy evaluation)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyDecisionSettingsTest() throws ApiException {
        String ownerID = null;
        String context = null;
        Boolean enabled = null;
        DecisionSettings response = api.modifyDecisionSettings(ownerID, context)
                .enabled(enabled)
                .execute();
        // TODO: test validations
    }

}
