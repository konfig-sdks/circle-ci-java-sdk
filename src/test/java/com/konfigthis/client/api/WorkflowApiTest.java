/*
 * CircleCI API
 * This describes the resources that make up the CircleCI API v2.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import java.util.UUID;
import com.konfigthis.client.model.WorkflowApproveJobResponse;
import com.konfigthis.client.model.WorkflowApproveJobdefaultResponse;
import com.konfigthis.client.model.WorkflowCancelWorkflowResponse;
import com.konfigthis.client.model.WorkflowCancelWorkflowdefaultResponse;
import com.konfigthis.client.model.WorkflowGetByIdResponse;
import com.konfigthis.client.model.WorkflowGetByIddefaultResponse;
import com.konfigthis.client.model.WorkflowGetJobsResponse;
import com.konfigthis.client.model.WorkflowGetJobsdefaultResponse;
import com.konfigthis.client.model.WorkflowRerunWorkflowRequest;
import com.konfigthis.client.model.WorkflowRerunWorkflowResponse;
import com.konfigthis.client.model.WorkflowRerunWorkflowdefaultResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WorkflowApi
 */
@Disabled
public class WorkflowApiTest {

    private static WorkflowApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new WorkflowApi(apiClient);
    }

    /**
     * Approve a job
     *
     * Approves a pending approval job in a workflow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void approveJobTest() throws ApiException {
        UUID approvalRequestId = null;
        UUID id = null;
        WorkflowApproveJobResponse response = api.approveJob(approvalRequestId, id)
                .execute();
        // TODO: test validations
    }

    /**
     * Cancel a workflow
     *
     * Cancels a running workflow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelWorkflowTest() throws ApiException {
        UUID id = null;
        WorkflowCancelWorkflowResponse response = api.cancelWorkflow(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a workflow
     *
     * Returns summary fields of a workflow by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        UUID id = null;
        WorkflowGetByIdResponse response = api.getById(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a workflow&#39;s jobs
     *
     * Returns a sequence of jobs for a workflow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJobsTest() throws ApiException {
        UUID id = null;
        WorkflowGetJobsResponse response = api.getJobs(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Rerun a workflow
     *
     * Reruns a workflow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rerunWorkflowTest() throws ApiException {
        UUID id = null;
        Boolean enableSsh = null;
        Boolean fromFailed = null;
        List<UUID> jobs = null;
        Boolean sparseTree = null;
        WorkflowRerunWorkflowResponse response = api.rerunWorkflow(id)
                .enableSsh(enableSsh)
                .fromFailed(fromFailed)
                .jobs(jobs)
                .sparseTree(sparseTree)
                .execute();
        // TODO: test validations
    }

}
