/*
 * CircleCI API
 * This describes the resources that make up the CircleCI API v2.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import java.util.UUID;
import com.konfigthis.client.model.WebhookCreateOutboundWebhookRequest;
import com.konfigthis.client.model.WebhookCreateOutboundWebhookRequestScope;
import com.konfigthis.client.model.WebhookCreateOutboundWebhookResponse;
import com.konfigthis.client.model.WebhookCreateOutboundWebhookdefaultResponse;
import com.konfigthis.client.model.WebhookDeleteOutboundWebhookResponse;
import com.konfigthis.client.model.WebhookDeleteOutboundWebhookdefaultResponse;
import com.konfigthis.client.model.WebhookGetByIdResponse;
import com.konfigthis.client.model.WebhookGetByIddefaultResponse;
import com.konfigthis.client.model.WebhookListMatchingScopeResponse;
import com.konfigthis.client.model.WebhookListMatchingScopedefaultResponse;
import com.konfigthis.client.model.WebhookUpdateOutboundWebhookRequest;
import com.konfigthis.client.model.WebhookUpdateOutboundWebhookResponse;
import com.konfigthis.client.model.WebhookUpdateOutboundWebhookdefaultResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WebhookApi
 */
@Disabled
public class WebhookApiTest {

    private static WebhookApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new WebhookApi(apiClient);
    }

    /**
     * Create an outbound webhook
     *
     * Creates an outbound webhook.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOutboundWebhookTest() throws ApiException {
        String name = null;
        List<String> events = null;
        String url = null;
        Boolean verifyTls = null;
        String signingSecret = null;
        WebhookCreateOutboundWebhookRequestScope scope = null;
        WebhookCreateOutboundWebhookResponse response = api.createOutboundWebhook(name, events, url, verifyTls, signingSecret, scope)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete an outbound webhook
     *
     * Deletes an outbound webhook
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOutboundWebhookTest() throws ApiException {
        UUID webhookId = null;
        WebhookDeleteOutboundWebhookResponse response = api.deleteOutboundWebhook(webhookId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a webhook
     *
     * Get an outbound webhook by id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        UUID webhookId = null;
        WebhookGetByIdResponse response = api.getById(webhookId)
                .execute();
        // TODO: test validations
    }

    /**
     * List webhooks
     *
     * Get a list of outbound webhooks that match the given scope-type and scope-id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMatchingScopeTest() throws ApiException {
        UUID scopeId = null;
        String scopeType = null;
        WebhookListMatchingScopeResponse response = api.listMatchingScope(scopeId, scopeType)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an outbound webhook
     *
     * Updates an outbound webhook.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOutboundWebhookTest() throws ApiException {
        UUID webhookId = null;
        String name = null;
        List<String> events = null;
        String url = null;
        String signingSecret = null;
        Boolean verifyTls = null;
        WebhookUpdateOutboundWebhookResponse response = api.updateOutboundWebhook(webhookId)
                .name(name)
                .events(events)
                .url(url)
                .signingSecret(signingSecret)
                .verifyTls(verifyTls)
                .execute();
        // TODO: test validations
    }

}
