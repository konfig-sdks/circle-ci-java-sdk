/*
 * CircleCI API
 * This describes the resources that make up the CircleCI API v2.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ContextCreateNewContextRequest;
import com.konfigthis.client.model.ContextCreateNewContextResponse;
import com.konfigthis.client.model.ContextCreateNewContextdefaultResponse;
import com.konfigthis.client.model.ContextCreateRestrictionRequest;
import com.konfigthis.client.model.ContextGetInformationResponse;
import com.konfigthis.client.model.ContextGetInformationdefaultResponse;
import com.konfigthis.client.model.ContextListEnvironmentVariablesResponse;
import com.konfigthis.client.model.ContextListEnvironmentVariablesdefaultResponse;
import com.konfigthis.client.model.ContextListOwnerContextsResponse;
import com.konfigthis.client.model.ContextListOwnerContextsdefaultResponse;
import com.konfigthis.client.model.ContextProjectRestrictionsList;
import com.konfigthis.client.model.ContextRemoveContextResponse;
import com.konfigthis.client.model.ContextRemoveContextdefaultResponse;
import com.konfigthis.client.model.ContextRemoveEnvironmentVariableResponse;
import com.konfigthis.client.model.ContextRemoveEnvironmentVariabledefaultResponse;
import com.konfigthis.client.model.ContextUpdateEnvironmentVariableRequest;
import com.konfigthis.client.model.ContextUpdateEnvironmentVariableResponse;
import com.konfigthis.client.model.ContextUpdateEnvironmentVariabledefaultResponse;
import com.konfigthis.client.model.RestrictionCreated;
import com.konfigthis.client.model.RestrictionDeleted;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ContextApi
 */
@Disabled
public class ContextApiTest {

    private static ContextApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ContextApi(apiClient);
    }

    /**
     * Create a new context
     *
     * Creates a new context.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewContextTest() throws ApiException {
        String name = null;
        Object owner = null;
        ContextCreateNewContextResponse response = api.createNewContext(name, owner)
                .execute();
        // TODO: test validations
    }

    /**
     * ðŸ§ª Create context restriction
     *
     * [__EXPERIMENTAL__] Creates project restriction on a context.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRestrictionTest() throws ApiException {
        String contextId = null;
        UUID projectId = null;
        String restrictionType = null;
        String restrictionValue = null;
        RestrictionCreated response = api.createRestriction(contextId)
                .projectId(projectId)
                .restrictionType(restrictionType)
                .restrictionValue(restrictionValue)
                .execute();
        // TODO: test validations
    }

    /**
     * ðŸ§ª Delete context restriction
     *
     * [__EXPERIMENTAL__] Deletes a project restriction on a context.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRestrictionTest() throws ApiException {
        String contextId = null;
        String restrictionId = null;
        RestrictionDeleted response = api.deleteRestriction(contextId, restrictionId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a context
     *
     * Returns basic information about a context.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInformationTest() throws ApiException {
        UUID contextId = null;
        ContextGetInformationResponse response = api.getInformation(contextId)
                .execute();
        // TODO: test validations
    }

    /**
     * ðŸ§ª Get context restrictions
     *
     * [__EXPERIMENTAL__] Gets a list of project restrictions associated with a context.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRestrictionsTest() throws ApiException {
        String contextId = null;
        ContextProjectRestrictionsList response = api.getRestrictions(contextId)
                .execute();
        // TODO: test validations
    }

    /**
     * List environment variables
     *
     * List information about environment variables in a context, not including their values.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEnvironmentVariablesTest() throws ApiException {
        UUID contextId = null;
        String pageToken = null;
        ContextListEnvironmentVariablesResponse response = api.listEnvironmentVariables(contextId)
                .pageToken(pageToken)
                .execute();
        // TODO: test validations
    }

    /**
     * List contexts
     *
     * List all contexts for an owner.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOwnerContextsTest() throws ApiException {
        UUID ownerId = null;
        String ownerSlug = null;
        String ownerType = null;
        String pageToken = null;
        ContextListOwnerContextsResponse response = api.listOwnerContexts()
                .ownerId(ownerId)
                .ownerSlug(ownerSlug)
                .ownerType(ownerType)
                .pageToken(pageToken)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a context
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeContextTest() throws ApiException {
        UUID contextId = null;
        ContextRemoveContextResponse response = api.removeContext(contextId)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove an environment variable
     *
     * Delete an environment variable from a context.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeEnvironmentVariableTest() throws ApiException {
        String envVarName = null;
        UUID contextId = null;
        ContextRemoveEnvironmentVariableResponse response = api.removeEnvironmentVariable(envVarName, contextId)
                .execute();
        // TODO: test validations
    }

    /**
     * Add or update an environment variable
     *
     * Create or update an environment variable within a context. Returns information about the environment variable, not including its value.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEnvironmentVariableTest() throws ApiException {
        String value = null;
        UUID contextId = null;
        String envVarName = null;
        ContextUpdateEnvironmentVariableResponse response = api.updateEnvironmentVariable(value, contextId, envVarName)
                .execute();
        // TODO: test validations
    }

}
