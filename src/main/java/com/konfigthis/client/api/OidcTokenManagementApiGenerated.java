/*
 * CircleCI API
 * This describes the resources that make up the CircleCI API v2.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ClaimResponse;
import com.konfigthis.client.model.PatchClaimsRequest;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OidcTokenManagementApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OidcTokenManagementApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public OidcTokenManagementApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deleteOrgClaimsCall(UUID orgID, String claims, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/org/{orgID}/oidc-custom-claims"
            .replace("{" + "orgID" + "}", localVarApiClient.escapeString(orgID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (claims != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("claims", claims));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrgClaimsValidateBeforeCall(UUID orgID, String claims, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgID' is set
        if (orgID == null) {
            throw new ApiException("Missing the required parameter 'orgID' when calling deleteOrgClaims(Async)");
        }

        // verify the required parameter 'claims' is set
        if (claims == null) {
            throw new ApiException("Missing the required parameter 'claims' when calling deleteOrgClaims(Async)");
        }

        return deleteOrgClaimsCall(orgID, claims, _callback);

    }


    private ApiResponse<ClaimResponse> deleteOrgClaimsWithHttpInfo(UUID orgID, String claims) throws ApiException {
        okhttp3.Call localVarCall = deleteOrgClaimsValidateBeforeCall(orgID, claims, null);
        Type localVarReturnType = new TypeToken<ClaimResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteOrgClaimsAsync(UUID orgID, String claims, final ApiCallback<ClaimResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrgClaimsValidateBeforeCall(orgID, claims, _callback);
        Type localVarReturnType = new TypeToken<ClaimResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteOrgClaimsRequestBuilder {
        private final UUID orgID;
        private final String claims;

        private DeleteOrgClaimsRequestBuilder(UUID orgID, String claims) {
            this.orgID = orgID;
            this.claims = claims;
        }

        /**
         * Build call for deleteOrgClaims
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Claims successfully deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteOrgClaimsCall(orgID, claims, _callback);
        }


        /**
         * Execute deleteOrgClaims request
         * @return ClaimResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Claims successfully deleted. </td><td>  -  </td></tr>
         </table>
         */
        public ClaimResponse execute() throws ApiException {
            ApiResponse<ClaimResponse> localVarResp = deleteOrgClaimsWithHttpInfo(orgID, claims);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteOrgClaims request with HTTP info returned
         * @return ApiResponse&lt;ClaimResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Claims successfully deleted. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ClaimResponse> executeWithHttpInfo() throws ApiException {
            return deleteOrgClaimsWithHttpInfo(orgID, claims);
        }

        /**
         * Execute deleteOrgClaims request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Claims successfully deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ClaimResponse> _callback) throws ApiException {
            return deleteOrgClaimsAsync(orgID, claims, _callback);
        }
    }

    /**
     * Delete org-level claims
     * Deletes org-level custom claims of OIDC identity tokens
     * @param orgID  (required)
     * @param claims comma separated list of claims to delete. Valid values are \&quot;audience\&quot; and \&quot;ttl\&quot;. (required)
     * @return DeleteOrgClaimsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Claims successfully deleted. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteOrgClaimsRequestBuilder deleteOrgClaims(UUID orgID, String claims) throws IllegalArgumentException {
        if (orgID == null) throw new IllegalArgumentException("\"orgID\" is required but got null");
            

        if (claims == null) throw new IllegalArgumentException("\"claims\" is required but got null");
            

        return new DeleteOrgClaimsRequestBuilder(orgID, claims);
    }
    private okhttp3.Call deleteProjectClaimsCall(UUID orgID, UUID projectID, String claims, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/org/{orgID}/project/{projectID}/oidc-custom-claims"
            .replace("{" + "orgID" + "}", localVarApiClient.escapeString(orgID.toString()))
            .replace("{" + "projectID" + "}", localVarApiClient.escapeString(projectID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (claims != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("claims", claims));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProjectClaimsValidateBeforeCall(UUID orgID, UUID projectID, String claims, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgID' is set
        if (orgID == null) {
            throw new ApiException("Missing the required parameter 'orgID' when calling deleteProjectClaims(Async)");
        }

        // verify the required parameter 'projectID' is set
        if (projectID == null) {
            throw new ApiException("Missing the required parameter 'projectID' when calling deleteProjectClaims(Async)");
        }

        // verify the required parameter 'claims' is set
        if (claims == null) {
            throw new ApiException("Missing the required parameter 'claims' when calling deleteProjectClaims(Async)");
        }

        return deleteProjectClaimsCall(orgID, projectID, claims, _callback);

    }


    private ApiResponse<ClaimResponse> deleteProjectClaimsWithHttpInfo(UUID orgID, UUID projectID, String claims) throws ApiException {
        okhttp3.Call localVarCall = deleteProjectClaimsValidateBeforeCall(orgID, projectID, claims, null);
        Type localVarReturnType = new TypeToken<ClaimResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteProjectClaimsAsync(UUID orgID, UUID projectID, String claims, final ApiCallback<ClaimResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProjectClaimsValidateBeforeCall(orgID, projectID, claims, _callback);
        Type localVarReturnType = new TypeToken<ClaimResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteProjectClaimsRequestBuilder {
        private final UUID orgID;
        private final UUID projectID;
        private final String claims;

        private DeleteProjectClaimsRequestBuilder(UUID orgID, UUID projectID, String claims) {
            this.orgID = orgID;
            this.projectID = projectID;
            this.claims = claims;
        }

        /**
         * Build call for deleteProjectClaims
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Claims successfully deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteProjectClaimsCall(orgID, projectID, claims, _callback);
        }


        /**
         * Execute deleteProjectClaims request
         * @return ClaimResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Claims successfully deleted. </td><td>  -  </td></tr>
         </table>
         */
        public ClaimResponse execute() throws ApiException {
            ApiResponse<ClaimResponse> localVarResp = deleteProjectClaimsWithHttpInfo(orgID, projectID, claims);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteProjectClaims request with HTTP info returned
         * @return ApiResponse&lt;ClaimResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Claims successfully deleted. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ClaimResponse> executeWithHttpInfo() throws ApiException {
            return deleteProjectClaimsWithHttpInfo(orgID, projectID, claims);
        }

        /**
         * Execute deleteProjectClaims request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Claims successfully deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ClaimResponse> _callback) throws ApiException {
            return deleteProjectClaimsAsync(orgID, projectID, claims, _callback);
        }
    }

    /**
     * Delete project-level claims
     * Deletes project-level custom claims of OIDC identity tokens
     * @param orgID  (required)
     * @param projectID  (required)
     * @param claims comma separated list of claims to delete. Valid values are \&quot;audience\&quot; and \&quot;ttl\&quot;. (required)
     * @return DeleteProjectClaimsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Claims successfully deleted. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteProjectClaimsRequestBuilder deleteProjectClaims(UUID orgID, UUID projectID, String claims) throws IllegalArgumentException {
        if (orgID == null) throw new IllegalArgumentException("\"orgID\" is required but got null");
            

        if (projectID == null) throw new IllegalArgumentException("\"projectID\" is required but got null");
            

        if (claims == null) throw new IllegalArgumentException("\"claims\" is required but got null");
            

        return new DeleteProjectClaimsRequestBuilder(orgID, projectID, claims);
    }
    private okhttp3.Call getOrgClaimsCall(UUID orgID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/org/{orgID}/oidc-custom-claims"
            .replace("{" + "orgID" + "}", localVarApiClient.escapeString(orgID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrgClaimsValidateBeforeCall(UUID orgID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgID' is set
        if (orgID == null) {
            throw new ApiException("Missing the required parameter 'orgID' when calling getOrgClaims(Async)");
        }

        return getOrgClaimsCall(orgID, _callback);

    }


    private ApiResponse<ClaimResponse> getOrgClaimsWithHttpInfo(UUID orgID) throws ApiException {
        okhttp3.Call localVarCall = getOrgClaimsValidateBeforeCall(orgID, null);
        Type localVarReturnType = new TypeToken<ClaimResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOrgClaimsAsync(UUID orgID, final ApiCallback<ClaimResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrgClaimsValidateBeforeCall(orgID, _callback);
        Type localVarReturnType = new TypeToken<ClaimResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOrgClaimsRequestBuilder {
        private final UUID orgID;

        private GetOrgClaimsRequestBuilder(UUID orgID) {
            this.orgID = orgID;
        }

        /**
         * Build call for getOrgClaims
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Claims successfully fetched. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOrgClaimsCall(orgID, _callback);
        }


        /**
         * Execute getOrgClaims request
         * @return ClaimResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Claims successfully fetched. </td><td>  -  </td></tr>
         </table>
         */
        public ClaimResponse execute() throws ApiException {
            ApiResponse<ClaimResponse> localVarResp = getOrgClaimsWithHttpInfo(orgID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOrgClaims request with HTTP info returned
         * @return ApiResponse&lt;ClaimResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Claims successfully fetched. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ClaimResponse> executeWithHttpInfo() throws ApiException {
            return getOrgClaimsWithHttpInfo(orgID);
        }

        /**
         * Execute getOrgClaims request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Claims successfully fetched. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ClaimResponse> _callback) throws ApiException {
            return getOrgClaimsAsync(orgID, _callback);
        }
    }

    /**
     * Get org-level claims
     * Fetches org-level custom claims of OIDC identity tokens
     * @param orgID  (required)
     * @return GetOrgClaimsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Claims successfully fetched. </td><td>  -  </td></tr>
     </table>
     */
    public GetOrgClaimsRequestBuilder getOrgClaims(UUID orgID) throws IllegalArgumentException {
        if (orgID == null) throw new IllegalArgumentException("\"orgID\" is required but got null");
            

        return new GetOrgClaimsRequestBuilder(orgID);
    }
    private okhttp3.Call getProjectClaimsCall(UUID orgID, UUID projectID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/org/{orgID}/project/{projectID}/oidc-custom-claims"
            .replace("{" + "orgID" + "}", localVarApiClient.escapeString(orgID.toString()))
            .replace("{" + "projectID" + "}", localVarApiClient.escapeString(projectID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectClaimsValidateBeforeCall(UUID orgID, UUID projectID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgID' is set
        if (orgID == null) {
            throw new ApiException("Missing the required parameter 'orgID' when calling getProjectClaims(Async)");
        }

        // verify the required parameter 'projectID' is set
        if (projectID == null) {
            throw new ApiException("Missing the required parameter 'projectID' when calling getProjectClaims(Async)");
        }

        return getProjectClaimsCall(orgID, projectID, _callback);

    }


    private ApiResponse<ClaimResponse> getProjectClaimsWithHttpInfo(UUID orgID, UUID projectID) throws ApiException {
        okhttp3.Call localVarCall = getProjectClaimsValidateBeforeCall(orgID, projectID, null);
        Type localVarReturnType = new TypeToken<ClaimResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getProjectClaimsAsync(UUID orgID, UUID projectID, final ApiCallback<ClaimResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectClaimsValidateBeforeCall(orgID, projectID, _callback);
        Type localVarReturnType = new TypeToken<ClaimResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetProjectClaimsRequestBuilder {
        private final UUID orgID;
        private final UUID projectID;

        private GetProjectClaimsRequestBuilder(UUID orgID, UUID projectID) {
            this.orgID = orgID;
            this.projectID = projectID;
        }

        /**
         * Build call for getProjectClaims
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Claims successfully fetched. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getProjectClaimsCall(orgID, projectID, _callback);
        }


        /**
         * Execute getProjectClaims request
         * @return ClaimResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Claims successfully fetched. </td><td>  -  </td></tr>
         </table>
         */
        public ClaimResponse execute() throws ApiException {
            ApiResponse<ClaimResponse> localVarResp = getProjectClaimsWithHttpInfo(orgID, projectID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getProjectClaims request with HTTP info returned
         * @return ApiResponse&lt;ClaimResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Claims successfully fetched. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ClaimResponse> executeWithHttpInfo() throws ApiException {
            return getProjectClaimsWithHttpInfo(orgID, projectID);
        }

        /**
         * Execute getProjectClaims request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Claims successfully fetched. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ClaimResponse> _callback) throws ApiException {
            return getProjectClaimsAsync(orgID, projectID, _callback);
        }
    }

    /**
     * Get project-level claims
     * Fetches project-level custom claims of OIDC identity tokens
     * @param orgID  (required)
     * @param projectID  (required)
     * @return GetProjectClaimsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Claims successfully fetched. </td><td>  -  </td></tr>
     </table>
     */
    public GetProjectClaimsRequestBuilder getProjectClaims(UUID orgID, UUID projectID) throws IllegalArgumentException {
        if (orgID == null) throw new IllegalArgumentException("\"orgID\" is required but got null");
            

        if (projectID == null) throw new IllegalArgumentException("\"projectID\" is required but got null");
            

        return new GetProjectClaimsRequestBuilder(orgID, projectID);
    }
    private okhttp3.Call updateOrgClaimsCall(UUID orgID, PatchClaimsRequest patchClaimsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchClaimsRequest;

        // create path and map variables
        String localVarPath = "/org/{orgID}/oidc-custom-claims"
            .replace("{" + "orgID" + "}", localVarApiClient.escapeString(orgID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrgClaimsValidateBeforeCall(UUID orgID, PatchClaimsRequest patchClaimsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgID' is set
        if (orgID == null) {
            throw new ApiException("Missing the required parameter 'orgID' when calling updateOrgClaims(Async)");
        }

        return updateOrgClaimsCall(orgID, patchClaimsRequest, _callback);

    }


    private ApiResponse<ClaimResponse> updateOrgClaimsWithHttpInfo(UUID orgID, PatchClaimsRequest patchClaimsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOrgClaimsValidateBeforeCall(orgID, patchClaimsRequest, null);
        Type localVarReturnType = new TypeToken<ClaimResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateOrgClaimsAsync(UUID orgID, PatchClaimsRequest patchClaimsRequest, final ApiCallback<ClaimResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrgClaimsValidateBeforeCall(orgID, patchClaimsRequest, _callback);
        Type localVarReturnType = new TypeToken<ClaimResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateOrgClaimsRequestBuilder {
        private final UUID orgID;
        private List<String> audience;
        private String ttl;

        private UpdateOrgClaimsRequestBuilder(UUID orgID) {
            this.orgID = orgID;
        }

        /**
         * Set audience
         * @param audience  (optional)
         * @return UpdateOrgClaimsRequestBuilder
         */
        public UpdateOrgClaimsRequestBuilder audience(List<String> audience) {
            this.audience = audience;
            return this;
        }
        
        /**
         * Set ttl
         * @param ttl  (optional)
         * @return UpdateOrgClaimsRequestBuilder
         */
        public UpdateOrgClaimsRequestBuilder ttl(String ttl) {
            this.ttl = ttl;
            return this;
        }
        
        /**
         * Build call for updateOrgClaims
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Claims successfully patched. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PatchClaimsRequest patchClaimsRequest = buildBodyParams();
            return updateOrgClaimsCall(orgID, patchClaimsRequest, _callback);
        }

        private PatchClaimsRequest buildBodyParams() {
            PatchClaimsRequest patchClaimsRequest = new PatchClaimsRequest();
            patchClaimsRequest.audience(this.audience);
            patchClaimsRequest.ttl(this.ttl);
            return patchClaimsRequest;
        }

        /**
         * Execute updateOrgClaims request
         * @return ClaimResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Claims successfully patched. </td><td>  -  </td></tr>
         </table>
         */
        public ClaimResponse execute() throws ApiException {
            PatchClaimsRequest patchClaimsRequest = buildBodyParams();
            ApiResponse<ClaimResponse> localVarResp = updateOrgClaimsWithHttpInfo(orgID, patchClaimsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateOrgClaims request with HTTP info returned
         * @return ApiResponse&lt;ClaimResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Claims successfully patched. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ClaimResponse> executeWithHttpInfo() throws ApiException {
            PatchClaimsRequest patchClaimsRequest = buildBodyParams();
            return updateOrgClaimsWithHttpInfo(orgID, patchClaimsRequest);
        }

        /**
         * Execute updateOrgClaims request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Claims successfully patched. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ClaimResponse> _callback) throws ApiException {
            PatchClaimsRequest patchClaimsRequest = buildBodyParams();
            return updateOrgClaimsAsync(orgID, patchClaimsRequest, _callback);
        }
    }

    /**
     * Patch org-level claims
     * Creates/Updates org-level custom claims of OIDC identity tokens
     * @param orgID  (required)
     * @return UpdateOrgClaimsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Claims successfully patched. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateOrgClaimsRequestBuilder updateOrgClaims(UUID orgID) throws IllegalArgumentException {
        if (orgID == null) throw new IllegalArgumentException("\"orgID\" is required but got null");
            

        return new UpdateOrgClaimsRequestBuilder(orgID);
    }
    private okhttp3.Call updateProjectClaimsCall(UUID orgID, UUID projectID, PatchClaimsRequest patchClaimsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchClaimsRequest;

        // create path and map variables
        String localVarPath = "/org/{orgID}/project/{projectID}/oidc-custom-claims"
            .replace("{" + "orgID" + "}", localVarApiClient.escapeString(orgID.toString()))
            .replace("{" + "projectID" + "}", localVarApiClient.escapeString(projectID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProjectClaimsValidateBeforeCall(UUID orgID, UUID projectID, PatchClaimsRequest patchClaimsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgID' is set
        if (orgID == null) {
            throw new ApiException("Missing the required parameter 'orgID' when calling updateProjectClaims(Async)");
        }

        // verify the required parameter 'projectID' is set
        if (projectID == null) {
            throw new ApiException("Missing the required parameter 'projectID' when calling updateProjectClaims(Async)");
        }

        return updateProjectClaimsCall(orgID, projectID, patchClaimsRequest, _callback);

    }


    private ApiResponse<ClaimResponse> updateProjectClaimsWithHttpInfo(UUID orgID, UUID projectID, PatchClaimsRequest patchClaimsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateProjectClaimsValidateBeforeCall(orgID, projectID, patchClaimsRequest, null);
        Type localVarReturnType = new TypeToken<ClaimResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateProjectClaimsAsync(UUID orgID, UUID projectID, PatchClaimsRequest patchClaimsRequest, final ApiCallback<ClaimResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProjectClaimsValidateBeforeCall(orgID, projectID, patchClaimsRequest, _callback);
        Type localVarReturnType = new TypeToken<ClaimResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateProjectClaimsRequestBuilder {
        private final UUID orgID;
        private final UUID projectID;
        private List<String> audience;
        private String ttl;

        private UpdateProjectClaimsRequestBuilder(UUID orgID, UUID projectID) {
            this.orgID = orgID;
            this.projectID = projectID;
        }

        /**
         * Set audience
         * @param audience  (optional)
         * @return UpdateProjectClaimsRequestBuilder
         */
        public UpdateProjectClaimsRequestBuilder audience(List<String> audience) {
            this.audience = audience;
            return this;
        }
        
        /**
         * Set ttl
         * @param ttl  (optional)
         * @return UpdateProjectClaimsRequestBuilder
         */
        public UpdateProjectClaimsRequestBuilder ttl(String ttl) {
            this.ttl = ttl;
            return this;
        }
        
        /**
         * Build call for updateProjectClaims
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Claims successfully patched. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PatchClaimsRequest patchClaimsRequest = buildBodyParams();
            return updateProjectClaimsCall(orgID, projectID, patchClaimsRequest, _callback);
        }

        private PatchClaimsRequest buildBodyParams() {
            PatchClaimsRequest patchClaimsRequest = new PatchClaimsRequest();
            patchClaimsRequest.audience(this.audience);
            patchClaimsRequest.ttl(this.ttl);
            return patchClaimsRequest;
        }

        /**
         * Execute updateProjectClaims request
         * @return ClaimResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Claims successfully patched. </td><td>  -  </td></tr>
         </table>
         */
        public ClaimResponse execute() throws ApiException {
            PatchClaimsRequest patchClaimsRequest = buildBodyParams();
            ApiResponse<ClaimResponse> localVarResp = updateProjectClaimsWithHttpInfo(orgID, projectID, patchClaimsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateProjectClaims request with HTTP info returned
         * @return ApiResponse&lt;ClaimResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Claims successfully patched. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ClaimResponse> executeWithHttpInfo() throws ApiException {
            PatchClaimsRequest patchClaimsRequest = buildBodyParams();
            return updateProjectClaimsWithHttpInfo(orgID, projectID, patchClaimsRequest);
        }

        /**
         * Execute updateProjectClaims request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Claims successfully patched. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ClaimResponse> _callback) throws ApiException {
            PatchClaimsRequest patchClaimsRequest = buildBodyParams();
            return updateProjectClaimsAsync(orgID, projectID, patchClaimsRequest, _callback);
        }
    }

    /**
     * Patch project-level claims
     * Creates/Updates project-level custom claims of OIDC identity tokens
     * @param orgID  (required)
     * @param projectID  (required)
     * @return UpdateProjectClaimsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Claims successfully patched. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateProjectClaimsRequestBuilder updateProjectClaims(UUID orgID, UUID projectID) throws IllegalArgumentException {
        if (orgID == null) throw new IllegalArgumentException("\"orgID\" is required but got null");
            

        if (projectID == null) throw new IllegalArgumentException("\"projectID\" is required but got null");
            

        return new UpdateProjectClaimsRequestBuilder(orgID, projectID);
    }
}
