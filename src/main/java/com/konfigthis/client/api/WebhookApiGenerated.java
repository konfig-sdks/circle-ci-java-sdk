/*
 * CircleCI API
 * This describes the resources that make up the CircleCI API v2.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.util.UUID;
import com.konfigthis.client.model.WebhookCreateOutboundWebhookRequest;
import com.konfigthis.client.model.WebhookCreateOutboundWebhookRequestScope;
import com.konfigthis.client.model.WebhookCreateOutboundWebhookResponse;
import com.konfigthis.client.model.WebhookCreateOutboundWebhookdefaultResponse;
import com.konfigthis.client.model.WebhookDeleteOutboundWebhookResponse;
import com.konfigthis.client.model.WebhookDeleteOutboundWebhookdefaultResponse;
import com.konfigthis.client.model.WebhookGetByIdResponse;
import com.konfigthis.client.model.WebhookGetByIddefaultResponse;
import com.konfigthis.client.model.WebhookListMatchingScopeResponse;
import com.konfigthis.client.model.WebhookListMatchingScopedefaultResponse;
import com.konfigthis.client.model.WebhookUpdateOutboundWebhookRequest;
import com.konfigthis.client.model.WebhookUpdateOutboundWebhookResponse;
import com.konfigthis.client.model.WebhookUpdateOutboundWebhookdefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WebhookApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WebhookApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public WebhookApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createOutboundWebhookCall(WebhookCreateOutboundWebhookRequest webhookCreateOutboundWebhookRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webhookCreateOutboundWebhookRequest;

        // create path and map variables
        String localVarPath = "/webhook";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOutboundWebhookValidateBeforeCall(WebhookCreateOutboundWebhookRequest webhookCreateOutboundWebhookRequest, final ApiCallback _callback) throws ApiException {
        return createOutboundWebhookCall(webhookCreateOutboundWebhookRequest, _callback);

    }


    private ApiResponse<WebhookCreateOutboundWebhookResponse> createOutboundWebhookWithHttpInfo(WebhookCreateOutboundWebhookRequest webhookCreateOutboundWebhookRequest) throws ApiException {
        okhttp3.Call localVarCall = createOutboundWebhookValidateBeforeCall(webhookCreateOutboundWebhookRequest, null);
        Type localVarReturnType = new TypeToken<WebhookCreateOutboundWebhookResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createOutboundWebhookAsync(WebhookCreateOutboundWebhookRequest webhookCreateOutboundWebhookRequest, final ApiCallback<WebhookCreateOutboundWebhookResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOutboundWebhookValidateBeforeCall(webhookCreateOutboundWebhookRequest, _callback);
        Type localVarReturnType = new TypeToken<WebhookCreateOutboundWebhookResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateOutboundWebhookRequestBuilder {
        private final String name;
        private final List<String> events;
        private final String url;
        private final Boolean verifyTls;
        private final String signingSecret;
        private final WebhookCreateOutboundWebhookRequestScope scope;

        private CreateOutboundWebhookRequestBuilder(String name, List<String> events, String url, Boolean verifyTls, String signingSecret, WebhookCreateOutboundWebhookRequestScope scope) {
            this.name = name;
            this.events = events;
            this.url = url;
            this.verifyTls = verifyTls;
            this.signingSecret = signingSecret;
            this.scope = scope;
        }

        /**
         * Build call for createOutboundWebhook
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A webhook </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebhookCreateOutboundWebhookRequest webhookCreateOutboundWebhookRequest = buildBodyParams();
            return createOutboundWebhookCall(webhookCreateOutboundWebhookRequest, _callback);
        }

        private WebhookCreateOutboundWebhookRequest buildBodyParams() {
            WebhookCreateOutboundWebhookRequest webhookCreateOutboundWebhookRequest = new WebhookCreateOutboundWebhookRequest();
            webhookCreateOutboundWebhookRequest.name(this.name);
            if (this.events != null)
            webhookCreateOutboundWebhookRequest.events(WebhookCreateOutboundWebhookRequest.EventsEnum.fromValue(this.events));
            webhookCreateOutboundWebhookRequest.url(this.url);
            webhookCreateOutboundWebhookRequest.verifyTls(this.verifyTls);
            webhookCreateOutboundWebhookRequest.signingSecret(this.signingSecret);
            webhookCreateOutboundWebhookRequest.scope(this.scope);
            return webhookCreateOutboundWebhookRequest;
        }

        /**
         * Execute createOutboundWebhook request
         * @return WebhookCreateOutboundWebhookResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A webhook </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public WebhookCreateOutboundWebhookResponse execute() throws ApiException {
            WebhookCreateOutboundWebhookRequest webhookCreateOutboundWebhookRequest = buildBodyParams();
            ApiResponse<WebhookCreateOutboundWebhookResponse> localVarResp = createOutboundWebhookWithHttpInfo(webhookCreateOutboundWebhookRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createOutboundWebhook request with HTTP info returned
         * @return ApiResponse&lt;WebhookCreateOutboundWebhookResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A webhook </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebhookCreateOutboundWebhookResponse> executeWithHttpInfo() throws ApiException {
            WebhookCreateOutboundWebhookRequest webhookCreateOutboundWebhookRequest = buildBodyParams();
            return createOutboundWebhookWithHttpInfo(webhookCreateOutboundWebhookRequest);
        }

        /**
         * Execute createOutboundWebhook request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A webhook </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebhookCreateOutboundWebhookResponse> _callback) throws ApiException {
            WebhookCreateOutboundWebhookRequest webhookCreateOutboundWebhookRequest = buildBodyParams();
            return createOutboundWebhookAsync(webhookCreateOutboundWebhookRequest, _callback);
        }
    }

    /**
     * Create an outbound webhook
     * Creates an outbound webhook.
     * @return CreateOutboundWebhookRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A webhook </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public CreateOutboundWebhookRequestBuilder createOutboundWebhook(String name, List<String> events, String url, Boolean verifyTls, String signingSecret, WebhookCreateOutboundWebhookRequestScope scope) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (events == null) throw new IllegalArgumentException("\"events\" is required but got null");
        if (url == null) throw new IllegalArgumentException("\"url\" is required but got null");
            

        if (verifyTls == null) throw new IllegalArgumentException("\"verifyTls\" is required but got null");
        if (signingSecret == null) throw new IllegalArgumentException("\"signingSecret\" is required but got null");
            

        if (scope == null) throw new IllegalArgumentException("\"scope\" is required but got null");
        return new CreateOutboundWebhookRequestBuilder(name, events, url, verifyTls, signingSecret, scope);
    }
    private okhttp3.Call deleteOutboundWebhookCall(UUID webhookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhook/{webhook-id}"
            .replace("{" + "webhook-id" + "}", localVarApiClient.escapeString(webhookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOutboundWebhookValidateBeforeCall(UUID webhookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webhookId' is set
        if (webhookId == null) {
            throw new ApiException("Missing the required parameter 'webhookId' when calling deleteOutboundWebhook(Async)");
        }

        return deleteOutboundWebhookCall(webhookId, _callback);

    }


    private ApiResponse<WebhookDeleteOutboundWebhookResponse> deleteOutboundWebhookWithHttpInfo(UUID webhookId) throws ApiException {
        okhttp3.Call localVarCall = deleteOutboundWebhookValidateBeforeCall(webhookId, null);
        Type localVarReturnType = new TypeToken<WebhookDeleteOutboundWebhookResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteOutboundWebhookAsync(UUID webhookId, final ApiCallback<WebhookDeleteOutboundWebhookResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOutboundWebhookValidateBeforeCall(webhookId, _callback);
        Type localVarReturnType = new TypeToken<WebhookDeleteOutboundWebhookResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteOutboundWebhookRequestBuilder {
        private final UUID webhookId;

        private DeleteOutboundWebhookRequestBuilder(UUID webhookId) {
            this.webhookId = webhookId;
        }

        /**
         * Build call for deleteOutboundWebhook
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A confirmation message </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteOutboundWebhookCall(webhookId, _callback);
        }


        /**
         * Execute deleteOutboundWebhook request
         * @return WebhookDeleteOutboundWebhookResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A confirmation message </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public WebhookDeleteOutboundWebhookResponse execute() throws ApiException {
            ApiResponse<WebhookDeleteOutboundWebhookResponse> localVarResp = deleteOutboundWebhookWithHttpInfo(webhookId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteOutboundWebhook request with HTTP info returned
         * @return ApiResponse&lt;WebhookDeleteOutboundWebhookResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A confirmation message </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebhookDeleteOutboundWebhookResponse> executeWithHttpInfo() throws ApiException {
            return deleteOutboundWebhookWithHttpInfo(webhookId);
        }

        /**
         * Execute deleteOutboundWebhook request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A confirmation message </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebhookDeleteOutboundWebhookResponse> _callback) throws ApiException {
            return deleteOutboundWebhookAsync(webhookId, _callback);
        }
    }

    /**
     * Delete an outbound webhook
     * Deletes an outbound webhook
     * @param webhookId ID of the webhook (UUID) (required)
     * @return DeleteOutboundWebhookRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A confirmation message </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteOutboundWebhookRequestBuilder deleteOutboundWebhook(UUID webhookId) throws IllegalArgumentException {
        if (webhookId == null) throw new IllegalArgumentException("\"webhookId\" is required but got null");
            

        return new DeleteOutboundWebhookRequestBuilder(webhookId);
    }
    private okhttp3.Call getByIdCall(UUID webhookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhook/{webhook-id}"
            .replace("{" + "webhook-id" + "}", localVarApiClient.escapeString(webhookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(UUID webhookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webhookId' is set
        if (webhookId == null) {
            throw new ApiException("Missing the required parameter 'webhookId' when calling getById(Async)");
        }

        return getByIdCall(webhookId, _callback);

    }


    private ApiResponse<WebhookGetByIdResponse> getByIdWithHttpInfo(UUID webhookId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(webhookId, null);
        Type localVarReturnType = new TypeToken<WebhookGetByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(UUID webhookId, final ApiCallback<WebhookGetByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(webhookId, _callback);
        Type localVarReturnType = new TypeToken<WebhookGetByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final UUID webhookId;

        private GetByIdRequestBuilder(UUID webhookId) {
            this.webhookId = webhookId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A webhook </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(webhookId, _callback);
        }


        /**
         * Execute getById request
         * @return WebhookGetByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A webhook </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public WebhookGetByIdResponse execute() throws ApiException {
            ApiResponse<WebhookGetByIdResponse> localVarResp = getByIdWithHttpInfo(webhookId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;WebhookGetByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A webhook </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebhookGetByIdResponse> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(webhookId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A webhook </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebhookGetByIdResponse> _callback) throws ApiException {
            return getByIdAsync(webhookId, _callback);
        }
    }

    /**
     * Get a webhook
     * Get an outbound webhook by id.
     * @param webhookId ID of the webhook (UUID) (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A webhook </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(UUID webhookId) throws IllegalArgumentException {
        if (webhookId == null) throw new IllegalArgumentException("\"webhookId\" is required but got null");
            

        return new GetByIdRequestBuilder(webhookId);
    }
    private okhttp3.Call listMatchingScopeCall(UUID scopeId, String scopeType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhook";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scopeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope-id", scopeId));
        }

        if (scopeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope-type", scopeType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMatchingScopeValidateBeforeCall(UUID scopeId, String scopeType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scopeId' is set
        if (scopeId == null) {
            throw new ApiException("Missing the required parameter 'scopeId' when calling listMatchingScope(Async)");
        }

        // verify the required parameter 'scopeType' is set
        if (scopeType == null) {
            throw new ApiException("Missing the required parameter 'scopeType' when calling listMatchingScope(Async)");
        }

        return listMatchingScopeCall(scopeId, scopeType, _callback);

    }


    private ApiResponse<WebhookListMatchingScopeResponse> listMatchingScopeWithHttpInfo(UUID scopeId, String scopeType) throws ApiException {
        okhttp3.Call localVarCall = listMatchingScopeValidateBeforeCall(scopeId, scopeType, null);
        Type localVarReturnType = new TypeToken<WebhookListMatchingScopeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listMatchingScopeAsync(UUID scopeId, String scopeType, final ApiCallback<WebhookListMatchingScopeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMatchingScopeValidateBeforeCall(scopeId, scopeType, _callback);
        Type localVarReturnType = new TypeToken<WebhookListMatchingScopeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListMatchingScopeRequestBuilder {
        private final UUID scopeId;
        private final String scopeType;

        private ListMatchingScopeRequestBuilder(UUID scopeId, String scopeType) {
            this.scopeId = scopeId;
            this.scopeType = scopeType;
        }

        /**
         * Build call for listMatchingScope
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of webhooks </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listMatchingScopeCall(scopeId, scopeType, _callback);
        }


        /**
         * Execute listMatchingScope request
         * @return WebhookListMatchingScopeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of webhooks </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public WebhookListMatchingScopeResponse execute() throws ApiException {
            ApiResponse<WebhookListMatchingScopeResponse> localVarResp = listMatchingScopeWithHttpInfo(scopeId, scopeType);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listMatchingScope request with HTTP info returned
         * @return ApiResponse&lt;WebhookListMatchingScopeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of webhooks </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebhookListMatchingScopeResponse> executeWithHttpInfo() throws ApiException {
            return listMatchingScopeWithHttpInfo(scopeId, scopeType);
        }

        /**
         * Execute listMatchingScope request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of webhooks </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebhookListMatchingScopeResponse> _callback) throws ApiException {
            return listMatchingScopeAsync(scopeId, scopeType, _callback);
        }
    }

    /**
     * List webhooks
     * Get a list of outbound webhooks that match the given scope-type and scope-id
     * @param scopeId ID of the scope being used (at the moment, only project ID is supported) (required)
     * @param scopeType Type of the scope being used (required)
     * @return ListMatchingScopeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of webhooks </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ListMatchingScopeRequestBuilder listMatchingScope(UUID scopeId, String scopeType) throws IllegalArgumentException {
        if (scopeId == null) throw new IllegalArgumentException("\"scopeId\" is required but got null");
            

        if (scopeType == null) throw new IllegalArgumentException("\"scopeType\" is required but got null");
            

        return new ListMatchingScopeRequestBuilder(scopeId, scopeType);
    }
    private okhttp3.Call updateOutboundWebhookCall(UUID webhookId, WebhookUpdateOutboundWebhookRequest webhookUpdateOutboundWebhookRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webhookUpdateOutboundWebhookRequest;

        // create path and map variables
        String localVarPath = "/webhook/{webhook-id}"
            .replace("{" + "webhook-id" + "}", localVarApiClient.escapeString(webhookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOutboundWebhookValidateBeforeCall(UUID webhookId, WebhookUpdateOutboundWebhookRequest webhookUpdateOutboundWebhookRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webhookId' is set
        if (webhookId == null) {
            throw new ApiException("Missing the required parameter 'webhookId' when calling updateOutboundWebhook(Async)");
        }

        return updateOutboundWebhookCall(webhookId, webhookUpdateOutboundWebhookRequest, _callback);

    }


    private ApiResponse<WebhookUpdateOutboundWebhookResponse> updateOutboundWebhookWithHttpInfo(UUID webhookId, WebhookUpdateOutboundWebhookRequest webhookUpdateOutboundWebhookRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOutboundWebhookValidateBeforeCall(webhookId, webhookUpdateOutboundWebhookRequest, null);
        Type localVarReturnType = new TypeToken<WebhookUpdateOutboundWebhookResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateOutboundWebhookAsync(UUID webhookId, WebhookUpdateOutboundWebhookRequest webhookUpdateOutboundWebhookRequest, final ApiCallback<WebhookUpdateOutboundWebhookResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOutboundWebhookValidateBeforeCall(webhookId, webhookUpdateOutboundWebhookRequest, _callback);
        Type localVarReturnType = new TypeToken<WebhookUpdateOutboundWebhookResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateOutboundWebhookRequestBuilder {
        private final UUID webhookId;
        private String name;
        private List<String> events;
        private String url;
        private String signingSecret;
        private Boolean verifyTls;

        private UpdateOutboundWebhookRequestBuilder(UUID webhookId) {
            this.webhookId = webhookId;
        }

        /**
         * Set name
         * @param name Name of the webhook (optional)
         * @return UpdateOutboundWebhookRequestBuilder
         */
        public UpdateOutboundWebhookRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set events
         * @param events Events that will trigger the webhook (optional)
         * @return UpdateOutboundWebhookRequestBuilder
         */
        public UpdateOutboundWebhookRequestBuilder events(List<String> events) {
            this.events = events;
            return this;
        }
        
        /**
         * Set url
         * @param url URL to deliver the webhook to. Note: protocol must be included as well (only https is supported) (optional)
         * @return UpdateOutboundWebhookRequestBuilder
         */
        public UpdateOutboundWebhookRequestBuilder url(String url) {
            this.url = url;
            return this;
        }
        
        /**
         * Set signingSecret
         * @param signingSecret Secret used to build an HMAC hash of the payload and passed as a header in the webhook request (optional)
         * @return UpdateOutboundWebhookRequestBuilder
         */
        public UpdateOutboundWebhookRequestBuilder signingSecret(String signingSecret) {
            this.signingSecret = signingSecret;
            return this;
        }
        
        /**
         * Set verifyTls
         * @param verifyTls Whether to enforce TLS certificate verification when delivering the webhook (optional)
         * @return UpdateOutboundWebhookRequestBuilder
         */
        public UpdateOutboundWebhookRequestBuilder verifyTls(Boolean verifyTls) {
            this.verifyTls = verifyTls;
            return this;
        }
        
        /**
         * Build call for updateOutboundWebhook
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A webhook </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebhookUpdateOutboundWebhookRequest webhookUpdateOutboundWebhookRequest = buildBodyParams();
            return updateOutboundWebhookCall(webhookId, webhookUpdateOutboundWebhookRequest, _callback);
        }

        private WebhookUpdateOutboundWebhookRequest buildBodyParams() {
            WebhookUpdateOutboundWebhookRequest webhookUpdateOutboundWebhookRequest = new WebhookUpdateOutboundWebhookRequest();
            webhookUpdateOutboundWebhookRequest.name(this.name);
            if (this.events != null)
            webhookUpdateOutboundWebhookRequest.events(WebhookUpdateOutboundWebhookRequest.EventsEnum.fromValue(this.events));
            webhookUpdateOutboundWebhookRequest.url(this.url);
            webhookUpdateOutboundWebhookRequest.signingSecret(this.signingSecret);
            webhookUpdateOutboundWebhookRequest.verifyTls(this.verifyTls);
            return webhookUpdateOutboundWebhookRequest;
        }

        /**
         * Execute updateOutboundWebhook request
         * @return WebhookUpdateOutboundWebhookResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A webhook </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public WebhookUpdateOutboundWebhookResponse execute() throws ApiException {
            WebhookUpdateOutboundWebhookRequest webhookUpdateOutboundWebhookRequest = buildBodyParams();
            ApiResponse<WebhookUpdateOutboundWebhookResponse> localVarResp = updateOutboundWebhookWithHttpInfo(webhookId, webhookUpdateOutboundWebhookRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateOutboundWebhook request with HTTP info returned
         * @return ApiResponse&lt;WebhookUpdateOutboundWebhookResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A webhook </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebhookUpdateOutboundWebhookResponse> executeWithHttpInfo() throws ApiException {
            WebhookUpdateOutboundWebhookRequest webhookUpdateOutboundWebhookRequest = buildBodyParams();
            return updateOutboundWebhookWithHttpInfo(webhookId, webhookUpdateOutboundWebhookRequest);
        }

        /**
         * Execute updateOutboundWebhook request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A webhook </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebhookUpdateOutboundWebhookResponse> _callback) throws ApiException {
            WebhookUpdateOutboundWebhookRequest webhookUpdateOutboundWebhookRequest = buildBodyParams();
            return updateOutboundWebhookAsync(webhookId, webhookUpdateOutboundWebhookRequest, _callback);
        }
    }

    /**
     * Update an outbound webhook
     * Updates an outbound webhook.
     * @param webhookId ID of the webhook (UUID) (required)
     * @return UpdateOutboundWebhookRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A webhook </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateOutboundWebhookRequestBuilder updateOutboundWebhook(UUID webhookId) throws IllegalArgumentException {
        if (webhookId == null) throw new IllegalArgumentException("\"webhookId\" is required but got null");
            

        return new UpdateOutboundWebhookRequestBuilder(webhookId);
    }
}
