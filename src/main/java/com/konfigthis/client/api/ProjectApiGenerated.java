/*
 * CircleCI API
 * This describes the resources that make up the CircleCI API v2.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ProjectCreateCheckoutKeyRequest;
import com.konfigthis.client.model.ProjectCreateCheckoutKeyResponse;
import com.konfigthis.client.model.ProjectCreateCheckoutKeydefaultResponse;
import com.konfigthis.client.model.ProjectCreateEnvVarRequest;
import com.konfigthis.client.model.ProjectCreateEnvVarResponse;
import com.konfigthis.client.model.ProjectCreateEnvVardefaultResponse;
import com.konfigthis.client.model.ProjectDeleteCheckoutKeyByFingerprintResponse;
import com.konfigthis.client.model.ProjectDeleteCheckoutKeyByFingerprintdefaultResponse;
import com.konfigthis.client.model.ProjectDeleteEnvironmentVariableResponse;
import com.konfigthis.client.model.ProjectDeleteEnvironmentVariabledefaultResponse;
import com.konfigthis.client.model.ProjectGetBySlugResponse;
import com.konfigthis.client.model.ProjectGetBySlugdefaultResponse;
import com.konfigthis.client.model.ProjectGetCheckoutKeyByFingerprintResponse;
import com.konfigthis.client.model.ProjectGetCheckoutKeyByFingerprintdefaultResponse;
import com.konfigthis.client.model.ProjectGetMaskedEnvVarResponse;
import com.konfigthis.client.model.ProjectGetMaskedEnvVardefaultResponse;
import com.konfigthis.client.model.ProjectListCheckoutKeysResponse;
import com.konfigthis.client.model.ProjectListCheckoutKeysdefaultResponse;
import com.konfigthis.client.model.ProjectListEnvVarValuesResponse;
import com.konfigthis.client.model.ProjectListEnvVarValuesdefaultResponse;
import com.konfigthis.client.model.ProjectSettings;
import com.konfigthis.client.model.ProjectSettingsAdvanced;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ProjectApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProjectApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createCheckoutKeyCall(String projectSlug, ProjectCreateCheckoutKeyRequest projectCreateCheckoutKeyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectCreateCheckoutKeyRequest;

        // create path and map variables
        String localVarPath = "/project/{project-slug}/checkout-key"
            .replace("{" + "project-slug" + "}", localVarApiClient.escapeString(projectSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCheckoutKeyValidateBeforeCall(String projectSlug, ProjectCreateCheckoutKeyRequest projectCreateCheckoutKeyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling createCheckoutKey(Async)");
        }

        return createCheckoutKeyCall(projectSlug, projectCreateCheckoutKeyRequest, _callback);

    }


    private ApiResponse<ProjectCreateCheckoutKeyResponse> createCheckoutKeyWithHttpInfo(String projectSlug, ProjectCreateCheckoutKeyRequest projectCreateCheckoutKeyRequest) throws ApiException {
        okhttp3.Call localVarCall = createCheckoutKeyValidateBeforeCall(projectSlug, projectCreateCheckoutKeyRequest, null);
        Type localVarReturnType = new TypeToken<ProjectCreateCheckoutKeyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createCheckoutKeyAsync(String projectSlug, ProjectCreateCheckoutKeyRequest projectCreateCheckoutKeyRequest, final ApiCallback<ProjectCreateCheckoutKeyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCheckoutKeyValidateBeforeCall(projectSlug, projectCreateCheckoutKeyRequest, _callback);
        Type localVarReturnType = new TypeToken<ProjectCreateCheckoutKeyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateCheckoutKeyRequestBuilder {
        private final String type;
        private final String projectSlug;

        private CreateCheckoutKeyRequestBuilder(String type, String projectSlug) {
            this.type = type;
            this.projectSlug = projectSlug;
        }

        /**
         * Build call for createCheckoutKey
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The checkout key. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ProjectCreateCheckoutKeyRequest projectCreateCheckoutKeyRequest = buildBodyParams();
            return createCheckoutKeyCall(projectSlug, projectCreateCheckoutKeyRequest, _callback);
        }

        private ProjectCreateCheckoutKeyRequest buildBodyParams() {
            ProjectCreateCheckoutKeyRequest projectCreateCheckoutKeyRequest = new ProjectCreateCheckoutKeyRequest();
            if (this.type != null)
            projectCreateCheckoutKeyRequest.type(ProjectCreateCheckoutKeyRequest.TypeEnum.fromValue(this.type));
            return projectCreateCheckoutKeyRequest;
        }

        /**
         * Execute createCheckoutKey request
         * @return ProjectCreateCheckoutKeyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The checkout key. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectCreateCheckoutKeyResponse execute() throws ApiException {
            ProjectCreateCheckoutKeyRequest projectCreateCheckoutKeyRequest = buildBodyParams();
            ApiResponse<ProjectCreateCheckoutKeyResponse> localVarResp = createCheckoutKeyWithHttpInfo(projectSlug, projectCreateCheckoutKeyRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createCheckoutKey request with HTTP info returned
         * @return ApiResponse&lt;ProjectCreateCheckoutKeyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The checkout key. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectCreateCheckoutKeyResponse> executeWithHttpInfo() throws ApiException {
            ProjectCreateCheckoutKeyRequest projectCreateCheckoutKeyRequest = buildBodyParams();
            return createCheckoutKeyWithHttpInfo(projectSlug, projectCreateCheckoutKeyRequest);
        }

        /**
         * Execute createCheckoutKey request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The checkout key. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectCreateCheckoutKeyResponse> _callback) throws ApiException {
            ProjectCreateCheckoutKeyRequest projectCreateCheckoutKeyRequest = buildBodyParams();
            return createCheckoutKeyAsync(projectSlug, projectCreateCheckoutKeyRequest, _callback);
        }
    }

    /**
     * Create a new checkout key
     * Not available to projects that use GitLab or GitHub App. Creates a new checkout key. This API request is only usable with a user API token.                            Please ensure that you have authorized your account with GitHub before creating user keys.                            This is necessary to give CircleCI the permission to create a user key associated with                            your GitHub user account. You can find this page by visiting Project Settings &gt; Checkout SSH Keys
     * @param projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings). (required)
     * @return CreateCheckoutKeyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The checkout key. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public CreateCheckoutKeyRequestBuilder createCheckoutKey(String type, String projectSlug) throws IllegalArgumentException {
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (projectSlug == null) throw new IllegalArgumentException("\"projectSlug\" is required but got null");
            

        return new CreateCheckoutKeyRequestBuilder(type, projectSlug);
    }
    private okhttp3.Call createEnvVarCall(String projectSlug, ProjectCreateEnvVarRequest projectCreateEnvVarRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectCreateEnvVarRequest;

        // create path and map variables
        String localVarPath = "/project/{project-slug}/envvar"
            .replace("{" + "project-slug" + "}", localVarApiClient.escapeString(projectSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEnvVarValidateBeforeCall(String projectSlug, ProjectCreateEnvVarRequest projectCreateEnvVarRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling createEnvVar(Async)");
        }

        return createEnvVarCall(projectSlug, projectCreateEnvVarRequest, _callback);

    }


    private ApiResponse<ProjectCreateEnvVarResponse> createEnvVarWithHttpInfo(String projectSlug, ProjectCreateEnvVarRequest projectCreateEnvVarRequest) throws ApiException {
        okhttp3.Call localVarCall = createEnvVarValidateBeforeCall(projectSlug, projectCreateEnvVarRequest, null);
        Type localVarReturnType = new TypeToken<ProjectCreateEnvVarResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createEnvVarAsync(String projectSlug, ProjectCreateEnvVarRequest projectCreateEnvVarRequest, final ApiCallback<ProjectCreateEnvVarResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEnvVarValidateBeforeCall(projectSlug, projectCreateEnvVarRequest, _callback);
        Type localVarReturnType = new TypeToken<ProjectCreateEnvVarResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateEnvVarRequestBuilder {
        private final String name;
        private final String value;
        private final String projectSlug;

        private CreateEnvVarRequestBuilder(String name, String value, String projectSlug) {
            this.name = name;
            this.value = value;
            this.projectSlug = projectSlug;
        }

        /**
         * Build call for createEnvVar
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The environment variable. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ProjectCreateEnvVarRequest projectCreateEnvVarRequest = buildBodyParams();
            return createEnvVarCall(projectSlug, projectCreateEnvVarRequest, _callback);
        }

        private ProjectCreateEnvVarRequest buildBodyParams() {
            ProjectCreateEnvVarRequest projectCreateEnvVarRequest = new ProjectCreateEnvVarRequest();
            projectCreateEnvVarRequest.name(this.name);
            projectCreateEnvVarRequest.value(this.value);
            return projectCreateEnvVarRequest;
        }

        /**
         * Execute createEnvVar request
         * @return ProjectCreateEnvVarResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The environment variable. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectCreateEnvVarResponse execute() throws ApiException {
            ProjectCreateEnvVarRequest projectCreateEnvVarRequest = buildBodyParams();
            ApiResponse<ProjectCreateEnvVarResponse> localVarResp = createEnvVarWithHttpInfo(projectSlug, projectCreateEnvVarRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createEnvVar request with HTTP info returned
         * @return ApiResponse&lt;ProjectCreateEnvVarResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The environment variable. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectCreateEnvVarResponse> executeWithHttpInfo() throws ApiException {
            ProjectCreateEnvVarRequest projectCreateEnvVarRequest = buildBodyParams();
            return createEnvVarWithHttpInfo(projectSlug, projectCreateEnvVarRequest);
        }

        /**
         * Execute createEnvVar request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The environment variable. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectCreateEnvVarResponse> _callback) throws ApiException {
            ProjectCreateEnvVarRequest projectCreateEnvVarRequest = buildBodyParams();
            return createEnvVarAsync(projectSlug, projectCreateEnvVarRequest, _callback);
        }
    }

    /**
     * Create an environment variable
     * Creates a new environment variable.
     * @param projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings). (required)
     * @return CreateEnvVarRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The environment variable. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public CreateEnvVarRequestBuilder createEnvVar(String name, String value, String projectSlug) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (value == null) throw new IllegalArgumentException("\"value\" is required but got null");
            

        if (projectSlug == null) throw new IllegalArgumentException("\"projectSlug\" is required but got null");
            

        return new CreateEnvVarRequestBuilder(name, value, projectSlug);
    }
    private okhttp3.Call createProjectDefaultSettingsCall(String provider, String organization, String project, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{provider}/{organization}/{project}"
            .replace("{" + "provider" + "}", localVarApiClient.escapeString(provider.toString()))
            .replace("{" + "organization" + "}", localVarApiClient.escapeString(organization.toString()))
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProjectDefaultSettingsValidateBeforeCall(String provider, String organization, String project, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'provider' is set
        if (provider == null) {
            throw new ApiException("Missing the required parameter 'provider' when calling createProjectDefaultSettings(Async)");
        }

        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling createProjectDefaultSettings(Async)");
        }

        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling createProjectDefaultSettings(Async)");
        }

        return createProjectDefaultSettingsCall(provider, organization, project, _callback);

    }


    private ApiResponse<ProjectSettings> createProjectDefaultSettingsWithHttpInfo(String provider, String organization, String project) throws ApiException {
        okhttp3.Call localVarCall = createProjectDefaultSettingsValidateBeforeCall(provider, organization, project, null);
        Type localVarReturnType = new TypeToken<ProjectSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createProjectDefaultSettingsAsync(String provider, String organization, String project, final ApiCallback<ProjectSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProjectDefaultSettingsValidateBeforeCall(provider, organization, project, _callback);
        Type localVarReturnType = new TypeToken<ProjectSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateProjectDefaultSettingsRequestBuilder {
        private final String provider;
        private final String organization;
        private final String project;

        private CreateProjectDefaultSettingsRequestBuilder(String provider, String organization, String project) {
            this.provider = provider;
            this.organization = organization;
            this.project = project;
        }

        /**
         * Build call for createProjectDefaultSettings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createProjectDefaultSettingsCall(provider, organization, project, _callback);
        }


        /**
         * Execute createProjectDefaultSettings request
         * @return ProjectSettings
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful response. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectSettings execute() throws ApiException {
            ApiResponse<ProjectSettings> localVarResp = createProjectDefaultSettingsWithHttpInfo(provider, organization, project);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createProjectDefaultSettings request with HTTP info returned
         * @return ApiResponse&lt;ProjectSettings&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectSettings> executeWithHttpInfo() throws ApiException {
            return createProjectDefaultSettingsWithHttpInfo(provider, organization, project);
        }

        /**
         * Execute createProjectDefaultSettings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectSettings> _callback) throws ApiException {
            return createProjectDefaultSettingsAsync(provider, organization, project, _callback);
        }
    }

    /**
     * 🧪 Create a project
     * [__EXPERIMENTAL__]  Creates a new CircleCI project, and returns a list of the default advanced settings. Can only be called on a repo with a main branch and an existing config.yml file. Not yet available to projects that use GitLab or GitHub App.
     * @param provider The &#x60;provider&#x60; segment of a project or org slug, the first of the three. This may be a VCS. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60;. (required)
     * @param organization The &#x60;organization&#x60; segment of a project or org slug, the second of the three. For GitHub OAuth or Bitbucket projects, this is the organization name. For projects that use GitLab or GitHub App, use the organization ID (found in Organization Settings). (required)
     * @param project The &#x60;project&#x60; segment of a project slug, the third of the three. For GitHub OAuth or Bitbucket projects, this is the repository name. For projects that use GitLab or GitHub App, use the project ID (found in Project Settings). (required)
     * @return CreateProjectDefaultSettingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response. </td><td>  -  </td></tr>
     </table>
     */
    public CreateProjectDefaultSettingsRequestBuilder createProjectDefaultSettings(String provider, String organization, String project) throws IllegalArgumentException {
        if (provider == null) throw new IllegalArgumentException("\"provider\" is required but got null");
            

        if (organization == null) throw new IllegalArgumentException("\"organization\" is required but got null");
            

        if (project == null) throw new IllegalArgumentException("\"project\" is required but got null");
            

        return new CreateProjectDefaultSettingsRequestBuilder(provider, organization, project);
    }
    private okhttp3.Call deleteCheckoutKeyByFingerprintCall(String projectSlug, String fingerprint, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{project-slug}/checkout-key/{fingerprint}"
            .replace("{" + "project-slug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "fingerprint" + "}", localVarApiClient.escapeString(fingerprint.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCheckoutKeyByFingerprintValidateBeforeCall(String projectSlug, String fingerprint, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling deleteCheckoutKeyByFingerprint(Async)");
        }

        // verify the required parameter 'fingerprint' is set
        if (fingerprint == null) {
            throw new ApiException("Missing the required parameter 'fingerprint' when calling deleteCheckoutKeyByFingerprint(Async)");
        }

        return deleteCheckoutKeyByFingerprintCall(projectSlug, fingerprint, _callback);

    }


    private ApiResponse<ProjectDeleteCheckoutKeyByFingerprintResponse> deleteCheckoutKeyByFingerprintWithHttpInfo(String projectSlug, String fingerprint) throws ApiException {
        okhttp3.Call localVarCall = deleteCheckoutKeyByFingerprintValidateBeforeCall(projectSlug, fingerprint, null);
        Type localVarReturnType = new TypeToken<ProjectDeleteCheckoutKeyByFingerprintResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteCheckoutKeyByFingerprintAsync(String projectSlug, String fingerprint, final ApiCallback<ProjectDeleteCheckoutKeyByFingerprintResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCheckoutKeyByFingerprintValidateBeforeCall(projectSlug, fingerprint, _callback);
        Type localVarReturnType = new TypeToken<ProjectDeleteCheckoutKeyByFingerprintResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteCheckoutKeyByFingerprintRequestBuilder {
        private final String projectSlug;
        private final String fingerprint;

        private DeleteCheckoutKeyByFingerprintRequestBuilder(String projectSlug, String fingerprint) {
            this.projectSlug = projectSlug;
            this.fingerprint = fingerprint;
        }

        /**
         * Build call for deleteCheckoutKeyByFingerprint
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A confirmation message. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCheckoutKeyByFingerprintCall(projectSlug, fingerprint, _callback);
        }


        /**
         * Execute deleteCheckoutKeyByFingerprint request
         * @return ProjectDeleteCheckoutKeyByFingerprintResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A confirmation message. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectDeleteCheckoutKeyByFingerprintResponse execute() throws ApiException {
            ApiResponse<ProjectDeleteCheckoutKeyByFingerprintResponse> localVarResp = deleteCheckoutKeyByFingerprintWithHttpInfo(projectSlug, fingerprint);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteCheckoutKeyByFingerprint request with HTTP info returned
         * @return ApiResponse&lt;ProjectDeleteCheckoutKeyByFingerprintResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A confirmation message. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectDeleteCheckoutKeyByFingerprintResponse> executeWithHttpInfo() throws ApiException {
            return deleteCheckoutKeyByFingerprintWithHttpInfo(projectSlug, fingerprint);
        }

        /**
         * Execute deleteCheckoutKeyByFingerprint request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A confirmation message. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectDeleteCheckoutKeyByFingerprintResponse> _callback) throws ApiException {
            return deleteCheckoutKeyByFingerprintAsync(projectSlug, fingerprint, _callback);
        }
    }

    /**
     * Delete a checkout key
     * Deletes the checkout key via md5 or sha256 fingerprint. sha256 keys should be url-encoded.
     * @param projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings). (required)
     * @param fingerprint An SSH key fingerprint. (required)
     * @return DeleteCheckoutKeyByFingerprintRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A confirmation message. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteCheckoutKeyByFingerprintRequestBuilder deleteCheckoutKeyByFingerprint(String projectSlug, String fingerprint) throws IllegalArgumentException {
        if (projectSlug == null) throw new IllegalArgumentException("\"projectSlug\" is required but got null");
            

        if (fingerprint == null) throw new IllegalArgumentException("\"fingerprint\" is required but got null");
            

        return new DeleteCheckoutKeyByFingerprintRequestBuilder(projectSlug, fingerprint);
    }
    private okhttp3.Call deleteEnvironmentVariableCall(String projectSlug, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{project-slug}/envvar/{name}"
            .replace("{" + "project-slug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEnvironmentVariableValidateBeforeCall(String projectSlug, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling deleteEnvironmentVariable(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteEnvironmentVariable(Async)");
        }

        return deleteEnvironmentVariableCall(projectSlug, name, _callback);

    }


    private ApiResponse<ProjectDeleteEnvironmentVariableResponse> deleteEnvironmentVariableWithHttpInfo(String projectSlug, String name) throws ApiException {
        okhttp3.Call localVarCall = deleteEnvironmentVariableValidateBeforeCall(projectSlug, name, null);
        Type localVarReturnType = new TypeToken<ProjectDeleteEnvironmentVariableResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteEnvironmentVariableAsync(String projectSlug, String name, final ApiCallback<ProjectDeleteEnvironmentVariableResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEnvironmentVariableValidateBeforeCall(projectSlug, name, _callback);
        Type localVarReturnType = new TypeToken<ProjectDeleteEnvironmentVariableResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteEnvironmentVariableRequestBuilder {
        private final String projectSlug;
        private final String name;

        private DeleteEnvironmentVariableRequestBuilder(String projectSlug, String name) {
            this.projectSlug = projectSlug;
            this.name = name;
        }

        /**
         * Build call for deleteEnvironmentVariable
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A confirmation message. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteEnvironmentVariableCall(projectSlug, name, _callback);
        }


        /**
         * Execute deleteEnvironmentVariable request
         * @return ProjectDeleteEnvironmentVariableResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A confirmation message. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectDeleteEnvironmentVariableResponse execute() throws ApiException {
            ApiResponse<ProjectDeleteEnvironmentVariableResponse> localVarResp = deleteEnvironmentVariableWithHttpInfo(projectSlug, name);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteEnvironmentVariable request with HTTP info returned
         * @return ApiResponse&lt;ProjectDeleteEnvironmentVariableResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A confirmation message. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectDeleteEnvironmentVariableResponse> executeWithHttpInfo() throws ApiException {
            return deleteEnvironmentVariableWithHttpInfo(projectSlug, name);
        }

        /**
         * Execute deleteEnvironmentVariable request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A confirmation message. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectDeleteEnvironmentVariableResponse> _callback) throws ApiException {
            return deleteEnvironmentVariableAsync(projectSlug, name, _callback);
        }
    }

    /**
     * Delete an environment variable
     * Deletes the environment variable named :name.
     * @param projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings). (required)
     * @param name The name of the environment variable. (required)
     * @return DeleteEnvironmentVariableRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A confirmation message. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteEnvironmentVariableRequestBuilder deleteEnvironmentVariable(String projectSlug, String name) throws IllegalArgumentException {
        if (projectSlug == null) throw new IllegalArgumentException("\"projectSlug\" is required but got null");
            

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new DeleteEnvironmentVariableRequestBuilder(projectSlug, name);
    }
    private okhttp3.Call getBySlugCall(String projectSlug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{project-slug}"
            .replace("{" + "project-slug" + "}", localVarApiClient.escapeString(projectSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBySlugValidateBeforeCall(String projectSlug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling getBySlug(Async)");
        }

        return getBySlugCall(projectSlug, _callback);

    }


    private ApiResponse<ProjectGetBySlugResponse> getBySlugWithHttpInfo(String projectSlug) throws ApiException {
        okhttp3.Call localVarCall = getBySlugValidateBeforeCall(projectSlug, null);
        Type localVarReturnType = new TypeToken<ProjectGetBySlugResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBySlugAsync(String projectSlug, final ApiCallback<ProjectGetBySlugResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBySlugValidateBeforeCall(projectSlug, _callback);
        Type localVarReturnType = new TypeToken<ProjectGetBySlugResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetBySlugRequestBuilder {
        private final String projectSlug;

        private GetBySlugRequestBuilder(String projectSlug) {
            this.projectSlug = projectSlug;
        }

        /**
         * Build call for getBySlug
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A project object </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBySlugCall(projectSlug, _callback);
        }


        /**
         * Execute getBySlug request
         * @return ProjectGetBySlugResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A project object </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectGetBySlugResponse execute() throws ApiException {
            ApiResponse<ProjectGetBySlugResponse> localVarResp = getBySlugWithHttpInfo(projectSlug);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getBySlug request with HTTP info returned
         * @return ApiResponse&lt;ProjectGetBySlugResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A project object </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectGetBySlugResponse> executeWithHttpInfo() throws ApiException {
            return getBySlugWithHttpInfo(projectSlug);
        }

        /**
         * Execute getBySlug request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A project object </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectGetBySlugResponse> _callback) throws ApiException {
            return getBySlugAsync(projectSlug, _callback);
        }
    }

    /**
     * Get a project
     * Retrieves a project by project slug.
     * @param projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings). (required)
     * @return GetBySlugRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A project object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public GetBySlugRequestBuilder getBySlug(String projectSlug) throws IllegalArgumentException {
        if (projectSlug == null) throw new IllegalArgumentException("\"projectSlug\" is required but got null");
            

        return new GetBySlugRequestBuilder(projectSlug);
    }
    private okhttp3.Call getCheckoutKeyByFingerprintCall(String projectSlug, String fingerprint, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{project-slug}/checkout-key/{fingerprint}"
            .replace("{" + "project-slug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "fingerprint" + "}", localVarApiClient.escapeString(fingerprint.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCheckoutKeyByFingerprintValidateBeforeCall(String projectSlug, String fingerprint, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling getCheckoutKeyByFingerprint(Async)");
        }

        // verify the required parameter 'fingerprint' is set
        if (fingerprint == null) {
            throw new ApiException("Missing the required parameter 'fingerprint' when calling getCheckoutKeyByFingerprint(Async)");
        }

        return getCheckoutKeyByFingerprintCall(projectSlug, fingerprint, _callback);

    }


    private ApiResponse<ProjectGetCheckoutKeyByFingerprintResponse> getCheckoutKeyByFingerprintWithHttpInfo(String projectSlug, String fingerprint) throws ApiException {
        okhttp3.Call localVarCall = getCheckoutKeyByFingerprintValidateBeforeCall(projectSlug, fingerprint, null);
        Type localVarReturnType = new TypeToken<ProjectGetCheckoutKeyByFingerprintResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCheckoutKeyByFingerprintAsync(String projectSlug, String fingerprint, final ApiCallback<ProjectGetCheckoutKeyByFingerprintResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCheckoutKeyByFingerprintValidateBeforeCall(projectSlug, fingerprint, _callback);
        Type localVarReturnType = new TypeToken<ProjectGetCheckoutKeyByFingerprintResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCheckoutKeyByFingerprintRequestBuilder {
        private final String projectSlug;
        private final String fingerprint;

        private GetCheckoutKeyByFingerprintRequestBuilder(String projectSlug, String fingerprint) {
            this.projectSlug = projectSlug;
            this.fingerprint = fingerprint;
        }

        /**
         * Build call for getCheckoutKeyByFingerprint
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The checkout key. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCheckoutKeyByFingerprintCall(projectSlug, fingerprint, _callback);
        }


        /**
         * Execute getCheckoutKeyByFingerprint request
         * @return ProjectGetCheckoutKeyByFingerprintResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The checkout key. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectGetCheckoutKeyByFingerprintResponse execute() throws ApiException {
            ApiResponse<ProjectGetCheckoutKeyByFingerprintResponse> localVarResp = getCheckoutKeyByFingerprintWithHttpInfo(projectSlug, fingerprint);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCheckoutKeyByFingerprint request with HTTP info returned
         * @return ApiResponse&lt;ProjectGetCheckoutKeyByFingerprintResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The checkout key. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectGetCheckoutKeyByFingerprintResponse> executeWithHttpInfo() throws ApiException {
            return getCheckoutKeyByFingerprintWithHttpInfo(projectSlug, fingerprint);
        }

        /**
         * Execute getCheckoutKeyByFingerprint request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The checkout key. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectGetCheckoutKeyByFingerprintResponse> _callback) throws ApiException {
            return getCheckoutKeyByFingerprintAsync(projectSlug, fingerprint, _callback);
        }
    }

    /**
     * Get a checkout key
     * Returns an individual checkout key via md5 or sha256 fingerprint. sha256 keys should be url-encoded.
     * @param projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings). (required)
     * @param fingerprint An SSH key fingerprint. (required)
     * @return GetCheckoutKeyByFingerprintRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The checkout key. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public GetCheckoutKeyByFingerprintRequestBuilder getCheckoutKeyByFingerprint(String projectSlug, String fingerprint) throws IllegalArgumentException {
        if (projectSlug == null) throw new IllegalArgumentException("\"projectSlug\" is required but got null");
            

        if (fingerprint == null) throw new IllegalArgumentException("\"fingerprint\" is required but got null");
            

        return new GetCheckoutKeyByFingerprintRequestBuilder(projectSlug, fingerprint);
    }
    private okhttp3.Call getMaskedEnvVarCall(String projectSlug, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{project-slug}/envvar/{name}"
            .replace("{" + "project-slug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMaskedEnvVarValidateBeforeCall(String projectSlug, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling getMaskedEnvVar(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getMaskedEnvVar(Async)");
        }

        return getMaskedEnvVarCall(projectSlug, name, _callback);

    }


    private ApiResponse<ProjectGetMaskedEnvVarResponse> getMaskedEnvVarWithHttpInfo(String projectSlug, String name) throws ApiException {
        okhttp3.Call localVarCall = getMaskedEnvVarValidateBeforeCall(projectSlug, name, null);
        Type localVarReturnType = new TypeToken<ProjectGetMaskedEnvVarResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMaskedEnvVarAsync(String projectSlug, String name, final ApiCallback<ProjectGetMaskedEnvVarResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMaskedEnvVarValidateBeforeCall(projectSlug, name, _callback);
        Type localVarReturnType = new TypeToken<ProjectGetMaskedEnvVarResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMaskedEnvVarRequestBuilder {
        private final String projectSlug;
        private final String name;

        private GetMaskedEnvVarRequestBuilder(String projectSlug, String name) {
            this.projectSlug = projectSlug;
            this.name = name;
        }

        /**
         * Build call for getMaskedEnvVar
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The environment variable. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMaskedEnvVarCall(projectSlug, name, _callback);
        }


        /**
         * Execute getMaskedEnvVar request
         * @return ProjectGetMaskedEnvVarResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The environment variable. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectGetMaskedEnvVarResponse execute() throws ApiException {
            ApiResponse<ProjectGetMaskedEnvVarResponse> localVarResp = getMaskedEnvVarWithHttpInfo(projectSlug, name);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMaskedEnvVar request with HTTP info returned
         * @return ApiResponse&lt;ProjectGetMaskedEnvVarResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The environment variable. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectGetMaskedEnvVarResponse> executeWithHttpInfo() throws ApiException {
            return getMaskedEnvVarWithHttpInfo(projectSlug, name);
        }

        /**
         * Execute getMaskedEnvVar request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The environment variable. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectGetMaskedEnvVarResponse> _callback) throws ApiException {
            return getMaskedEnvVarAsync(projectSlug, name, _callback);
        }
    }

    /**
     * Get a masked environment variable
     * Returns the masked value of environment variable :name.
     * @param projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings). (required)
     * @param name The name of the environment variable. (required)
     * @return GetMaskedEnvVarRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The environment variable. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public GetMaskedEnvVarRequestBuilder getMaskedEnvVar(String projectSlug, String name) throws IllegalArgumentException {
        if (projectSlug == null) throw new IllegalArgumentException("\"projectSlug\" is required but got null");
            

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new GetMaskedEnvVarRequestBuilder(projectSlug, name);
    }
    private okhttp3.Call getSettingsCall(String provider, String organization, String project, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{provider}/{organization}/{project}/settings"
            .replace("{" + "provider" + "}", localVarApiClient.escapeString(provider.toString()))
            .replace("{" + "organization" + "}", localVarApiClient.escapeString(organization.toString()))
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSettingsValidateBeforeCall(String provider, String organization, String project, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'provider' is set
        if (provider == null) {
            throw new ApiException("Missing the required parameter 'provider' when calling getSettings(Async)");
        }

        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling getSettings(Async)");
        }

        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling getSettings(Async)");
        }

        return getSettingsCall(provider, organization, project, _callback);

    }


    private ApiResponse<ProjectSettings> getSettingsWithHttpInfo(String provider, String organization, String project) throws ApiException {
        okhttp3.Call localVarCall = getSettingsValidateBeforeCall(provider, organization, project, null);
        Type localVarReturnType = new TypeToken<ProjectSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSettingsAsync(String provider, String organization, String project, final ApiCallback<ProjectSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSettingsValidateBeforeCall(provider, organization, project, _callback);
        Type localVarReturnType = new TypeToken<ProjectSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSettingsRequestBuilder {
        private final String provider;
        private final String organization;
        private final String project;

        private GetSettingsRequestBuilder(String provider, String organization, String project) {
            this.provider = provider;
            this.organization = organization;
            this.project = project;
        }

        /**
         * Build call for getSettings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSettingsCall(provider, organization, project, _callback);
        }


        /**
         * Execute getSettings request
         * @return ProjectSettings
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectSettings execute() throws ApiException {
            ApiResponse<ProjectSettings> localVarResp = getSettingsWithHttpInfo(provider, organization, project);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSettings request with HTTP info returned
         * @return ApiResponse&lt;ProjectSettings&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectSettings> executeWithHttpInfo() throws ApiException {
            return getSettingsWithHttpInfo(provider, organization, project);
        }

        /**
         * Execute getSettings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectSettings> _callback) throws ApiException {
            return getSettingsAsync(provider, organization, project, _callback);
        }
    }

    /**
     * 🧪 Get project settings
     * [__EXPERIMENTAL__] Returns a list of the advanced settings for a CircleCI project, whether enabled (true) or not (false).
     * @param provider The &#x60;provider&#x60; segment of a project or org slug, the first of the three. This may be a VCS. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60;. (required)
     * @param organization The &#x60;organization&#x60; segment of a project or org slug, the second of the three. For GitHub OAuth or Bitbucket projects, this is the organization name. For projects that use GitLab or GitHub App, use the organization ID (found in Organization Settings). (required)
     * @param project The &#x60;project&#x60; segment of a project slug, the third of the three. For GitHub OAuth or Bitbucket projects, this is the repository name. For projects that use GitLab or GitHub App, use the project ID (found in Project Settings). (required)
     * @return GetSettingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
     </table>
     */
    public GetSettingsRequestBuilder getSettings(String provider, String organization, String project) throws IllegalArgumentException {
        if (provider == null) throw new IllegalArgumentException("\"provider\" is required but got null");
            

        if (organization == null) throw new IllegalArgumentException("\"organization\" is required but got null");
            

        if (project == null) throw new IllegalArgumentException("\"project\" is required but got null");
            

        return new GetSettingsRequestBuilder(provider, organization, project);
    }
    private okhttp3.Call listCheckoutKeysCall(String projectSlug, String digest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{project-slug}/checkout-key"
            .replace("{" + "project-slug" + "}", localVarApiClient.escapeString(projectSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (digest != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("digest", digest));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCheckoutKeysValidateBeforeCall(String projectSlug, String digest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling listCheckoutKeys(Async)");
        }

        return listCheckoutKeysCall(projectSlug, digest, _callback);

    }


    private ApiResponse<ProjectListCheckoutKeysResponse> listCheckoutKeysWithHttpInfo(String projectSlug, String digest) throws ApiException {
        okhttp3.Call localVarCall = listCheckoutKeysValidateBeforeCall(projectSlug, digest, null);
        Type localVarReturnType = new TypeToken<ProjectListCheckoutKeysResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCheckoutKeysAsync(String projectSlug, String digest, final ApiCallback<ProjectListCheckoutKeysResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCheckoutKeysValidateBeforeCall(projectSlug, digest, _callback);
        Type localVarReturnType = new TypeToken<ProjectListCheckoutKeysResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCheckoutKeysRequestBuilder {
        private final String projectSlug;
        private String digest;

        private ListCheckoutKeysRequestBuilder(String projectSlug) {
            this.projectSlug = projectSlug;
        }

        /**
         * Set digest
         * @param digest The fingerprint digest type to return. This may be either &#x60;md5&#x60; or &#x60;sha256&#x60;. If not passed, defaults to &#x60;md5&#x60;. (optional)
         * @return ListCheckoutKeysRequestBuilder
         */
        public ListCheckoutKeysRequestBuilder digest(String digest) {
            this.digest = digest;
            return this;
        }
        
        /**
         * Build call for listCheckoutKeys
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A sequence of checkout keys. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCheckoutKeysCall(projectSlug, digest, _callback);
        }


        /**
         * Execute listCheckoutKeys request
         * @return ProjectListCheckoutKeysResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A sequence of checkout keys. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectListCheckoutKeysResponse execute() throws ApiException {
            ApiResponse<ProjectListCheckoutKeysResponse> localVarResp = listCheckoutKeysWithHttpInfo(projectSlug, digest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCheckoutKeys request with HTTP info returned
         * @return ApiResponse&lt;ProjectListCheckoutKeysResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A sequence of checkout keys. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectListCheckoutKeysResponse> executeWithHttpInfo() throws ApiException {
            return listCheckoutKeysWithHttpInfo(projectSlug, digest);
        }

        /**
         * Execute listCheckoutKeys request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A sequence of checkout keys. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectListCheckoutKeysResponse> _callback) throws ApiException {
            return listCheckoutKeysAsync(projectSlug, digest, _callback);
        }
    }

    /**
     * Get all checkout keys
     * Returns a sequence of checkout keys for &#x60;:project&#x60;.
     * @param projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings). (required)
     * @return ListCheckoutKeysRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A sequence of checkout keys. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ListCheckoutKeysRequestBuilder listCheckoutKeys(String projectSlug) throws IllegalArgumentException {
        if (projectSlug == null) throw new IllegalArgumentException("\"projectSlug\" is required but got null");
            

        return new ListCheckoutKeysRequestBuilder(projectSlug);
    }
    private okhttp3.Call listEnvVarValuesCall(String projectSlug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{project-slug}/envvar"
            .replace("{" + "project-slug" + "}", localVarApiClient.escapeString(projectSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEnvVarValuesValidateBeforeCall(String projectSlug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling listEnvVarValues(Async)");
        }

        return listEnvVarValuesCall(projectSlug, _callback);

    }


    private ApiResponse<ProjectListEnvVarValuesResponse> listEnvVarValuesWithHttpInfo(String projectSlug) throws ApiException {
        okhttp3.Call localVarCall = listEnvVarValuesValidateBeforeCall(projectSlug, null);
        Type localVarReturnType = new TypeToken<ProjectListEnvVarValuesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listEnvVarValuesAsync(String projectSlug, final ApiCallback<ProjectListEnvVarValuesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEnvVarValuesValidateBeforeCall(projectSlug, _callback);
        Type localVarReturnType = new TypeToken<ProjectListEnvVarValuesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListEnvVarValuesRequestBuilder {
        private final String projectSlug;

        private ListEnvVarValuesRequestBuilder(String projectSlug) {
            this.projectSlug = projectSlug;
        }

        /**
         * Build call for listEnvVarValues
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A sequence of environment variables. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listEnvVarValuesCall(projectSlug, _callback);
        }


        /**
         * Execute listEnvVarValues request
         * @return ProjectListEnvVarValuesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A sequence of environment variables. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectListEnvVarValuesResponse execute() throws ApiException {
            ApiResponse<ProjectListEnvVarValuesResponse> localVarResp = listEnvVarValuesWithHttpInfo(projectSlug);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listEnvVarValues request with HTTP info returned
         * @return ApiResponse&lt;ProjectListEnvVarValuesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A sequence of environment variables. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectListEnvVarValuesResponse> executeWithHttpInfo() throws ApiException {
            return listEnvVarValuesWithHttpInfo(projectSlug);
        }

        /**
         * Execute listEnvVarValues request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A sequence of environment variables. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectListEnvVarValuesResponse> _callback) throws ApiException {
            return listEnvVarValuesAsync(projectSlug, _callback);
        }
    }

    /**
     * List all environment variables
     * Returns four &#39;x&#39; characters, in addition to the last four ASCII characters of the value, consistent with the display of environment variable values on the CircleCI website.
     * @param projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings). (required)
     * @return ListEnvVarValuesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A sequence of environment variables. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ListEnvVarValuesRequestBuilder listEnvVarValues(String projectSlug) throws IllegalArgumentException {
        if (projectSlug == null) throw new IllegalArgumentException("\"projectSlug\" is required but got null");
            

        return new ListEnvVarValuesRequestBuilder(projectSlug);
    }
    private okhttp3.Call updateSettingsCall(String provider, String organization, String project, ProjectSettings projectSettings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectSettings;

        // create path and map variables
        String localVarPath = "/project/{provider}/{organization}/{project}/settings"
            .replace("{" + "provider" + "}", localVarApiClient.escapeString(provider.toString()))
            .replace("{" + "organization" + "}", localVarApiClient.escapeString(organization.toString()))
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSettingsValidateBeforeCall(String provider, String organization, String project, ProjectSettings projectSettings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'provider' is set
        if (provider == null) {
            throw new ApiException("Missing the required parameter 'provider' when calling updateSettings(Async)");
        }

        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling updateSettings(Async)");
        }

        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling updateSettings(Async)");
        }

        // verify the required parameter 'projectSettings' is set
        if (projectSettings == null) {
            throw new ApiException("Missing the required parameter 'projectSettings' when calling updateSettings(Async)");
        }

        return updateSettingsCall(provider, organization, project, projectSettings, _callback);

    }


    private ApiResponse<ProjectSettings> updateSettingsWithHttpInfo(String provider, String organization, String project, ProjectSettings projectSettings) throws ApiException {
        okhttp3.Call localVarCall = updateSettingsValidateBeforeCall(provider, organization, project, projectSettings, null);
        Type localVarReturnType = new TypeToken<ProjectSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSettingsAsync(String provider, String organization, String project, ProjectSettings projectSettings, final ApiCallback<ProjectSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSettingsValidateBeforeCall(provider, organization, project, projectSettings, _callback);
        Type localVarReturnType = new TypeToken<ProjectSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSettingsRequestBuilder {
        private final String provider;
        private final String organization;
        private final String project;
        private ProjectSettingsAdvanced advanced;

        private UpdateSettingsRequestBuilder(String provider, String organization, String project) {
            this.provider = provider;
            this.organization = organization;
            this.project = project;
        }

        /**
         * Set advanced
         * @param advanced  (optional)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder advanced(ProjectSettingsAdvanced advanced) {
            this.advanced = advanced;
            return this;
        }
        
        /**
         * Build call for updateSettings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. Always includes the full advanced settings object. Returned even when the provided updates match the existing settings, but can also be returned when &#x60;oss: true&#x60; fails to set. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ProjectSettings projectSettings = buildBodyParams();
            return updateSettingsCall(provider, organization, project, projectSettings, _callback);
        }

        private ProjectSettings buildBodyParams() {
            ProjectSettings projectSettings = new ProjectSettings();
            projectSettings.advanced(this.advanced);
            return projectSettings;
        }

        /**
         * Execute updateSettings request
         * @return ProjectSettings
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. Always includes the full advanced settings object. Returned even when the provided updates match the existing settings, but can also be returned when &#x60;oss: true&#x60; fails to set. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectSettings execute() throws ApiException {
            ProjectSettings projectSettings = buildBodyParams();
            ApiResponse<ProjectSettings> localVarResp = updateSettingsWithHttpInfo(provider, organization, project, projectSettings);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateSettings request with HTTP info returned
         * @return ApiResponse&lt;ProjectSettings&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. Always includes the full advanced settings object. Returned even when the provided updates match the existing settings, but can also be returned when &#x60;oss: true&#x60; fails to set. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectSettings> executeWithHttpInfo() throws ApiException {
            ProjectSettings projectSettings = buildBodyParams();
            return updateSettingsWithHttpInfo(provider, organization, project, projectSettings);
        }

        /**
         * Execute updateSettings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. Always includes the full advanced settings object. Returned even when the provided updates match the existing settings, but can also be returned when &#x60;oss: true&#x60; fails to set. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectSettings> _callback) throws ApiException {
            ProjectSettings projectSettings = buildBodyParams();
            return updateSettingsAsync(provider, organization, project, projectSettings, _callback);
        }
    }

    /**
     * 🧪 Update project settings
     * [__EXPERIMENTAL__] Updates one or more of the advanced settings for a CircleCI project.
     * @param provider The &#x60;provider&#x60; segment of a project or org slug, the first of the three. This may be a VCS. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60;. (required)
     * @param organization The &#x60;organization&#x60; segment of a project or org slug, the second of the three. For GitHub OAuth or Bitbucket projects, this is the organization name. For projects that use GitLab or GitHub App, use the organization ID (found in Organization Settings). (required)
     * @param project The &#x60;project&#x60; segment of a project slug, the third of the three. For GitHub OAuth or Bitbucket projects, this is the repository name. For projects that use GitLab or GitHub App, use the project ID (found in Project Settings). (required)
     * @param projectSettings The setting(s) to update, including one or more fields in the JSON object. Note that &#x60;oss: true&#x60; will only be set on projects whose underlying repositories are actually open source. (required)
     * @return UpdateSettingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. Always includes the full advanced settings object. Returned even when the provided updates match the existing settings, but can also be returned when &#x60;oss: true&#x60; fails to set. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSettingsRequestBuilder updateSettings(String provider, String organization, String project) throws IllegalArgumentException {
        if (provider == null) throw new IllegalArgumentException("\"provider\" is required but got null");
            

        if (organization == null) throw new IllegalArgumentException("\"organization\" is required but got null");
            

        if (project == null) throw new IllegalArgumentException("\"project\" is required but got null");
            

        return new UpdateSettingsRequestBuilder(provider, organization, project);
    }
}
