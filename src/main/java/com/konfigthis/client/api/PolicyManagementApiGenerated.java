/*
 * CircleCI API
 * This describes the resources that make up the CircleCI API v2.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BundleDiff;
import com.konfigthis.client.model.BundlePayload;
import com.konfigthis.client.model.Decision;
import com.konfigthis.client.model.DecisionLog;
import com.konfigthis.client.model.DecisionSettings;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.Policy;
import com.konfigthis.client.model.PolicyManagementEvaluateInputDataRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PolicyManagementApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PolicyManagementApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PolicyManagementApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createPolicyBundleForContextCall(String ownerID, String context, Boolean dry, BundlePayload bundlePayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bundlePayload;

        // create path and map variables
        String localVarPath = "/owner/{ownerID}/context/{context}/policy-bundle"
            .replace("{" + "ownerID" + "}", localVarApiClient.escapeString(ownerID.toString()))
            .replace("{" + "context" + "}", localVarApiClient.escapeString(context.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dry", dry));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPolicyBundleForContextValidateBeforeCall(String ownerID, String context, Boolean dry, BundlePayload bundlePayload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerID' is set
        if (ownerID == null) {
            throw new ApiException("Missing the required parameter 'ownerID' when calling createPolicyBundleForContext(Async)");
        }

        // verify the required parameter 'context' is set
        if (context == null) {
            throw new ApiException("Missing the required parameter 'context' when calling createPolicyBundleForContext(Async)");
        }

        return createPolicyBundleForContextCall(ownerID, context, dry, bundlePayload, _callback);

    }


    private ApiResponse<BundleDiff> createPolicyBundleForContextWithHttpInfo(String ownerID, String context, Boolean dry, BundlePayload bundlePayload) throws ApiException {
        okhttp3.Call localVarCall = createPolicyBundleForContextValidateBeforeCall(ownerID, context, dry, bundlePayload, null);
        Type localVarReturnType = new TypeToken<BundleDiff>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPolicyBundleForContextAsync(String ownerID, String context, Boolean dry, BundlePayload bundlePayload, final ApiCallback<BundleDiff> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPolicyBundleForContextValidateBeforeCall(ownerID, context, dry, bundlePayload, _callback);
        Type localVarReturnType = new TypeToken<BundleDiff>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreatePolicyBundleForContextRequestBuilder {
        private final String ownerID;
        private final String context;
        private Map<String, String> policies;
        private Boolean dry;

        private CreatePolicyBundleForContextRequestBuilder(String ownerID, String context) {
            this.ownerID = ownerID;
            this.context = context;
        }

        /**
         * Set policies
         * @param policies  (optional)
         * @return CreatePolicyBundleForContextRequestBuilder
         */
        public CreatePolicyBundleForContextRequestBuilder policies(Map<String, String> policies) {
            this.policies = policies;
            return this;
        }
        
        /**
         * Set dry
         * @param dry  (optional)
         * @return CreatePolicyBundleForContextRequestBuilder
         */
        public CreatePolicyBundleForContextRequestBuilder dry(Boolean dry) {
            this.dry = dry;
            return this;
        }
        
        /**
         * Build call for createPolicyBundleForContext
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Policy-Bundle diff successfully returned. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Policy-Bundle successfully created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BundlePayload bundlePayload = buildBodyParams();
            return createPolicyBundleForContextCall(ownerID, context, dry, bundlePayload, _callback);
        }

        private BundlePayload buildBodyParams() {
            BundlePayload bundlePayload = new BundlePayload();
            bundlePayload.policies(this.policies);
            return bundlePayload;
        }

        /**
         * Execute createPolicyBundleForContext request
         * @return BundleDiff
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Policy-Bundle diff successfully returned. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Policy-Bundle successfully created. </td><td>  -  </td></tr>
         </table>
         */
        public BundleDiff execute() throws ApiException {
            BundlePayload bundlePayload = buildBodyParams();
            ApiResponse<BundleDiff> localVarResp = createPolicyBundleForContextWithHttpInfo(ownerID, context, dry, bundlePayload);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createPolicyBundleForContext request with HTTP info returned
         * @return ApiResponse&lt;BundleDiff&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Policy-Bundle diff successfully returned. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Policy-Bundle successfully created. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BundleDiff> executeWithHttpInfo() throws ApiException {
            BundlePayload bundlePayload = buildBodyParams();
            return createPolicyBundleForContextWithHttpInfo(ownerID, context, dry, bundlePayload);
        }

        /**
         * Execute createPolicyBundleForContext request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Policy-Bundle diff successfully returned. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Policy-Bundle successfully created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BundleDiff> _callback) throws ApiException {
            BundlePayload bundlePayload = buildBodyParams();
            return createPolicyBundleForContextAsync(ownerID, context, dry, bundlePayload, _callback);
        }
    }

    /**
     * Creates policy bundle for the context
     * This endpoint replaces the current policy bundle with the provided policy bundle
     * @param ownerID  (required)
     * @param context  (required)
     * @return CreatePolicyBundleForContextRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Policy-Bundle diff successfully returned. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Policy-Bundle successfully created. </td><td>  -  </td></tr>
     </table>
     */
    public CreatePolicyBundleForContextRequestBuilder createPolicyBundleForContext(String ownerID, String context) throws IllegalArgumentException {
        if (ownerID == null) throw new IllegalArgumentException("\"ownerID\" is required but got null");
            

        if (context == null) throw new IllegalArgumentException("\"context\" is required but got null");
            

        return new CreatePolicyBundleForContextRequestBuilder(ownerID, context);
    }
    private okhttp3.Call evaluateInputDataCall(String ownerID, String context, PolicyManagementEvaluateInputDataRequest policyManagementEvaluateInputDataRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = policyManagementEvaluateInputDataRequest;

        // create path and map variables
        String localVarPath = "/owner/{ownerID}/context/{context}/decision"
            .replace("{" + "ownerID" + "}", localVarApiClient.escapeString(ownerID.toString()))
            .replace("{" + "context" + "}", localVarApiClient.escapeString(context.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call evaluateInputDataValidateBeforeCall(String ownerID, String context, PolicyManagementEvaluateInputDataRequest policyManagementEvaluateInputDataRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerID' is set
        if (ownerID == null) {
            throw new ApiException("Missing the required parameter 'ownerID' when calling evaluateInputData(Async)");
        }

        // verify the required parameter 'context' is set
        if (context == null) {
            throw new ApiException("Missing the required parameter 'context' when calling evaluateInputData(Async)");
        }

        return evaluateInputDataCall(ownerID, context, policyManagementEvaluateInputDataRequest, _callback);

    }


    private ApiResponse<Decision> evaluateInputDataWithHttpInfo(String ownerID, String context, PolicyManagementEvaluateInputDataRequest policyManagementEvaluateInputDataRequest) throws ApiException {
        okhttp3.Call localVarCall = evaluateInputDataValidateBeforeCall(ownerID, context, policyManagementEvaluateInputDataRequest, null);
        Type localVarReturnType = new TypeToken<Decision>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call evaluateInputDataAsync(String ownerID, String context, PolicyManagementEvaluateInputDataRequest policyManagementEvaluateInputDataRequest, final ApiCallback<Decision> _callback) throws ApiException {

        okhttp3.Call localVarCall = evaluateInputDataValidateBeforeCall(ownerID, context, policyManagementEvaluateInputDataRequest, _callback);
        Type localVarReturnType = new TypeToken<Decision>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EvaluateInputDataRequestBuilder {
        private final String input;
        private final String ownerID;
        private final String context;
        private Object metadata;

        private EvaluateInputDataRequestBuilder(String input, String ownerID, String context) {
            this.input = input;
            this.ownerID = ownerID;
            this.context = context;
        }

        /**
         * Set metadata
         * @param metadata  (optional)
         * @return EvaluateInputDataRequestBuilder
         */
        public EvaluateInputDataRequestBuilder metadata(Object metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Build call for evaluateInputData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Decision rendered by applying the policy against the provided data. Response will be modeled by the data and rego processed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PolicyManagementEvaluateInputDataRequest policyManagementEvaluateInputDataRequest = buildBodyParams();
            return evaluateInputDataCall(ownerID, context, policyManagementEvaluateInputDataRequest, _callback);
        }

        private PolicyManagementEvaluateInputDataRequest buildBodyParams() {
            PolicyManagementEvaluateInputDataRequest policyManagementEvaluateInputDataRequest = new PolicyManagementEvaluateInputDataRequest();
            policyManagementEvaluateInputDataRequest.input(this.input);
            policyManagementEvaluateInputDataRequest.metadata(this.metadata);
            return policyManagementEvaluateInputDataRequest;
        }

        /**
         * Execute evaluateInputData request
         * @return Decision
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Decision rendered by applying the policy against the provided data. Response will be modeled by the data and rego processed. </td><td>  -  </td></tr>
         </table>
         */
        public Decision execute() throws ApiException {
            PolicyManagementEvaluateInputDataRequest policyManagementEvaluateInputDataRequest = buildBodyParams();
            ApiResponse<Decision> localVarResp = evaluateInputDataWithHttpInfo(ownerID, context, policyManagementEvaluateInputDataRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute evaluateInputData request with HTTP info returned
         * @return ApiResponse&lt;Decision&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Decision rendered by applying the policy against the provided data. Response will be modeled by the data and rego processed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Decision> executeWithHttpInfo() throws ApiException {
            PolicyManagementEvaluateInputDataRequest policyManagementEvaluateInputDataRequest = buildBodyParams();
            return evaluateInputDataWithHttpInfo(ownerID, context, policyManagementEvaluateInputDataRequest);
        }

        /**
         * Execute evaluateInputData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Decision rendered by applying the policy against the provided data. Response will be modeled by the data and rego processed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Decision> _callback) throws ApiException {
            PolicyManagementEvaluateInputDataRequest policyManagementEvaluateInputDataRequest = buildBodyParams();
            return evaluateInputDataAsync(ownerID, context, policyManagementEvaluateInputDataRequest, _callback);
        }
    }

    /**
     * Makes a decision
     * This endpoint will evaluate input data (config+metadata) against owner&#39;s stored policies and return a decision.
     * @param ownerID  (required)
     * @param context  (required)
     * @return EvaluateInputDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Decision rendered by applying the policy against the provided data. Response will be modeled by the data and rego processed. </td><td>  -  </td></tr>
     </table>
     */
    public EvaluateInputDataRequestBuilder evaluateInputData(String input, String ownerID, String context) throws IllegalArgumentException {
        if (input == null) throw new IllegalArgumentException("\"input\" is required but got null");
            

        if (ownerID == null) throw new IllegalArgumentException("\"ownerID\" is required but got null");
            

        if (context == null) throw new IllegalArgumentException("\"context\" is required but got null");
            

        return new EvaluateInputDataRequestBuilder(input, ownerID, context);
    }
    private okhttp3.Call getDecisionAuditLogByGivenIdCall(String ownerID, String context, String decisionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/owner/{ownerID}/context/{context}/decision/{decisionID}"
            .replace("{" + "ownerID" + "}", localVarApiClient.escapeString(ownerID.toString()))
            .replace("{" + "context" + "}", localVarApiClient.escapeString(context.toString()))
            .replace("{" + "decisionID" + "}", localVarApiClient.escapeString(decisionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDecisionAuditLogByGivenIdValidateBeforeCall(String ownerID, String context, String decisionID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerID' is set
        if (ownerID == null) {
            throw new ApiException("Missing the required parameter 'ownerID' when calling getDecisionAuditLogByGivenId(Async)");
        }

        // verify the required parameter 'context' is set
        if (context == null) {
            throw new ApiException("Missing the required parameter 'context' when calling getDecisionAuditLogByGivenId(Async)");
        }

        // verify the required parameter 'decisionID' is set
        if (decisionID == null) {
            throw new ApiException("Missing the required parameter 'decisionID' when calling getDecisionAuditLogByGivenId(Async)");
        }

        return getDecisionAuditLogByGivenIdCall(ownerID, context, decisionID, _callback);

    }


    private ApiResponse<DecisionLog> getDecisionAuditLogByGivenIdWithHttpInfo(String ownerID, String context, String decisionID) throws ApiException {
        okhttp3.Call localVarCall = getDecisionAuditLogByGivenIdValidateBeforeCall(ownerID, context, decisionID, null);
        Type localVarReturnType = new TypeToken<DecisionLog>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDecisionAuditLogByGivenIdAsync(String ownerID, String context, String decisionID, final ApiCallback<DecisionLog> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDecisionAuditLogByGivenIdValidateBeforeCall(ownerID, context, decisionID, _callback);
        Type localVarReturnType = new TypeToken<DecisionLog>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDecisionAuditLogByGivenIdRequestBuilder {
        private final String ownerID;
        private final String context;
        private final String decisionID;

        private GetDecisionAuditLogByGivenIdRequestBuilder(String ownerID, String context, String decisionID) {
            this.ownerID = ownerID;
            this.context = context;
            this.decisionID = decisionID;
        }

        /**
         * Build call for getDecisionAuditLogByGivenId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Decision log successfully retrieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDecisionAuditLogByGivenIdCall(ownerID, context, decisionID, _callback);
        }


        /**
         * Execute getDecisionAuditLogByGivenId request
         * @return DecisionLog
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Decision log successfully retrieved. </td><td>  -  </td></tr>
         </table>
         */
        public DecisionLog execute() throws ApiException {
            ApiResponse<DecisionLog> localVarResp = getDecisionAuditLogByGivenIdWithHttpInfo(ownerID, context, decisionID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDecisionAuditLogByGivenId request with HTTP info returned
         * @return ApiResponse&lt;DecisionLog&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Decision log successfully retrieved. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DecisionLog> executeWithHttpInfo() throws ApiException {
            return getDecisionAuditLogByGivenIdWithHttpInfo(ownerID, context, decisionID);
        }

        /**
         * Execute getDecisionAuditLogByGivenId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Decision log successfully retrieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DecisionLog> _callback) throws ApiException {
            return getDecisionAuditLogByGivenIdAsync(ownerID, context, decisionID, _callback);
        }
    }

    /**
     * Retrieves the owner&#39;s decision audit log by given decisionID
     * This endpoint will retrieve a decision for a given decision log ID
     * @param ownerID  (required)
     * @param context  (required)
     * @param decisionID  (required)
     * @return GetDecisionAuditLogByGivenIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Decision log successfully retrieved. </td><td>  -  </td></tr>
     </table>
     */
    public GetDecisionAuditLogByGivenIdRequestBuilder getDecisionAuditLogByGivenId(String ownerID, String context, String decisionID) throws IllegalArgumentException {
        if (ownerID == null) throw new IllegalArgumentException("\"ownerID\" is required but got null");
            

        if (context == null) throw new IllegalArgumentException("\"context\" is required but got null");
            

        if (decisionID == null) throw new IllegalArgumentException("\"decisionID\" is required but got null");
            

        return new GetDecisionAuditLogByGivenIdRequestBuilder(ownerID, context, decisionID);
    }
    private okhttp3.Call getDecisionAuditLogsCall(String ownerID, String context, String status, OffsetDateTime after, OffsetDateTime before, String branch, String projectId, String buildNumber, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/owner/{ownerID}/context/{context}/decision"
            .replace("{" + "ownerID" + "}", localVarApiClient.escapeString(ownerID.toString()))
            .replace("{" + "context" + "}", localVarApiClient.escapeString(context.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (branch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("branch", branch));
        }

        if (projectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("project_id", projectId));
        }

        if (buildNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("build_number", buildNumber));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDecisionAuditLogsValidateBeforeCall(String ownerID, String context, String status, OffsetDateTime after, OffsetDateTime before, String branch, String projectId, String buildNumber, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerID' is set
        if (ownerID == null) {
            throw new ApiException("Missing the required parameter 'ownerID' when calling getDecisionAuditLogs(Async)");
        }

        // verify the required parameter 'context' is set
        if (context == null) {
            throw new ApiException("Missing the required parameter 'context' when calling getDecisionAuditLogs(Async)");
        }

        return getDecisionAuditLogsCall(ownerID, context, status, after, before, branch, projectId, buildNumber, offset, _callback);

    }


    private ApiResponse<List<DecisionLog>> getDecisionAuditLogsWithHttpInfo(String ownerID, String context, String status, OffsetDateTime after, OffsetDateTime before, String branch, String projectId, String buildNumber, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getDecisionAuditLogsValidateBeforeCall(ownerID, context, status, after, before, branch, projectId, buildNumber, offset, null);
        Type localVarReturnType = new TypeToken<List<DecisionLog>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDecisionAuditLogsAsync(String ownerID, String context, String status, OffsetDateTime after, OffsetDateTime before, String branch, String projectId, String buildNumber, Integer offset, final ApiCallback<List<DecisionLog>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDecisionAuditLogsValidateBeforeCall(ownerID, context, status, after, before, branch, projectId, buildNumber, offset, _callback);
        Type localVarReturnType = new TypeToken<List<DecisionLog>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDecisionAuditLogsRequestBuilder {
        private final String ownerID;
        private final String context;
        private String status;
        private OffsetDateTime after;
        private OffsetDateTime before;
        private String branch;
        private String projectId;
        private String buildNumber;
        private Integer offset;

        private GetDecisionAuditLogsRequestBuilder(String ownerID, String context) {
            this.ownerID = ownerID;
            this.context = context;
        }

        /**
         * Set status
         * @param status Return decisions matching this decision status. (optional)
         * @return GetDecisionAuditLogsRequestBuilder
         */
        public GetDecisionAuditLogsRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set after
         * @param after Return decisions made after this date. (optional)
         * @return GetDecisionAuditLogsRequestBuilder
         */
        public GetDecisionAuditLogsRequestBuilder after(OffsetDateTime after) {
            this.after = after;
            return this;
        }
        
        /**
         * Set before
         * @param before Return decisions made before this date. (optional)
         * @return GetDecisionAuditLogsRequestBuilder
         */
        public GetDecisionAuditLogsRequestBuilder before(OffsetDateTime before) {
            this.before = before;
            return this;
        }
        
        /**
         * Set branch
         * @param branch Return decisions made on this branch. (optional)
         * @return GetDecisionAuditLogsRequestBuilder
         */
        public GetDecisionAuditLogsRequestBuilder branch(String branch) {
            this.branch = branch;
            return this;
        }
        
        /**
         * Set projectId
         * @param projectId Return decisions made for this project. (optional)
         * @return GetDecisionAuditLogsRequestBuilder
         */
        public GetDecisionAuditLogsRequestBuilder projectId(String projectId) {
            this.projectId = projectId;
            return this;
        }
        
        /**
         * Set buildNumber
         * @param buildNumber Return decisions made for this build number. (optional)
         * @return GetDecisionAuditLogsRequestBuilder
         */
        public GetDecisionAuditLogsRequestBuilder buildNumber(String buildNumber) {
            this.buildNumber = buildNumber;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Sets the offset when retrieving the decisions, for paging. (optional)
         * @return GetDecisionAuditLogsRequestBuilder
         */
        public GetDecisionAuditLogsRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getDecisionAuditLogs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Decision logs successfully retrieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDecisionAuditLogsCall(ownerID, context, status, after, before, branch, projectId, buildNumber, offset, _callback);
        }


        /**
         * Execute getDecisionAuditLogs request
         * @return List&lt;DecisionLog&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Decision logs successfully retrieved. </td><td>  -  </td></tr>
         </table>
         */
        public List<DecisionLog> execute() throws ApiException {
            ApiResponse<List<DecisionLog>> localVarResp = getDecisionAuditLogsWithHttpInfo(ownerID, context, status, after, before, branch, projectId, buildNumber, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDecisionAuditLogs request with HTTP info returned
         * @return ApiResponse&lt;List&lt;DecisionLog&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Decision logs successfully retrieved. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<DecisionLog>> executeWithHttpInfo() throws ApiException {
            return getDecisionAuditLogsWithHttpInfo(ownerID, context, status, after, before, branch, projectId, buildNumber, offset);
        }

        /**
         * Execute getDecisionAuditLogs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Decision logs successfully retrieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<DecisionLog>> _callback) throws ApiException {
            return getDecisionAuditLogsAsync(ownerID, context, status, after, before, branch, projectId, buildNumber, offset, _callback);
        }
    }

    /**
     * Retrieves the owner&#39;s decision audit logs.
     * This endpoint will return a list of decision audit logs that were made using this owner&#39;s policies.
     * @param ownerID  (required)
     * @param context  (required)
     * @return GetDecisionAuditLogsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Decision logs successfully retrieved. </td><td>  -  </td></tr>
     </table>
     */
    public GetDecisionAuditLogsRequestBuilder getDecisionAuditLogs(String ownerID, String context) throws IllegalArgumentException {
        if (ownerID == null) throw new IllegalArgumentException("\"ownerID\" is required but got null");
            

        if (context == null) throw new IllegalArgumentException("\"context\" is required but got null");
            

        return new GetDecisionAuditLogsRequestBuilder(ownerID, context);
    }
    private okhttp3.Call getDecisionSettingsCall(String ownerID, String context, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/owner/{ownerID}/context/{context}/decision/settings"
            .replace("{" + "ownerID" + "}", localVarApiClient.escapeString(ownerID.toString()))
            .replace("{" + "context" + "}", localVarApiClient.escapeString(context.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDecisionSettingsValidateBeforeCall(String ownerID, String context, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerID' is set
        if (ownerID == null) {
            throw new ApiException("Missing the required parameter 'ownerID' when calling getDecisionSettings(Async)");
        }

        // verify the required parameter 'context' is set
        if (context == null) {
            throw new ApiException("Missing the required parameter 'context' when calling getDecisionSettings(Async)");
        }

        return getDecisionSettingsCall(ownerID, context, _callback);

    }


    private ApiResponse<DecisionSettings> getDecisionSettingsWithHttpInfo(String ownerID, String context) throws ApiException {
        okhttp3.Call localVarCall = getDecisionSettingsValidateBeforeCall(ownerID, context, null);
        Type localVarReturnType = new TypeToken<DecisionSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDecisionSettingsAsync(String ownerID, String context, final ApiCallback<DecisionSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDecisionSettingsValidateBeforeCall(ownerID, context, _callback);
        Type localVarReturnType = new TypeToken<DecisionSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDecisionSettingsRequestBuilder {
        private final String ownerID;
        private final String context;

        private GetDecisionSettingsRequestBuilder(String ownerID, String context) {
            this.ownerID = ownerID;
            this.context = context;
        }

        /**
         * Build call for getDecisionSettings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Decision settings successfully retrieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDecisionSettingsCall(ownerID, context, _callback);
        }


        /**
         * Execute getDecisionSettings request
         * @return DecisionSettings
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Decision settings successfully retrieved. </td><td>  -  </td></tr>
         </table>
         */
        public DecisionSettings execute() throws ApiException {
            ApiResponse<DecisionSettings> localVarResp = getDecisionSettingsWithHttpInfo(ownerID, context);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDecisionSettings request with HTTP info returned
         * @return ApiResponse&lt;DecisionSettings&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Decision settings successfully retrieved. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DecisionSettings> executeWithHttpInfo() throws ApiException {
            return getDecisionSettingsWithHttpInfo(ownerID, context);
        }

        /**
         * Execute getDecisionSettings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Decision settings successfully retrieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DecisionSettings> _callback) throws ApiException {
            return getDecisionSettingsAsync(ownerID, context, _callback);
        }
    }

    /**
     * Get the decision settings
     * This endpoint retrieves the current decision settings (eg enable/disable policy evaluation)
     * @param ownerID  (required)
     * @param context  (required)
     * @return GetDecisionSettingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Decision settings successfully retrieved. </td><td>  -  </td></tr>
     </table>
     */
    public GetDecisionSettingsRequestBuilder getDecisionSettings(String ownerID, String context) throws IllegalArgumentException {
        if (ownerID == null) throw new IllegalArgumentException("\"ownerID\" is required but got null");
            

        if (context == null) throw new IllegalArgumentException("\"context\" is required but got null");
            

        return new GetDecisionSettingsRequestBuilder(ownerID, context);
    }
    private okhttp3.Call getDocumentCall(String ownerID, String context, String policyName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/owner/{ownerID}/context/{context}/policy-bundle/{policyName}"
            .replace("{" + "ownerID" + "}", localVarApiClient.escapeString(ownerID.toString()))
            .replace("{" + "context" + "}", localVarApiClient.escapeString(context.toString()))
            .replace("{" + "policyName" + "}", localVarApiClient.escapeString(policyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDocumentValidateBeforeCall(String ownerID, String context, String policyName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerID' is set
        if (ownerID == null) {
            throw new ApiException("Missing the required parameter 'ownerID' when calling getDocument(Async)");
        }

        // verify the required parameter 'context' is set
        if (context == null) {
            throw new ApiException("Missing the required parameter 'context' when calling getDocument(Async)");
        }

        // verify the required parameter 'policyName' is set
        if (policyName == null) {
            throw new ApiException("Missing the required parameter 'policyName' when calling getDocument(Async)");
        }

        return getDocumentCall(ownerID, context, policyName, _callback);

    }


    private ApiResponse<Policy> getDocumentWithHttpInfo(String ownerID, String context, String policyName) throws ApiException {
        okhttp3.Call localVarCall = getDocumentValidateBeforeCall(ownerID, context, policyName, null);
        Type localVarReturnType = new TypeToken<Policy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDocumentAsync(String ownerID, String context, String policyName, final ApiCallback<Policy> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDocumentValidateBeforeCall(ownerID, context, policyName, _callback);
        Type localVarReturnType = new TypeToken<Policy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDocumentRequestBuilder {
        private final String ownerID;
        private final String context;
        private final String policyName;

        private GetDocumentRequestBuilder(String ownerID, String context, String policyName) {
            this.ownerID = ownerID;
            this.context = context;
            this.policyName = policyName;
        }

        /**
         * Build call for getDocument
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Policy retrieved successfully. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDocumentCall(ownerID, context, policyName, _callback);
        }


        /**
         * Execute getDocument request
         * @return Policy
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Policy retrieved successfully. </td><td>  -  </td></tr>
         </table>
         */
        public Policy execute() throws ApiException {
            ApiResponse<Policy> localVarResp = getDocumentWithHttpInfo(ownerID, context, policyName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDocument request with HTTP info returned
         * @return ApiResponse&lt;Policy&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Policy retrieved successfully. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Policy> executeWithHttpInfo() throws ApiException {
            return getDocumentWithHttpInfo(ownerID, context, policyName);
        }

        /**
         * Execute getDocument request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Policy retrieved successfully. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Policy> _callback) throws ApiException {
            return getDocumentAsync(ownerID, context, policyName, _callback);
        }
    }

    /**
     * Retrieves a policy document
     * This endpoint will retrieve a policy document.
     * @param ownerID  (required)
     * @param context  (required)
     * @param policyName the policy name set by the rego policy_name rule (required)
     * @return GetDocumentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Policy retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public GetDocumentRequestBuilder getDocument(String ownerID, String context, String policyName) throws IllegalArgumentException {
        if (ownerID == null) throw new IllegalArgumentException("\"ownerID\" is required but got null");
            

        if (context == null) throw new IllegalArgumentException("\"context\" is required but got null");
            

        if (policyName == null) throw new IllegalArgumentException("\"policyName\" is required but got null");
            

        return new GetDocumentRequestBuilder(ownerID, context, policyName);
    }
    private okhttp3.Call getPolicyBundleCall(String ownerID, String context, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/owner/{ownerID}/context/{context}/policy-bundle"
            .replace("{" + "ownerID" + "}", localVarApiClient.escapeString(ownerID.toString()))
            .replace("{" + "context" + "}", localVarApiClient.escapeString(context.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPolicyBundleValidateBeforeCall(String ownerID, String context, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerID' is set
        if (ownerID == null) {
            throw new ApiException("Missing the required parameter 'ownerID' when calling getPolicyBundle(Async)");
        }

        // verify the required parameter 'context' is set
        if (context == null) {
            throw new ApiException("Missing the required parameter 'context' when calling getPolicyBundle(Async)");
        }

        return getPolicyBundleCall(ownerID, context, _callback);

    }


    private ApiResponse<Map<String, List<Policy>>> getPolicyBundleWithHttpInfo(String ownerID, String context) throws ApiException {
        okhttp3.Call localVarCall = getPolicyBundleValidateBeforeCall(ownerID, context, null);
        Type localVarReturnType = new TypeToken<Map<String, List<Policy>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPolicyBundleAsync(String ownerID, String context, final ApiCallback<Map<String, List<Policy>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPolicyBundleValidateBeforeCall(ownerID, context, _callback);
        Type localVarReturnType = new TypeToken<Map<String, List<Policy>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPolicyBundleRequestBuilder {
        private final String ownerID;
        private final String context;

        private GetPolicyBundleRequestBuilder(String ownerID, String context) {
            this.ownerID = ownerID;
            this.context = context;
        }

        /**
         * Build call for getPolicyBundle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Policy-Bundle retrieved successfully. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPolicyBundleCall(ownerID, context, _callback);
        }


        /**
         * Execute getPolicyBundle request
         * @return Map&lt;String, List&lt;Policy&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Policy-Bundle retrieved successfully. </td><td>  -  </td></tr>
         </table>
         */
        public Map<String, List<Policy>> execute() throws ApiException {
            ApiResponse<Map<String, List<Policy>>> localVarResp = getPolicyBundleWithHttpInfo(ownerID, context);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPolicyBundle request with HTTP info returned
         * @return ApiResponse&lt;Map&lt;String, List&lt;Policy&gt;&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Policy-Bundle retrieved successfully. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Map<String, List<Policy>>> executeWithHttpInfo() throws ApiException {
            return getPolicyBundleWithHttpInfo(ownerID, context);
        }

        /**
         * Execute getPolicyBundle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Policy-Bundle retrieved successfully. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Map<String, List<Policy>>> _callback) throws ApiException {
            return getPolicyBundleAsync(ownerID, context, _callback);
        }
    }

    /**
     * Retrieves Policy Bundle
     * This endpoint will retrieve a policy bundle
     * @param ownerID  (required)
     * @param context  (required)
     * @return GetPolicyBundleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Policy-Bundle retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public GetPolicyBundleRequestBuilder getPolicyBundle(String ownerID, String context) throws IllegalArgumentException {
        if (ownerID == null) throw new IllegalArgumentException("\"ownerID\" is required but got null");
            

        if (context == null) throw new IllegalArgumentException("\"context\" is required but got null");
            

        return new GetPolicyBundleRequestBuilder(ownerID, context);
    }
    private okhttp3.Call getPolicyBundleForDecisionCall(String ownerID, String context, String decisionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/owner/{ownerID}/context/{context}/decision/{decisionID}/policy-bundle"
            .replace("{" + "ownerID" + "}", localVarApiClient.escapeString(ownerID.toString()))
            .replace("{" + "context" + "}", localVarApiClient.escapeString(context.toString()))
            .replace("{" + "decisionID" + "}", localVarApiClient.escapeString(decisionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPolicyBundleForDecisionValidateBeforeCall(String ownerID, String context, String decisionID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerID' is set
        if (ownerID == null) {
            throw new ApiException("Missing the required parameter 'ownerID' when calling getPolicyBundleForDecision(Async)");
        }

        // verify the required parameter 'context' is set
        if (context == null) {
            throw new ApiException("Missing the required parameter 'context' when calling getPolicyBundleForDecision(Async)");
        }

        // verify the required parameter 'decisionID' is set
        if (decisionID == null) {
            throw new ApiException("Missing the required parameter 'decisionID' when calling getPolicyBundleForDecision(Async)");
        }

        return getPolicyBundleForDecisionCall(ownerID, context, decisionID, _callback);

    }


    private ApiResponse<Map<String, List<Policy>>> getPolicyBundleForDecisionWithHttpInfo(String ownerID, String context, String decisionID) throws ApiException {
        okhttp3.Call localVarCall = getPolicyBundleForDecisionValidateBeforeCall(ownerID, context, decisionID, null);
        Type localVarReturnType = new TypeToken<Map<String, List<Policy>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPolicyBundleForDecisionAsync(String ownerID, String context, String decisionID, final ApiCallback<Map<String, List<Policy>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPolicyBundleForDecisionValidateBeforeCall(ownerID, context, decisionID, _callback);
        Type localVarReturnType = new TypeToken<Map<String, List<Policy>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPolicyBundleForDecisionRequestBuilder {
        private final String ownerID;
        private final String context;
        private final String decisionID;

        private GetPolicyBundleForDecisionRequestBuilder(String ownerID, String context, String decisionID) {
            this.ownerID = ownerID;
            this.context = context;
            this.decisionID = decisionID;
        }

        /**
         * Build call for getPolicyBundleForDecision
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Policy-Bundle retrieved successfully for given decision log ID </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPolicyBundleForDecisionCall(ownerID, context, decisionID, _callback);
        }


        /**
         * Execute getPolicyBundleForDecision request
         * @return Map&lt;String, List&lt;Policy&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Policy-Bundle retrieved successfully for given decision log ID </td><td>  -  </td></tr>
         </table>
         */
        public Map<String, List<Policy>> execute() throws ApiException {
            ApiResponse<Map<String, List<Policy>>> localVarResp = getPolicyBundleForDecisionWithHttpInfo(ownerID, context, decisionID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPolicyBundleForDecision request with HTTP info returned
         * @return ApiResponse&lt;Map&lt;String, List&lt;Policy&gt;&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Policy-Bundle retrieved successfully for given decision log ID </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Map<String, List<Policy>>> executeWithHttpInfo() throws ApiException {
            return getPolicyBundleForDecisionWithHttpInfo(ownerID, context, decisionID);
        }

        /**
         * Execute getPolicyBundleForDecision request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Policy-Bundle retrieved successfully for given decision log ID </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Map<String, List<Policy>>> _callback) throws ApiException {
            return getPolicyBundleForDecisionAsync(ownerID, context, decisionID, _callback);
        }
    }

    /**
     * Retrieves Policy Bundle for a given decision log ID
     * This endpoint will retrieve a policy bundle for a given decision log ID
     * @param ownerID  (required)
     * @param context  (required)
     * @param decisionID  (required)
     * @return GetPolicyBundleForDecisionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Policy-Bundle retrieved successfully for given decision log ID </td><td>  -  </td></tr>
     </table>
     */
    public GetPolicyBundleForDecisionRequestBuilder getPolicyBundleForDecision(String ownerID, String context, String decisionID) throws IllegalArgumentException {
        if (ownerID == null) throw new IllegalArgumentException("\"ownerID\" is required but got null");
            

        if (context == null) throw new IllegalArgumentException("\"context\" is required but got null");
            

        if (decisionID == null) throw new IllegalArgumentException("\"decisionID\" is required but got null");
            

        return new GetPolicyBundleForDecisionRequestBuilder(ownerID, context, decisionID);
    }
    private okhttp3.Call modifyDecisionSettingsCall(String ownerID, String context, DecisionSettings decisionSettings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = decisionSettings;

        // create path and map variables
        String localVarPath = "/owner/{ownerID}/context/{context}/decision/settings"
            .replace("{" + "ownerID" + "}", localVarApiClient.escapeString(ownerID.toString()))
            .replace("{" + "context" + "}", localVarApiClient.escapeString(context.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifyDecisionSettingsValidateBeforeCall(String ownerID, String context, DecisionSettings decisionSettings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerID' is set
        if (ownerID == null) {
            throw new ApiException("Missing the required parameter 'ownerID' when calling modifyDecisionSettings(Async)");
        }

        // verify the required parameter 'context' is set
        if (context == null) {
            throw new ApiException("Missing the required parameter 'context' when calling modifyDecisionSettings(Async)");
        }

        return modifyDecisionSettingsCall(ownerID, context, decisionSettings, _callback);

    }


    private ApiResponse<DecisionSettings> modifyDecisionSettingsWithHttpInfo(String ownerID, String context, DecisionSettings decisionSettings) throws ApiException {
        okhttp3.Call localVarCall = modifyDecisionSettingsValidateBeforeCall(ownerID, context, decisionSettings, null);
        Type localVarReturnType = new TypeToken<DecisionSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call modifyDecisionSettingsAsync(String ownerID, String context, DecisionSettings decisionSettings, final ApiCallback<DecisionSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifyDecisionSettingsValidateBeforeCall(ownerID, context, decisionSettings, _callback);
        Type localVarReturnType = new TypeToken<DecisionSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ModifyDecisionSettingsRequestBuilder {
        private final String ownerID;
        private final String context;
        private Boolean enabled;

        private ModifyDecisionSettingsRequestBuilder(String ownerID, String context) {
            this.ownerID = ownerID;
            this.context = context;
        }

        /**
         * Set enabled
         * @param enabled  (optional)
         * @return ModifyDecisionSettingsRequestBuilder
         */
        public ModifyDecisionSettingsRequestBuilder enabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
        }
        
        /**
         * Build call for modifyDecisionSettings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Decision settings successfully set. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DecisionSettings decisionSettings = buildBodyParams();
            return modifyDecisionSettingsCall(ownerID, context, decisionSettings, _callback);
        }

        private DecisionSettings buildBodyParams() {
            DecisionSettings decisionSettings = new DecisionSettings();
            decisionSettings.enabled(this.enabled);
            return decisionSettings;
        }

        /**
         * Execute modifyDecisionSettings request
         * @return DecisionSettings
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Decision settings successfully set. </td><td>  -  </td></tr>
         </table>
         */
        public DecisionSettings execute() throws ApiException {
            DecisionSettings decisionSettings = buildBodyParams();
            ApiResponse<DecisionSettings> localVarResp = modifyDecisionSettingsWithHttpInfo(ownerID, context, decisionSettings);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute modifyDecisionSettings request with HTTP info returned
         * @return ApiResponse&lt;DecisionSettings&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Decision settings successfully set. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DecisionSettings> executeWithHttpInfo() throws ApiException {
            DecisionSettings decisionSettings = buildBodyParams();
            return modifyDecisionSettingsWithHttpInfo(ownerID, context, decisionSettings);
        }

        /**
         * Execute modifyDecisionSettings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Decision settings successfully set. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DecisionSettings> _callback) throws ApiException {
            DecisionSettings decisionSettings = buildBodyParams();
            return modifyDecisionSettingsAsync(ownerID, context, decisionSettings, _callback);
        }
    }

    /**
     * Set the decision settings
     * This endpoint allows modifying decision settings (eg enable/disable policy evaluation)
     * @param ownerID  (required)
     * @param context  (required)
     * @return ModifyDecisionSettingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Decision settings successfully set. </td><td>  -  </td></tr>
     </table>
     */
    public ModifyDecisionSettingsRequestBuilder modifyDecisionSettings(String ownerID, String context) throws IllegalArgumentException {
        if (ownerID == null) throw new IllegalArgumentException("\"ownerID\" is required but got null");
            

        if (context == null) throw new IllegalArgumentException("\"context\" is required but got null");
            

        return new ModifyDecisionSettingsRequestBuilder(ownerID, context);
    }
}
