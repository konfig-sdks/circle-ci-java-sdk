/*
 * CircleCI API
 * This describes the resources that make up the CircleCI API v2.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ContextCreateNewContextRequest;
import com.konfigthis.client.model.ContextCreateNewContextResponse;
import com.konfigthis.client.model.ContextCreateNewContextdefaultResponse;
import com.konfigthis.client.model.ContextCreateRestrictionRequest;
import com.konfigthis.client.model.ContextGetInformationResponse;
import com.konfigthis.client.model.ContextGetInformationdefaultResponse;
import com.konfigthis.client.model.ContextListEnvironmentVariablesResponse;
import com.konfigthis.client.model.ContextListEnvironmentVariablesdefaultResponse;
import com.konfigthis.client.model.ContextListOwnerContextsResponse;
import com.konfigthis.client.model.ContextListOwnerContextsdefaultResponse;
import com.konfigthis.client.model.ContextProjectRestrictionsList;
import com.konfigthis.client.model.ContextRemoveContextResponse;
import com.konfigthis.client.model.ContextRemoveContextdefaultResponse;
import com.konfigthis.client.model.ContextRemoveEnvironmentVariableResponse;
import com.konfigthis.client.model.ContextRemoveEnvironmentVariabledefaultResponse;
import com.konfigthis.client.model.ContextUpdateEnvironmentVariableRequest;
import com.konfigthis.client.model.ContextUpdateEnvironmentVariableResponse;
import com.konfigthis.client.model.ContextUpdateEnvironmentVariabledefaultResponse;
import com.konfigthis.client.model.RestrictionCreated;
import com.konfigthis.client.model.RestrictionDeleted;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ContextApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ContextApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ContextApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewContextCall(ContextCreateNewContextRequest contextCreateNewContextRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contextCreateNewContextRequest;

        // create path and map variables
        String localVarPath = "/context";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewContextValidateBeforeCall(ContextCreateNewContextRequest contextCreateNewContextRequest, final ApiCallback _callback) throws ApiException {
        return createNewContextCall(contextCreateNewContextRequest, _callback);

    }


    private ApiResponse<ContextCreateNewContextResponse> createNewContextWithHttpInfo(ContextCreateNewContextRequest contextCreateNewContextRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewContextValidateBeforeCall(contextCreateNewContextRequest, null);
        Type localVarReturnType = new TypeToken<ContextCreateNewContextResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewContextAsync(ContextCreateNewContextRequest contextCreateNewContextRequest, final ApiCallback<ContextCreateNewContextResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewContextValidateBeforeCall(contextCreateNewContextRequest, _callback);
        Type localVarReturnType = new TypeToken<ContextCreateNewContextResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewContextRequestBuilder {
        private final String name;
        private final Object owner;

        private CreateNewContextRequestBuilder(String name, Object owner) {
            this.name = name;
            this.owner = owner;
        }

        /**
         * Build call for createNewContext
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The new context </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ContextCreateNewContextRequest contextCreateNewContextRequest = buildBodyParams();
            return createNewContextCall(contextCreateNewContextRequest, _callback);
        }

        private ContextCreateNewContextRequest buildBodyParams() {
            ContextCreateNewContextRequest contextCreateNewContextRequest = new ContextCreateNewContextRequest();
            contextCreateNewContextRequest.name(this.name);
            contextCreateNewContextRequest.owner(this.owner);
            return contextCreateNewContextRequest;
        }

        /**
         * Execute createNewContext request
         * @return ContextCreateNewContextResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The new context </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ContextCreateNewContextResponse execute() throws ApiException {
            ContextCreateNewContextRequest contextCreateNewContextRequest = buildBodyParams();
            ApiResponse<ContextCreateNewContextResponse> localVarResp = createNewContextWithHttpInfo(contextCreateNewContextRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewContext request with HTTP info returned
         * @return ApiResponse&lt;ContextCreateNewContextResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The new context </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContextCreateNewContextResponse> executeWithHttpInfo() throws ApiException {
            ContextCreateNewContextRequest contextCreateNewContextRequest = buildBodyParams();
            return createNewContextWithHttpInfo(contextCreateNewContextRequest);
        }

        /**
         * Execute createNewContext request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The new context </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContextCreateNewContextResponse> _callback) throws ApiException {
            ContextCreateNewContextRequest contextCreateNewContextRequest = buildBodyParams();
            return createNewContextAsync(contextCreateNewContextRequest, _callback);
        }
    }

    /**
     * Create a new context
     * Creates a new context.
     * @return CreateNewContextRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new context </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewContextRequestBuilder createNewContext(String name, Object owner) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        
        return new CreateNewContextRequestBuilder(name, owner);
    }
    private okhttp3.Call createRestrictionCall(String contextId, ContextCreateRestrictionRequest contextCreateRestrictionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contextCreateRestrictionRequest;

        // create path and map variables
        String localVarPath = "/context/{context_id}/restrictions"
            .replace("{" + "context_id" + "}", localVarApiClient.escapeString(contextId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRestrictionValidateBeforeCall(String contextId, ContextCreateRestrictionRequest contextCreateRestrictionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contextId' is set
        if (contextId == null) {
            throw new ApiException("Missing the required parameter 'contextId' when calling createRestriction(Async)");
        }

        // verify the required parameter 'contextCreateRestrictionRequest' is set
        if (contextCreateRestrictionRequest == null) {
            throw new ApiException("Missing the required parameter 'contextCreateRestrictionRequest' when calling createRestriction(Async)");
        }

        return createRestrictionCall(contextId, contextCreateRestrictionRequest, _callback);

    }


    private ApiResponse<RestrictionCreated> createRestrictionWithHttpInfo(String contextId, ContextCreateRestrictionRequest contextCreateRestrictionRequest) throws ApiException {
        okhttp3.Call localVarCall = createRestrictionValidateBeforeCall(contextId, contextCreateRestrictionRequest, null);
        Type localVarReturnType = new TypeToken<RestrictionCreated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createRestrictionAsync(String contextId, ContextCreateRestrictionRequest contextCreateRestrictionRequest, final ApiCallback<RestrictionCreated> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRestrictionValidateBeforeCall(contextId, contextCreateRestrictionRequest, _callback);
        Type localVarReturnType = new TypeToken<RestrictionCreated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateRestrictionRequestBuilder {
        private final String contextId;
        private UUID projectId;
        private String restrictionType;
        private String restrictionValue;

        private CreateRestrictionRequestBuilder(String contextId) {
            this.contextId = contextId;
        }

        /**
         * Set projectId
         * @param projectId Deprecated - Use \\\&quot;restriction_type\\\&quot; and \\\&quot;restriction_value\\\&quot; instead.  The project ID to use for a project restriction. This is mutually exclusive with restriction_type and restriction_value and implies restriction_type is \\\&quot;project\\\&quot;.  (optional)
         * @return CreateRestrictionRequestBuilder
         */
        public CreateRestrictionRequestBuilder projectId(UUID projectId) {
            this.projectId = projectId;
            return this;
        }
        
        /**
         * Set restrictionType
         * @param restrictionType  (optional)
         * @return CreateRestrictionRequestBuilder
         */
        public CreateRestrictionRequestBuilder restrictionType(String restrictionType) {
            this.restrictionType = restrictionType;
            return this;
        }
        
        /**
         * Set restrictionValue
         * @param restrictionValue  (optional)
         * @return CreateRestrictionRequestBuilder
         */
        public CreateRestrictionRequestBuilder restrictionValue(String restrictionValue) {
            this.restrictionValue = restrictionValue;
            return this;
        }
        
        /**
         * Build call for createRestriction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ContextCreateRestrictionRequest contextCreateRestrictionRequest = buildBodyParams();
            return createRestrictionCall(contextId, contextCreateRestrictionRequest, _callback);
        }

        private ContextCreateRestrictionRequest buildBodyParams() {
            ContextCreateRestrictionRequest contextCreateRestrictionRequest = new ContextCreateRestrictionRequest();
            contextCreateRestrictionRequest.projectId(this.projectId);
            contextCreateRestrictionRequest.restrictionType(this.restrictionType);
            contextCreateRestrictionRequest.restrictionValue(this.restrictionValue);
            return contextCreateRestrictionRequest;
        }

        /**
         * Execute createRestriction request
         * @return RestrictionCreated
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful response. </td><td>  -  </td></tr>
         </table>
         */
        public RestrictionCreated execute() throws ApiException {
            ContextCreateRestrictionRequest contextCreateRestrictionRequest = buildBodyParams();
            ApiResponse<RestrictionCreated> localVarResp = createRestrictionWithHttpInfo(contextId, contextCreateRestrictionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createRestriction request with HTTP info returned
         * @return ApiResponse&lt;RestrictionCreated&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RestrictionCreated> executeWithHttpInfo() throws ApiException {
            ContextCreateRestrictionRequest contextCreateRestrictionRequest = buildBodyParams();
            return createRestrictionWithHttpInfo(contextId, contextCreateRestrictionRequest);
        }

        /**
         * Execute createRestriction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RestrictionCreated> _callback) throws ApiException {
            ContextCreateRestrictionRequest contextCreateRestrictionRequest = buildBodyParams();
            return createRestrictionAsync(contextId, contextCreateRestrictionRequest, _callback);
        }
    }

    /**
     * 🧪 Create context restriction
     * [__EXPERIMENTAL__] Creates project restriction on a context.
     * @param contextId An opaque identifier of a context. (required)
     * @param contextCreateRestrictionRequest  (required)
     * @return CreateRestrictionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response. </td><td>  -  </td></tr>
     </table>
     */
    public CreateRestrictionRequestBuilder createRestriction(String contextId) throws IllegalArgumentException {
        if (contextId == null) throw new IllegalArgumentException("\"contextId\" is required but got null");
            

        return new CreateRestrictionRequestBuilder(contextId);
    }
    private okhttp3.Call deleteRestrictionCall(String contextId, String restrictionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/context/{context_id}/restrictions/{restriction_id}"
            .replace("{" + "context_id" + "}", localVarApiClient.escapeString(contextId.toString()))
            .replace("{" + "restriction_id" + "}", localVarApiClient.escapeString(restrictionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRestrictionValidateBeforeCall(String contextId, String restrictionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contextId' is set
        if (contextId == null) {
            throw new ApiException("Missing the required parameter 'contextId' when calling deleteRestriction(Async)");
        }

        // verify the required parameter 'restrictionId' is set
        if (restrictionId == null) {
            throw new ApiException("Missing the required parameter 'restrictionId' when calling deleteRestriction(Async)");
        }

        return deleteRestrictionCall(contextId, restrictionId, _callback);

    }


    private ApiResponse<RestrictionDeleted> deleteRestrictionWithHttpInfo(String contextId, String restrictionId) throws ApiException {
        okhttp3.Call localVarCall = deleteRestrictionValidateBeforeCall(contextId, restrictionId, null);
        Type localVarReturnType = new TypeToken<RestrictionDeleted>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteRestrictionAsync(String contextId, String restrictionId, final ApiCallback<RestrictionDeleted> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRestrictionValidateBeforeCall(contextId, restrictionId, _callback);
        Type localVarReturnType = new TypeToken<RestrictionDeleted>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteRestrictionRequestBuilder {
        private final String contextId;
        private final String restrictionId;

        private DeleteRestrictionRequestBuilder(String contextId, String restrictionId) {
            this.contextId = contextId;
            this.restrictionId = restrictionId;
        }

        /**
         * Build call for deleteRestriction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteRestrictionCall(contextId, restrictionId, _callback);
        }


        /**
         * Execute deleteRestriction request
         * @return RestrictionDeleted
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
         </table>
         */
        public RestrictionDeleted execute() throws ApiException {
            ApiResponse<RestrictionDeleted> localVarResp = deleteRestrictionWithHttpInfo(contextId, restrictionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteRestriction request with HTTP info returned
         * @return ApiResponse&lt;RestrictionDeleted&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RestrictionDeleted> executeWithHttpInfo() throws ApiException {
            return deleteRestrictionWithHttpInfo(contextId, restrictionId);
        }

        /**
         * Execute deleteRestriction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RestrictionDeleted> _callback) throws ApiException {
            return deleteRestrictionAsync(contextId, restrictionId, _callback);
        }
    }

    /**
     * 🧪 Delete context restriction
     * [__EXPERIMENTAL__] Deletes a project restriction on a context.
     * @param contextId An opaque identifier of a context. (required)
     * @param restrictionId An opaque identifier of a context restriction. (required)
     * @return DeleteRestrictionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteRestrictionRequestBuilder deleteRestriction(String contextId, String restrictionId) throws IllegalArgumentException {
        if (contextId == null) throw new IllegalArgumentException("\"contextId\" is required but got null");
            

        if (restrictionId == null) throw new IllegalArgumentException("\"restrictionId\" is required but got null");
            

        return new DeleteRestrictionRequestBuilder(contextId, restrictionId);
    }
    private okhttp3.Call getInformationCall(UUID contextId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/context/{context-id}"
            .replace("{" + "context-id" + "}", localVarApiClient.escapeString(contextId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInformationValidateBeforeCall(UUID contextId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contextId' is set
        if (contextId == null) {
            throw new ApiException("Missing the required parameter 'contextId' when calling getInformation(Async)");
        }

        return getInformationCall(contextId, _callback);

    }


    private ApiResponse<ContextGetInformationResponse> getInformationWithHttpInfo(UUID contextId) throws ApiException {
        okhttp3.Call localVarCall = getInformationValidateBeforeCall(contextId, null);
        Type localVarReturnType = new TypeToken<ContextGetInformationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInformationAsync(UUID contextId, final ApiCallback<ContextGetInformationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInformationValidateBeforeCall(contextId, _callback);
        Type localVarReturnType = new TypeToken<ContextGetInformationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInformationRequestBuilder {
        private final UUID contextId;

        private GetInformationRequestBuilder(UUID contextId) {
            this.contextId = contextId;
        }

        /**
         * Build call for getInformation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The context </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInformationCall(contextId, _callback);
        }


        /**
         * Execute getInformation request
         * @return ContextGetInformationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The context </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ContextGetInformationResponse execute() throws ApiException {
            ApiResponse<ContextGetInformationResponse> localVarResp = getInformationWithHttpInfo(contextId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInformation request with HTTP info returned
         * @return ApiResponse&lt;ContextGetInformationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The context </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContextGetInformationResponse> executeWithHttpInfo() throws ApiException {
            return getInformationWithHttpInfo(contextId);
        }

        /**
         * Execute getInformation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The context </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContextGetInformationResponse> _callback) throws ApiException {
            return getInformationAsync(contextId, _callback);
        }
    }

    /**
     * Get a context
     * Returns basic information about a context.
     * @param contextId ID of the context (UUID) (required)
     * @return GetInformationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The context </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public GetInformationRequestBuilder getInformation(UUID contextId) throws IllegalArgumentException {
        if (contextId == null) throw new IllegalArgumentException("\"contextId\" is required but got null");
            

        return new GetInformationRequestBuilder(contextId);
    }
    private okhttp3.Call getRestrictionsCall(String contextId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/context/{context_id}/restrictions"
            .replace("{" + "context_id" + "}", localVarApiClient.escapeString(contextId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRestrictionsValidateBeforeCall(String contextId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contextId' is set
        if (contextId == null) {
            throw new ApiException("Missing the required parameter 'contextId' when calling getRestrictions(Async)");
        }

        return getRestrictionsCall(contextId, _callback);

    }


    private ApiResponse<ContextProjectRestrictionsList> getRestrictionsWithHttpInfo(String contextId) throws ApiException {
        okhttp3.Call localVarCall = getRestrictionsValidateBeforeCall(contextId, null);
        Type localVarReturnType = new TypeToken<ContextProjectRestrictionsList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRestrictionsAsync(String contextId, final ApiCallback<ContextProjectRestrictionsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRestrictionsValidateBeforeCall(contextId, _callback);
        Type localVarReturnType = new TypeToken<ContextProjectRestrictionsList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRestrictionsRequestBuilder {
        private final String contextId;

        private GetRestrictionsRequestBuilder(String contextId) {
            this.contextId = contextId;
        }

        /**
         * Build call for getRestrictions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRestrictionsCall(contextId, _callback);
        }


        /**
         * Execute getRestrictions request
         * @return ContextProjectRestrictionsList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
         </table>
         */
        public ContextProjectRestrictionsList execute() throws ApiException {
            ApiResponse<ContextProjectRestrictionsList> localVarResp = getRestrictionsWithHttpInfo(contextId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRestrictions request with HTTP info returned
         * @return ApiResponse&lt;ContextProjectRestrictionsList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContextProjectRestrictionsList> executeWithHttpInfo() throws ApiException {
            return getRestrictionsWithHttpInfo(contextId);
        }

        /**
         * Execute getRestrictions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContextProjectRestrictionsList> _callback) throws ApiException {
            return getRestrictionsAsync(contextId, _callback);
        }
    }

    /**
     * 🧪 Get context restrictions
     * [__EXPERIMENTAL__] Gets a list of project restrictions associated with a context.
     * @param contextId An opaque identifier of a context. (required)
     * @return GetRestrictionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
     </table>
     */
    public GetRestrictionsRequestBuilder getRestrictions(String contextId) throws IllegalArgumentException {
        if (contextId == null) throw new IllegalArgumentException("\"contextId\" is required but got null");
            

        return new GetRestrictionsRequestBuilder(contextId);
    }
    private okhttp3.Call listEnvironmentVariablesCall(UUID contextId, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/context/{context-id}/environment-variable"
            .replace("{" + "context-id" + "}", localVarApiClient.escapeString(contextId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page-token", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEnvironmentVariablesValidateBeforeCall(UUID contextId, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contextId' is set
        if (contextId == null) {
            throw new ApiException("Missing the required parameter 'contextId' when calling listEnvironmentVariables(Async)");
        }

        return listEnvironmentVariablesCall(contextId, pageToken, _callback);

    }


    private ApiResponse<ContextListEnvironmentVariablesResponse> listEnvironmentVariablesWithHttpInfo(UUID contextId, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listEnvironmentVariablesValidateBeforeCall(contextId, pageToken, null);
        Type localVarReturnType = new TypeToken<ContextListEnvironmentVariablesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listEnvironmentVariablesAsync(UUID contextId, String pageToken, final ApiCallback<ContextListEnvironmentVariablesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEnvironmentVariablesValidateBeforeCall(contextId, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ContextListEnvironmentVariablesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListEnvironmentVariablesRequestBuilder {
        private final UUID contextId;
        private String pageToken;

        private ListEnvironmentVariablesRequestBuilder(UUID contextId) {
            this.contextId = contextId;
        }

        /**
         * Set pageToken
         * @param pageToken A token to retrieve the next page of results. (optional)
         * @return ListEnvironmentVariablesRequestBuilder
         */
        public ListEnvironmentVariablesRequestBuilder pageToken(String pageToken) {
            this.pageToken = pageToken;
            return this;
        }
        
        /**
         * Build call for listEnvironmentVariables
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paginated list of environment variables </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listEnvironmentVariablesCall(contextId, pageToken, _callback);
        }


        /**
         * Execute listEnvironmentVariables request
         * @return ContextListEnvironmentVariablesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paginated list of environment variables </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ContextListEnvironmentVariablesResponse execute() throws ApiException {
            ApiResponse<ContextListEnvironmentVariablesResponse> localVarResp = listEnvironmentVariablesWithHttpInfo(contextId, pageToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listEnvironmentVariables request with HTTP info returned
         * @return ApiResponse&lt;ContextListEnvironmentVariablesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paginated list of environment variables </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContextListEnvironmentVariablesResponse> executeWithHttpInfo() throws ApiException {
            return listEnvironmentVariablesWithHttpInfo(contextId, pageToken);
        }

        /**
         * Execute listEnvironmentVariables request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paginated list of environment variables </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContextListEnvironmentVariablesResponse> _callback) throws ApiException {
            return listEnvironmentVariablesAsync(contextId, pageToken, _callback);
        }
    }

    /**
     * List environment variables
     * List information about environment variables in a context, not including their values.
     * @param contextId ID of the context (UUID) (required)
     * @return ListEnvironmentVariablesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paginated list of environment variables </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ListEnvironmentVariablesRequestBuilder listEnvironmentVariables(UUID contextId) throws IllegalArgumentException {
        if (contextId == null) throw new IllegalArgumentException("\"contextId\" is required but got null");
            

        return new ListEnvironmentVariablesRequestBuilder(contextId);
    }
    private okhttp3.Call listOwnerContextsCall(UUID ownerId, String ownerSlug, String ownerType, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/context";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ownerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner-id", ownerId));
        }

        if (ownerSlug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner-slug", ownerSlug));
        }

        if (ownerType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner-type", ownerType));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page-token", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listOwnerContextsValidateBeforeCall(UUID ownerId, String ownerSlug, String ownerType, String pageToken, final ApiCallback _callback) throws ApiException {
        return listOwnerContextsCall(ownerId, ownerSlug, ownerType, pageToken, _callback);

    }


    private ApiResponse<ContextListOwnerContextsResponse> listOwnerContextsWithHttpInfo(UUID ownerId, String ownerSlug, String ownerType, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listOwnerContextsValidateBeforeCall(ownerId, ownerSlug, ownerType, pageToken, null);
        Type localVarReturnType = new TypeToken<ContextListOwnerContextsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listOwnerContextsAsync(UUID ownerId, String ownerSlug, String ownerType, String pageToken, final ApiCallback<ContextListOwnerContextsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listOwnerContextsValidateBeforeCall(ownerId, ownerSlug, ownerType, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ContextListOwnerContextsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListOwnerContextsRequestBuilder {
        private UUID ownerId;
        private String ownerSlug;
        private String ownerType;
        private String pageToken;

        private ListOwnerContextsRequestBuilder() {
        }

        /**
         * Set ownerId
         * @param ownerId The unique ID of the owner of the context. Specify either this or owner-slug. (optional)
         * @return ListOwnerContextsRequestBuilder
         */
        public ListOwnerContextsRequestBuilder ownerId(UUID ownerId) {
            this.ownerId = ownerId;
            return this;
        }
        
        /**
         * Set ownerSlug
         * @param ownerSlug A string that represents an organization. Specify either this or owner-id. Cannot be used for accounts. (optional)
         * @return ListOwnerContextsRequestBuilder
         */
        public ListOwnerContextsRequestBuilder ownerSlug(String ownerSlug) {
            this.ownerSlug = ownerSlug;
            return this;
        }
        
        /**
         * Set ownerType
         * @param ownerType The type of the owner. Defaults to \&quot;organization\&quot;. Accounts are only used as context owners in server. (optional)
         * @return ListOwnerContextsRequestBuilder
         */
        public ListOwnerContextsRequestBuilder ownerType(String ownerType) {
            this.ownerType = ownerType;
            return this;
        }
        
        /**
         * Set pageToken
         * @param pageToken A token to retrieve the next page of results. (optional)
         * @return ListOwnerContextsRequestBuilder
         */
        public ListOwnerContextsRequestBuilder pageToken(String pageToken) {
            this.pageToken = pageToken;
            return this;
        }
        
        /**
         * Build call for listOwnerContexts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paginated list of contexts </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listOwnerContextsCall(ownerId, ownerSlug, ownerType, pageToken, _callback);
        }


        /**
         * Execute listOwnerContexts request
         * @return ContextListOwnerContextsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paginated list of contexts </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ContextListOwnerContextsResponse execute() throws ApiException {
            ApiResponse<ContextListOwnerContextsResponse> localVarResp = listOwnerContextsWithHttpInfo(ownerId, ownerSlug, ownerType, pageToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listOwnerContexts request with HTTP info returned
         * @return ApiResponse&lt;ContextListOwnerContextsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paginated list of contexts </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContextListOwnerContextsResponse> executeWithHttpInfo() throws ApiException {
            return listOwnerContextsWithHttpInfo(ownerId, ownerSlug, ownerType, pageToken);
        }

        /**
         * Execute listOwnerContexts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paginated list of contexts </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContextListOwnerContextsResponse> _callback) throws ApiException {
            return listOwnerContextsAsync(ownerId, ownerSlug, ownerType, pageToken, _callback);
        }
    }

    /**
     * List contexts
     * List all contexts for an owner.
     * @return ListOwnerContextsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paginated list of contexts </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ListOwnerContextsRequestBuilder listOwnerContexts() throws IllegalArgumentException {
        return new ListOwnerContextsRequestBuilder();
    }
    private okhttp3.Call removeContextCall(UUID contextId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/context/{context-id}"
            .replace("{" + "context-id" + "}", localVarApiClient.escapeString(contextId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeContextValidateBeforeCall(UUID contextId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contextId' is set
        if (contextId == null) {
            throw new ApiException("Missing the required parameter 'contextId' when calling removeContext(Async)");
        }

        return removeContextCall(contextId, _callback);

    }


    private ApiResponse<ContextRemoveContextResponse> removeContextWithHttpInfo(UUID contextId) throws ApiException {
        okhttp3.Call localVarCall = removeContextValidateBeforeCall(contextId, null);
        Type localVarReturnType = new TypeToken<ContextRemoveContextResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeContextAsync(UUID contextId, final ApiCallback<ContextRemoveContextResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeContextValidateBeforeCall(contextId, _callback);
        Type localVarReturnType = new TypeToken<ContextRemoveContextResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveContextRequestBuilder {
        private final UUID contextId;

        private RemoveContextRequestBuilder(UUID contextId) {
            this.contextId = contextId;
        }

        /**
         * Build call for removeContext
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A confirmation message </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeContextCall(contextId, _callback);
        }


        /**
         * Execute removeContext request
         * @return ContextRemoveContextResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A confirmation message </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ContextRemoveContextResponse execute() throws ApiException {
            ApiResponse<ContextRemoveContextResponse> localVarResp = removeContextWithHttpInfo(contextId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeContext request with HTTP info returned
         * @return ApiResponse&lt;ContextRemoveContextResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A confirmation message </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContextRemoveContextResponse> executeWithHttpInfo() throws ApiException {
            return removeContextWithHttpInfo(contextId);
        }

        /**
         * Execute removeContext request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A confirmation message </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContextRemoveContextResponse> _callback) throws ApiException {
            return removeContextAsync(contextId, _callback);
        }
    }

    /**
     * Delete a context
     * 
     * @param contextId ID of the context (UUID) (required)
     * @return RemoveContextRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A confirmation message </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveContextRequestBuilder removeContext(UUID contextId) throws IllegalArgumentException {
        if (contextId == null) throw new IllegalArgumentException("\"contextId\" is required but got null");
            

        return new RemoveContextRequestBuilder(contextId);
    }
    private okhttp3.Call removeEnvironmentVariableCall(String envVarName, UUID contextId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/context/{context-id}/environment-variable/{env-var-name}"
            .replace("{" + "env-var-name" + "}", localVarApiClient.escapeString(envVarName.toString()))
            .replace("{" + "context-id" + "}", localVarApiClient.escapeString(contextId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeEnvironmentVariableValidateBeforeCall(String envVarName, UUID contextId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'envVarName' is set
        if (envVarName == null) {
            throw new ApiException("Missing the required parameter 'envVarName' when calling removeEnvironmentVariable(Async)");
        }

        // verify the required parameter 'contextId' is set
        if (contextId == null) {
            throw new ApiException("Missing the required parameter 'contextId' when calling removeEnvironmentVariable(Async)");
        }

        return removeEnvironmentVariableCall(envVarName, contextId, _callback);

    }


    private ApiResponse<ContextRemoveEnvironmentVariableResponse> removeEnvironmentVariableWithHttpInfo(String envVarName, UUID contextId) throws ApiException {
        okhttp3.Call localVarCall = removeEnvironmentVariableValidateBeforeCall(envVarName, contextId, null);
        Type localVarReturnType = new TypeToken<ContextRemoveEnvironmentVariableResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeEnvironmentVariableAsync(String envVarName, UUID contextId, final ApiCallback<ContextRemoveEnvironmentVariableResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeEnvironmentVariableValidateBeforeCall(envVarName, contextId, _callback);
        Type localVarReturnType = new TypeToken<ContextRemoveEnvironmentVariableResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveEnvironmentVariableRequestBuilder {
        private final String envVarName;
        private final UUID contextId;

        private RemoveEnvironmentVariableRequestBuilder(String envVarName, UUID contextId) {
            this.envVarName = envVarName;
            this.contextId = contextId;
        }

        /**
         * Build call for removeEnvironmentVariable
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A confirmation message </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeEnvironmentVariableCall(envVarName, contextId, _callback);
        }


        /**
         * Execute removeEnvironmentVariable request
         * @return ContextRemoveEnvironmentVariableResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A confirmation message </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ContextRemoveEnvironmentVariableResponse execute() throws ApiException {
            ApiResponse<ContextRemoveEnvironmentVariableResponse> localVarResp = removeEnvironmentVariableWithHttpInfo(envVarName, contextId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeEnvironmentVariable request with HTTP info returned
         * @return ApiResponse&lt;ContextRemoveEnvironmentVariableResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A confirmation message </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContextRemoveEnvironmentVariableResponse> executeWithHttpInfo() throws ApiException {
            return removeEnvironmentVariableWithHttpInfo(envVarName, contextId);
        }

        /**
         * Execute removeEnvironmentVariable request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A confirmation message </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContextRemoveEnvironmentVariableResponse> _callback) throws ApiException {
            return removeEnvironmentVariableAsync(envVarName, contextId, _callback);
        }
    }

    /**
     * Remove an environment variable
     * Delete an environment variable from a context.
     * @param envVarName The name of the environment variable (required)
     * @param contextId ID of the context (UUID) (required)
     * @return RemoveEnvironmentVariableRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A confirmation message </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveEnvironmentVariableRequestBuilder removeEnvironmentVariable(String envVarName, UUID contextId) throws IllegalArgumentException {
        if (envVarName == null) throw new IllegalArgumentException("\"envVarName\" is required but got null");
            

        if (contextId == null) throw new IllegalArgumentException("\"contextId\" is required but got null");
            

        return new RemoveEnvironmentVariableRequestBuilder(envVarName, contextId);
    }
    private okhttp3.Call updateEnvironmentVariableCall(UUID contextId, String envVarName, ContextUpdateEnvironmentVariableRequest contextUpdateEnvironmentVariableRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contextUpdateEnvironmentVariableRequest;

        // create path and map variables
        String localVarPath = "/context/{context-id}/environment-variable/{env-var-name}"
            .replace("{" + "context-id" + "}", localVarApiClient.escapeString(contextId.toString()))
            .replace("{" + "env-var-name" + "}", localVarApiClient.escapeString(envVarName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEnvironmentVariableValidateBeforeCall(UUID contextId, String envVarName, ContextUpdateEnvironmentVariableRequest contextUpdateEnvironmentVariableRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contextId' is set
        if (contextId == null) {
            throw new ApiException("Missing the required parameter 'contextId' when calling updateEnvironmentVariable(Async)");
        }

        // verify the required parameter 'envVarName' is set
        if (envVarName == null) {
            throw new ApiException("Missing the required parameter 'envVarName' when calling updateEnvironmentVariable(Async)");
        }

        return updateEnvironmentVariableCall(contextId, envVarName, contextUpdateEnvironmentVariableRequest, _callback);

    }


    private ApiResponse<ContextUpdateEnvironmentVariableResponse> updateEnvironmentVariableWithHttpInfo(UUID contextId, String envVarName, ContextUpdateEnvironmentVariableRequest contextUpdateEnvironmentVariableRequest) throws ApiException {
        okhttp3.Call localVarCall = updateEnvironmentVariableValidateBeforeCall(contextId, envVarName, contextUpdateEnvironmentVariableRequest, null);
        Type localVarReturnType = new TypeToken<ContextUpdateEnvironmentVariableResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateEnvironmentVariableAsync(UUID contextId, String envVarName, ContextUpdateEnvironmentVariableRequest contextUpdateEnvironmentVariableRequest, final ApiCallback<ContextUpdateEnvironmentVariableResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEnvironmentVariableValidateBeforeCall(contextId, envVarName, contextUpdateEnvironmentVariableRequest, _callback);
        Type localVarReturnType = new TypeToken<ContextUpdateEnvironmentVariableResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateEnvironmentVariableRequestBuilder {
        private final String value;
        private final UUID contextId;
        private final String envVarName;

        private UpdateEnvironmentVariableRequestBuilder(String value, UUID contextId, String envVarName) {
            this.value = value;
            this.contextId = contextId;
            this.envVarName = envVarName;
        }

        /**
         * Build call for updateEnvironmentVariable
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The new environment variable </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ContextUpdateEnvironmentVariableRequest contextUpdateEnvironmentVariableRequest = buildBodyParams();
            return updateEnvironmentVariableCall(contextId, envVarName, contextUpdateEnvironmentVariableRequest, _callback);
        }

        private ContextUpdateEnvironmentVariableRequest buildBodyParams() {
            ContextUpdateEnvironmentVariableRequest contextUpdateEnvironmentVariableRequest = new ContextUpdateEnvironmentVariableRequest();
            contextUpdateEnvironmentVariableRequest.value(this.value);
            return contextUpdateEnvironmentVariableRequest;
        }

        /**
         * Execute updateEnvironmentVariable request
         * @return ContextUpdateEnvironmentVariableResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The new environment variable </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ContextUpdateEnvironmentVariableResponse execute() throws ApiException {
            ContextUpdateEnvironmentVariableRequest contextUpdateEnvironmentVariableRequest = buildBodyParams();
            ApiResponse<ContextUpdateEnvironmentVariableResponse> localVarResp = updateEnvironmentVariableWithHttpInfo(contextId, envVarName, contextUpdateEnvironmentVariableRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateEnvironmentVariable request with HTTP info returned
         * @return ApiResponse&lt;ContextUpdateEnvironmentVariableResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The new environment variable </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContextUpdateEnvironmentVariableResponse> executeWithHttpInfo() throws ApiException {
            ContextUpdateEnvironmentVariableRequest contextUpdateEnvironmentVariableRequest = buildBodyParams();
            return updateEnvironmentVariableWithHttpInfo(contextId, envVarName, contextUpdateEnvironmentVariableRequest);
        }

        /**
         * Execute updateEnvironmentVariable request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The new environment variable </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContextUpdateEnvironmentVariableResponse> _callback) throws ApiException {
            ContextUpdateEnvironmentVariableRequest contextUpdateEnvironmentVariableRequest = buildBodyParams();
            return updateEnvironmentVariableAsync(contextId, envVarName, contextUpdateEnvironmentVariableRequest, _callback);
        }
    }

    /**
     * Add or update an environment variable
     * Create or update an environment variable within a context. Returns information about the environment variable, not including its value.
     * @param contextId ID of the context (UUID) (required)
     * @param envVarName The name of the environment variable (required)
     * @return UpdateEnvironmentVariableRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new environment variable </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateEnvironmentVariableRequestBuilder updateEnvironmentVariable(String value, UUID contextId, String envVarName) throws IllegalArgumentException {
        if (value == null) throw new IllegalArgumentException("\"value\" is required but got null");
            

        if (contextId == null) throw new IllegalArgumentException("\"contextId\" is required but got null");
            

        if (envVarName == null) throw new IllegalArgumentException("\"envVarName\" is required but got null");
            

        return new UpdateEnvironmentVariableRequestBuilder(value, contextId, envVarName);
    }
}
