/*
 * CircleCI API
 * This describes the resources that make up the CircleCI API v2.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PipelineContinueExecutionRequest;
import com.konfigthis.client.model.PipelineContinueExecutionResponse;
import com.konfigthis.client.model.PipelineContinueExecutiondefaultResponse;
import com.konfigthis.client.model.PipelineGetAllPipelinesResponse;
import com.konfigthis.client.model.PipelineGetAllPipelinesdefaultResponse;
import com.konfigthis.client.model.PipelineGetByIdResponse;
import com.konfigthis.client.model.PipelineGetByIddefaultResponse;
import com.konfigthis.client.model.PipelineGetByNumberResponse;
import com.konfigthis.client.model.PipelineGetByNumberdefaultResponse;
import com.konfigthis.client.model.PipelineGetConfigurationByIdResponse;
import com.konfigthis.client.model.PipelineGetConfigurationByIddefaultResponse;
import com.konfigthis.client.model.PipelineListRecentPipelinesResponse;
import com.konfigthis.client.model.PipelineListRecentPipelinesdefaultResponse;
import com.konfigthis.client.model.PipelineListUserPipelinesResponse;
import com.konfigthis.client.model.PipelineListUserPipelinesdefaultResponse;
import com.konfigthis.client.model.PipelineListWorkflowsResponse;
import com.konfigthis.client.model.PipelineListWorkflowsdefaultResponse;
import com.konfigthis.client.model.PipelineTriggerNewPipelineRequest;
import com.konfigthis.client.model.PipelineTriggerNewPipelineResponse;
import com.konfigthis.client.model.PipelineTriggerNewPipelinedefaultResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PipelineApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PipelineApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PipelineApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call continueExecutionCall(PipelineContinueExecutionRequest pipelineContinueExecutionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pipelineContinueExecutionRequest;

        // create path and map variables
        String localVarPath = "/pipeline/continue";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call continueExecutionValidateBeforeCall(PipelineContinueExecutionRequest pipelineContinueExecutionRequest, final ApiCallback _callback) throws ApiException {
        return continueExecutionCall(pipelineContinueExecutionRequest, _callback);

    }


    private ApiResponse<PipelineContinueExecutionResponse> continueExecutionWithHttpInfo(PipelineContinueExecutionRequest pipelineContinueExecutionRequest) throws ApiException {
        okhttp3.Call localVarCall = continueExecutionValidateBeforeCall(pipelineContinueExecutionRequest, null);
        Type localVarReturnType = new TypeToken<PipelineContinueExecutionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call continueExecutionAsync(PipelineContinueExecutionRequest pipelineContinueExecutionRequest, final ApiCallback<PipelineContinueExecutionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = continueExecutionValidateBeforeCall(pipelineContinueExecutionRequest, _callback);
        Type localVarReturnType = new TypeToken<PipelineContinueExecutionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ContinueExecutionRequestBuilder {
        private final String continuationKey;
        private final String _configuration;
        private Map<String, Object> parameters;

        private ContinueExecutionRequestBuilder(String continuationKey, String _configuration) {
            this.continuationKey = continuationKey;
            this._configuration = _configuration;
        }

        /**
         * Set parameters
         * @param parameters An object containing pipeline parameters and their values. (optional)
         * @return ContinueExecutionRequestBuilder
         */
        public ContinueExecutionRequestBuilder parameters(Map<String, Object> parameters) {
            this.parameters = parameters;
            return this;
        }
        
        /**
         * Build call for continueExecution
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A confirmation message. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PipelineContinueExecutionRequest pipelineContinueExecutionRequest = buildBodyParams();
            return continueExecutionCall(pipelineContinueExecutionRequest, _callback);
        }

        private PipelineContinueExecutionRequest buildBodyParams() {
            PipelineContinueExecutionRequest pipelineContinueExecutionRequest = new PipelineContinueExecutionRequest();
            pipelineContinueExecutionRequest.parameters(this.parameters);
            pipelineContinueExecutionRequest.continuationKey(this.continuationKey);
            pipelineContinueExecutionRequest._configuration(this._configuration);
            return pipelineContinueExecutionRequest;
        }

        /**
         * Execute continueExecution request
         * @return PipelineContinueExecutionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A confirmation message. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public PipelineContinueExecutionResponse execute() throws ApiException {
            PipelineContinueExecutionRequest pipelineContinueExecutionRequest = buildBodyParams();
            ApiResponse<PipelineContinueExecutionResponse> localVarResp = continueExecutionWithHttpInfo(pipelineContinueExecutionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute continueExecution request with HTTP info returned
         * @return ApiResponse&lt;PipelineContinueExecutionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A confirmation message. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PipelineContinueExecutionResponse> executeWithHttpInfo() throws ApiException {
            PipelineContinueExecutionRequest pipelineContinueExecutionRequest = buildBodyParams();
            return continueExecutionWithHttpInfo(pipelineContinueExecutionRequest);
        }

        /**
         * Execute continueExecution request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A confirmation message. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PipelineContinueExecutionResponse> _callback) throws ApiException {
            PipelineContinueExecutionRequest pipelineContinueExecutionRequest = buildBodyParams();
            return continueExecutionAsync(pipelineContinueExecutionRequest, _callback);
        }
    }

    /**
     * Continue a pipeline
     * Continue a pipeline from the setup phase. For information on using pipeline parameters with dynamic configuration, see the [Pipeline values and parameters](https://circleci.com/docs/pipeline-variables/#pipeline-parameters-and-dynamic-configuration) docs.
     * @return ContinueExecutionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A confirmation message. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ContinueExecutionRequestBuilder continueExecution(String continuationKey, String _configuration) throws IllegalArgumentException {
        if (continuationKey == null) throw new IllegalArgumentException("\"continuationKey\" is required but got null");
            

        if (_configuration == null) throw new IllegalArgumentException("\"_configuration\" is required but got null");
            

        return new ContinueExecutionRequestBuilder(continuationKey, _configuration);
    }
    private okhttp3.Call getAllPipelinesCall(String projectSlug, String branch, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{project-slug}/pipeline"
            .replace("{" + "project-slug" + "}", localVarApiClient.escapeString(projectSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (branch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("branch", branch));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page-token", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllPipelinesValidateBeforeCall(String projectSlug, String branch, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling getAllPipelines(Async)");
        }

        return getAllPipelinesCall(projectSlug, branch, pageToken, _callback);

    }


    private ApiResponse<PipelineGetAllPipelinesResponse> getAllPipelinesWithHttpInfo(String projectSlug, String branch, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = getAllPipelinesValidateBeforeCall(projectSlug, branch, pageToken, null);
        Type localVarReturnType = new TypeToken<PipelineGetAllPipelinesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllPipelinesAsync(String projectSlug, String branch, String pageToken, final ApiCallback<PipelineGetAllPipelinesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllPipelinesValidateBeforeCall(projectSlug, branch, pageToken, _callback);
        Type localVarReturnType = new TypeToken<PipelineGetAllPipelinesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllPipelinesRequestBuilder {
        private final String projectSlug;
        private String branch;
        private String pageToken;

        private GetAllPipelinesRequestBuilder(String projectSlug) {
            this.projectSlug = projectSlug;
        }

        /**
         * Set branch
         * @param branch The name of a vcs branch. (optional)
         * @return GetAllPipelinesRequestBuilder
         */
        public GetAllPipelinesRequestBuilder branch(String branch) {
            this.branch = branch;
            return this;
        }
        
        /**
         * Set pageToken
         * @param pageToken A token to retrieve the next page of results. (optional)
         * @return GetAllPipelinesRequestBuilder
         */
        public GetAllPipelinesRequestBuilder pageToken(String pageToken) {
            this.pageToken = pageToken;
            return this;
        }
        
        /**
         * Build call for getAllPipelines
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A sequence of pipelines. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllPipelinesCall(projectSlug, branch, pageToken, _callback);
        }


        /**
         * Execute getAllPipelines request
         * @return PipelineGetAllPipelinesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A sequence of pipelines. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public PipelineGetAllPipelinesResponse execute() throws ApiException {
            ApiResponse<PipelineGetAllPipelinesResponse> localVarResp = getAllPipelinesWithHttpInfo(projectSlug, branch, pageToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllPipelines request with HTTP info returned
         * @return ApiResponse&lt;PipelineGetAllPipelinesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A sequence of pipelines. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PipelineGetAllPipelinesResponse> executeWithHttpInfo() throws ApiException {
            return getAllPipelinesWithHttpInfo(projectSlug, branch, pageToken);
        }

        /**
         * Execute getAllPipelines request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A sequence of pipelines. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PipelineGetAllPipelinesResponse> _callback) throws ApiException {
            return getAllPipelinesAsync(projectSlug, branch, pageToken, _callback);
        }
    }

    /**
     * Get all pipelines
     * Returns all pipelines for this project.
     * @param projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings). (required)
     * @return GetAllPipelinesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A sequence of pipelines. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllPipelinesRequestBuilder getAllPipelines(String projectSlug) throws IllegalArgumentException {
        if (projectSlug == null) throw new IllegalArgumentException("\"projectSlug\" is required but got null");
            

        return new GetAllPipelinesRequestBuilder(projectSlug);
    }
    private okhttp3.Call getByIdCall(UUID pipelineId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pipeline/{pipeline-id}"
            .replace("{" + "pipeline-id" + "}", localVarApiClient.escapeString(pipelineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(UUID pipelineId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pipelineId' is set
        if (pipelineId == null) {
            throw new ApiException("Missing the required parameter 'pipelineId' when calling getById(Async)");
        }

        return getByIdCall(pipelineId, _callback);

    }


    private ApiResponse<PipelineGetByIdResponse> getByIdWithHttpInfo(UUID pipelineId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(pipelineId, null);
        Type localVarReturnType = new TypeToken<PipelineGetByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(UUID pipelineId, final ApiCallback<PipelineGetByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(pipelineId, _callback);
        Type localVarReturnType = new TypeToken<PipelineGetByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final UUID pipelineId;

        private GetByIdRequestBuilder(UUID pipelineId) {
            this.pipelineId = pipelineId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A pipeline object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(pipelineId, _callback);
        }


        /**
         * Execute getById request
         * @return PipelineGetByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A pipeline object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public PipelineGetByIdResponse execute() throws ApiException {
            ApiResponse<PipelineGetByIdResponse> localVarResp = getByIdWithHttpInfo(pipelineId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;PipelineGetByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A pipeline object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PipelineGetByIdResponse> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(pipelineId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A pipeline object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PipelineGetByIdResponse> _callback) throws ApiException {
            return getByIdAsync(pipelineId, _callback);
        }
    }

    /**
     * Get a pipeline by ID
     * Returns a pipeline by the pipeline ID.
     * @param pipelineId The unique ID of the pipeline. (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A pipeline object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(UUID pipelineId) throws IllegalArgumentException {
        if (pipelineId == null) throw new IllegalArgumentException("\"pipelineId\" is required but got null");
            

        return new GetByIdRequestBuilder(pipelineId);
    }
    private okhttp3.Call getByNumberCall(String projectSlug, Object pipelineNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{project-slug}/pipeline/{pipeline-number}"
            .replace("{" + "project-slug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "pipeline-number" + "}", localVarApiClient.escapeString(pipelineNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByNumberValidateBeforeCall(String projectSlug, Object pipelineNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling getByNumber(Async)");
        }

        // verify the required parameter 'pipelineNumber' is set
        if (pipelineNumber == null) {
            throw new ApiException("Missing the required parameter 'pipelineNumber' when calling getByNumber(Async)");
        }

        return getByNumberCall(projectSlug, pipelineNumber, _callback);

    }


    private ApiResponse<PipelineGetByNumberResponse> getByNumberWithHttpInfo(String projectSlug, Object pipelineNumber) throws ApiException {
        okhttp3.Call localVarCall = getByNumberValidateBeforeCall(projectSlug, pipelineNumber, null);
        Type localVarReturnType = new TypeToken<PipelineGetByNumberResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByNumberAsync(String projectSlug, Object pipelineNumber, final ApiCallback<PipelineGetByNumberResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByNumberValidateBeforeCall(projectSlug, pipelineNumber, _callback);
        Type localVarReturnType = new TypeToken<PipelineGetByNumberResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByNumberRequestBuilder {
        private final String projectSlug;
        private final Object pipelineNumber;

        private GetByNumberRequestBuilder(String projectSlug, Object pipelineNumber) {
            this.projectSlug = projectSlug;
            this.pipelineNumber = pipelineNumber;
        }

        /**
         * Build call for getByNumber
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A pipeline object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByNumberCall(projectSlug, pipelineNumber, _callback);
        }


        /**
         * Execute getByNumber request
         * @return PipelineGetByNumberResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A pipeline object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public PipelineGetByNumberResponse execute() throws ApiException {
            ApiResponse<PipelineGetByNumberResponse> localVarResp = getByNumberWithHttpInfo(projectSlug, pipelineNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByNumber request with HTTP info returned
         * @return ApiResponse&lt;PipelineGetByNumberResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A pipeline object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PipelineGetByNumberResponse> executeWithHttpInfo() throws ApiException {
            return getByNumberWithHttpInfo(projectSlug, pipelineNumber);
        }

        /**
         * Execute getByNumber request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A pipeline object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PipelineGetByNumberResponse> _callback) throws ApiException {
            return getByNumberAsync(projectSlug, pipelineNumber, _callback);
        }
    }

    /**
     * Get a pipeline by pipeline number
     * Returns a pipeline by the pipeline number.
     * @param projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings). (required)
     * @param pipelineNumber The number of the pipeline. (required)
     * @return GetByNumberRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A pipeline object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public GetByNumberRequestBuilder getByNumber(String projectSlug, Object pipelineNumber) throws IllegalArgumentException {
        if (projectSlug == null) throw new IllegalArgumentException("\"projectSlug\" is required but got null");
            

        if (pipelineNumber == null) throw new IllegalArgumentException("\"pipelineNumber\" is required but got null");
        return new GetByNumberRequestBuilder(projectSlug, pipelineNumber);
    }
    private okhttp3.Call getConfigurationByIdCall(UUID pipelineId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pipeline/{pipeline-id}/config"
            .replace("{" + "pipeline-id" + "}", localVarApiClient.escapeString(pipelineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConfigurationByIdValidateBeforeCall(UUID pipelineId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pipelineId' is set
        if (pipelineId == null) {
            throw new ApiException("Missing the required parameter 'pipelineId' when calling getConfigurationById(Async)");
        }

        return getConfigurationByIdCall(pipelineId, _callback);

    }


    private ApiResponse<PipelineGetConfigurationByIdResponse> getConfigurationByIdWithHttpInfo(UUID pipelineId) throws ApiException {
        okhttp3.Call localVarCall = getConfigurationByIdValidateBeforeCall(pipelineId, null);
        Type localVarReturnType = new TypeToken<PipelineGetConfigurationByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getConfigurationByIdAsync(UUID pipelineId, final ApiCallback<PipelineGetConfigurationByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConfigurationByIdValidateBeforeCall(pipelineId, _callback);
        Type localVarReturnType = new TypeToken<PipelineGetConfigurationByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetConfigurationByIdRequestBuilder {
        private final UUID pipelineId;

        private GetConfigurationByIdRequestBuilder(UUID pipelineId) {
            this.pipelineId = pipelineId;
        }

        /**
         * Build call for getConfigurationById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The configuration strings for the pipeline. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getConfigurationByIdCall(pipelineId, _callback);
        }


        /**
         * Execute getConfigurationById request
         * @return PipelineGetConfigurationByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The configuration strings for the pipeline. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public PipelineGetConfigurationByIdResponse execute() throws ApiException {
            ApiResponse<PipelineGetConfigurationByIdResponse> localVarResp = getConfigurationByIdWithHttpInfo(pipelineId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getConfigurationById request with HTTP info returned
         * @return ApiResponse&lt;PipelineGetConfigurationByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The configuration strings for the pipeline. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PipelineGetConfigurationByIdResponse> executeWithHttpInfo() throws ApiException {
            return getConfigurationByIdWithHttpInfo(pipelineId);
        }

        /**
         * Execute getConfigurationById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The configuration strings for the pipeline. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PipelineGetConfigurationByIdResponse> _callback) throws ApiException {
            return getConfigurationByIdAsync(pipelineId, _callback);
        }
    }

    /**
     * Get a pipeline&#39;s configuration
     * Returns a pipeline&#39;s configuration by ID.
     * @param pipelineId The unique ID of the pipeline. (required)
     * @return GetConfigurationByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The configuration strings for the pipeline. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public GetConfigurationByIdRequestBuilder getConfigurationById(UUID pipelineId) throws IllegalArgumentException {
        if (pipelineId == null) throw new IllegalArgumentException("\"pipelineId\" is required but got null");
            

        return new GetConfigurationByIdRequestBuilder(pipelineId);
    }
    private okhttp3.Call listRecentPipelinesCall(String orgSlug, String pageToken, Boolean mine, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pipeline";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (orgSlug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("org-slug", orgSlug));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page-token", pageToken));
        }

        if (mine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mine", mine));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRecentPipelinesValidateBeforeCall(String orgSlug, String pageToken, Boolean mine, final ApiCallback _callback) throws ApiException {
        return listRecentPipelinesCall(orgSlug, pageToken, mine, _callback);

    }


    private ApiResponse<PipelineListRecentPipelinesResponse> listRecentPipelinesWithHttpInfo(String orgSlug, String pageToken, Boolean mine) throws ApiException {
        okhttp3.Call localVarCall = listRecentPipelinesValidateBeforeCall(orgSlug, pageToken, mine, null);
        Type localVarReturnType = new TypeToken<PipelineListRecentPipelinesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listRecentPipelinesAsync(String orgSlug, String pageToken, Boolean mine, final ApiCallback<PipelineListRecentPipelinesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRecentPipelinesValidateBeforeCall(orgSlug, pageToken, mine, _callback);
        Type localVarReturnType = new TypeToken<PipelineListRecentPipelinesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRecentPipelinesRequestBuilder {
        private String orgSlug;
        private String pageToken;
        private Boolean mine;

        private ListRecentPipelinesRequestBuilder() {
        }

        /**
         * Set orgSlug
         * @param orgSlug Org slug in the form &#x60;vcs-slug/org-name&#x60;. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60; and replace the &#x60;org-name&#x60; with the organization ID (found in Organization Settings). (optional)
         * @return ListRecentPipelinesRequestBuilder
         */
        public ListRecentPipelinesRequestBuilder orgSlug(String orgSlug) {
            this.orgSlug = orgSlug;
            return this;
        }
        
        /**
         * Set pageToken
         * @param pageToken A token to retrieve the next page of results. (optional)
         * @return ListRecentPipelinesRequestBuilder
         */
        public ListRecentPipelinesRequestBuilder pageToken(String pageToken) {
            this.pageToken = pageToken;
            return this;
        }
        
        /**
         * Set mine
         * @param mine Only include entries created by your user. (optional)
         * @return ListRecentPipelinesRequestBuilder
         */
        public ListRecentPipelinesRequestBuilder mine(Boolean mine) {
            this.mine = mine;
            return this;
        }
        
        /**
         * Build call for listRecentPipelines
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A sequence of pipelines. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listRecentPipelinesCall(orgSlug, pageToken, mine, _callback);
        }


        /**
         * Execute listRecentPipelines request
         * @return PipelineListRecentPipelinesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A sequence of pipelines. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public PipelineListRecentPipelinesResponse execute() throws ApiException {
            ApiResponse<PipelineListRecentPipelinesResponse> localVarResp = listRecentPipelinesWithHttpInfo(orgSlug, pageToken, mine);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listRecentPipelines request with HTTP info returned
         * @return ApiResponse&lt;PipelineListRecentPipelinesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A sequence of pipelines. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PipelineListRecentPipelinesResponse> executeWithHttpInfo() throws ApiException {
            return listRecentPipelinesWithHttpInfo(orgSlug, pageToken, mine);
        }

        /**
         * Execute listRecentPipelines request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A sequence of pipelines. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PipelineListRecentPipelinesResponse> _callback) throws ApiException {
            return listRecentPipelinesAsync(orgSlug, pageToken, mine, _callback);
        }
    }

    /**
     * Get a list of pipelines
     * Returns all pipelines for the most recently built projects (max 250) you follow in an organization.
     * @return ListRecentPipelinesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A sequence of pipelines. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ListRecentPipelinesRequestBuilder listRecentPipelines() throws IllegalArgumentException {
        return new ListRecentPipelinesRequestBuilder();
    }
    private okhttp3.Call listUserPipelinesCall(String projectSlug, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{project-slug}/pipeline/mine"
            .replace("{" + "project-slug" + "}", localVarApiClient.escapeString(projectSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page-token", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUserPipelinesValidateBeforeCall(String projectSlug, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling listUserPipelines(Async)");
        }

        return listUserPipelinesCall(projectSlug, pageToken, _callback);

    }


    private ApiResponse<PipelineListUserPipelinesResponse> listUserPipelinesWithHttpInfo(String projectSlug, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listUserPipelinesValidateBeforeCall(projectSlug, pageToken, null);
        Type localVarReturnType = new TypeToken<PipelineListUserPipelinesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listUserPipelinesAsync(String projectSlug, String pageToken, final ApiCallback<PipelineListUserPipelinesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUserPipelinesValidateBeforeCall(projectSlug, pageToken, _callback);
        Type localVarReturnType = new TypeToken<PipelineListUserPipelinesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListUserPipelinesRequestBuilder {
        private final String projectSlug;
        private String pageToken;

        private ListUserPipelinesRequestBuilder(String projectSlug) {
            this.projectSlug = projectSlug;
        }

        /**
         * Set pageToken
         * @param pageToken A token to retrieve the next page of results. (optional)
         * @return ListUserPipelinesRequestBuilder
         */
        public ListUserPipelinesRequestBuilder pageToken(String pageToken) {
            this.pageToken = pageToken;
            return this;
        }
        
        /**
         * Build call for listUserPipelines
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A sequence of pipelines. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listUserPipelinesCall(projectSlug, pageToken, _callback);
        }


        /**
         * Execute listUserPipelines request
         * @return PipelineListUserPipelinesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A sequence of pipelines. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public PipelineListUserPipelinesResponse execute() throws ApiException {
            ApiResponse<PipelineListUserPipelinesResponse> localVarResp = listUserPipelinesWithHttpInfo(projectSlug, pageToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listUserPipelines request with HTTP info returned
         * @return ApiResponse&lt;PipelineListUserPipelinesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A sequence of pipelines. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PipelineListUserPipelinesResponse> executeWithHttpInfo() throws ApiException {
            return listUserPipelinesWithHttpInfo(projectSlug, pageToken);
        }

        /**
         * Execute listUserPipelines request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A sequence of pipelines. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PipelineListUserPipelinesResponse> _callback) throws ApiException {
            return listUserPipelinesAsync(projectSlug, pageToken, _callback);
        }
    }

    /**
     * Get your pipelines
     * Returns a sequence of all pipelines for this project triggered by the user.
     * @param projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings). (required)
     * @return ListUserPipelinesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A sequence of pipelines. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ListUserPipelinesRequestBuilder listUserPipelines(String projectSlug) throws IllegalArgumentException {
        if (projectSlug == null) throw new IllegalArgumentException("\"projectSlug\" is required but got null");
            

        return new ListUserPipelinesRequestBuilder(projectSlug);
    }
    private okhttp3.Call listWorkflowsCall(UUID pipelineId, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pipeline/{pipeline-id}/workflow"
            .replace("{" + "pipeline-id" + "}", localVarApiClient.escapeString(pipelineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page-token", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listWorkflowsValidateBeforeCall(UUID pipelineId, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pipelineId' is set
        if (pipelineId == null) {
            throw new ApiException("Missing the required parameter 'pipelineId' when calling listWorkflows(Async)");
        }

        return listWorkflowsCall(pipelineId, pageToken, _callback);

    }


    private ApiResponse<PipelineListWorkflowsResponse> listWorkflowsWithHttpInfo(UUID pipelineId, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listWorkflowsValidateBeforeCall(pipelineId, pageToken, null);
        Type localVarReturnType = new TypeToken<PipelineListWorkflowsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listWorkflowsAsync(UUID pipelineId, String pageToken, final ApiCallback<PipelineListWorkflowsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listWorkflowsValidateBeforeCall(pipelineId, pageToken, _callback);
        Type localVarReturnType = new TypeToken<PipelineListWorkflowsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListWorkflowsRequestBuilder {
        private final UUID pipelineId;
        private String pageToken;

        private ListWorkflowsRequestBuilder(UUID pipelineId) {
            this.pipelineId = pipelineId;
        }

        /**
         * Set pageToken
         * @param pageToken A token to retrieve the next page of results. (optional)
         * @return ListWorkflowsRequestBuilder
         */
        public ListWorkflowsRequestBuilder pageToken(String pageToken) {
            this.pageToken = pageToken;
            return this;
        }
        
        /**
         * Build call for listWorkflows
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paginated list of workflow objects. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listWorkflowsCall(pipelineId, pageToken, _callback);
        }


        /**
         * Execute listWorkflows request
         * @return PipelineListWorkflowsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paginated list of workflow objects. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public PipelineListWorkflowsResponse execute() throws ApiException {
            ApiResponse<PipelineListWorkflowsResponse> localVarResp = listWorkflowsWithHttpInfo(pipelineId, pageToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listWorkflows request with HTTP info returned
         * @return ApiResponse&lt;PipelineListWorkflowsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paginated list of workflow objects. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PipelineListWorkflowsResponse> executeWithHttpInfo() throws ApiException {
            return listWorkflowsWithHttpInfo(pipelineId, pageToken);
        }

        /**
         * Execute listWorkflows request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paginated list of workflow objects. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PipelineListWorkflowsResponse> _callback) throws ApiException {
            return listWorkflowsAsync(pipelineId, pageToken, _callback);
        }
    }

    /**
     * Get a pipeline&#39;s workflows
     * Returns a paginated list of workflows by pipeline ID.
     * @param pipelineId The unique ID of the pipeline. (required)
     * @return ListWorkflowsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paginated list of workflow objects. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ListWorkflowsRequestBuilder listWorkflows(UUID pipelineId) throws IllegalArgumentException {
        if (pipelineId == null) throw new IllegalArgumentException("\"pipelineId\" is required but got null");
            

        return new ListWorkflowsRequestBuilder(pipelineId);
    }
    private okhttp3.Call triggerNewPipelineCall(String projectSlug, PipelineTriggerNewPipelineRequest pipelineTriggerNewPipelineRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pipelineTriggerNewPipelineRequest;

        // create path and map variables
        String localVarPath = "/project/{project-slug}/pipeline"
            .replace("{" + "project-slug" + "}", localVarApiClient.escapeString(projectSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call triggerNewPipelineValidateBeforeCall(String projectSlug, PipelineTriggerNewPipelineRequest pipelineTriggerNewPipelineRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling triggerNewPipeline(Async)");
        }

        return triggerNewPipelineCall(projectSlug, pipelineTriggerNewPipelineRequest, _callback);

    }


    private ApiResponse<PipelineTriggerNewPipelineResponse> triggerNewPipelineWithHttpInfo(String projectSlug, PipelineTriggerNewPipelineRequest pipelineTriggerNewPipelineRequest) throws ApiException {
        okhttp3.Call localVarCall = triggerNewPipelineValidateBeforeCall(projectSlug, pipelineTriggerNewPipelineRequest, null);
        Type localVarReturnType = new TypeToken<PipelineTriggerNewPipelineResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call triggerNewPipelineAsync(String projectSlug, PipelineTriggerNewPipelineRequest pipelineTriggerNewPipelineRequest, final ApiCallback<PipelineTriggerNewPipelineResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = triggerNewPipelineValidateBeforeCall(projectSlug, pipelineTriggerNewPipelineRequest, _callback);
        Type localVarReturnType = new TypeToken<PipelineTriggerNewPipelineResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class TriggerNewPipelineRequestBuilder {
        private final String projectSlug;
        private Map<String, Object> parameters;
        private String branch;
        private String tag;

        private TriggerNewPipelineRequestBuilder(String projectSlug) {
            this.projectSlug = projectSlug;
        }

        /**
         * Set parameters
         * @param parameters An object containing pipeline parameters and their values. (optional)
         * @return TriggerNewPipelineRequestBuilder
         */
        public TriggerNewPipelineRequestBuilder parameters(Map<String, Object> parameters) {
            this.parameters = parameters;
            return this;
        }
        
        /**
         * Set branch
         * @param branch The branch where the pipeline ran. The HEAD commit on this branch was used for the pipeline. Note that &#x60;branch&#x60; and &#x60;tag&#x60; are mutually exclusive. To trigger a pipeline for a PR by number use &#x60;pull/&lt;number&gt;/head&#x60; for the PR ref or &#x60;pull/&lt;number&gt;/merge&#x60; for the merge ref (GitHub only). (optional)
         * @return TriggerNewPipelineRequestBuilder
         */
        public TriggerNewPipelineRequestBuilder branch(String branch) {
            this.branch = branch;
            return this;
        }
        
        /**
         * Set tag
         * @param tag The tag used by the pipeline. The commit that this tag points to was used for the pipeline. Note that &#x60;branch&#x60; and &#x60;tag&#x60; are mutually exclusive. (optional)
         * @return TriggerNewPipelineRequestBuilder
         */
        public TriggerNewPipelineRequestBuilder tag(String tag) {
            this.tag = tag;
            return this;
        }
        
        /**
         * Build call for triggerNewPipeline
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created pipeline. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PipelineTriggerNewPipelineRequest pipelineTriggerNewPipelineRequest = buildBodyParams();
            return triggerNewPipelineCall(projectSlug, pipelineTriggerNewPipelineRequest, _callback);
        }

        private PipelineTriggerNewPipelineRequest buildBodyParams() {
            PipelineTriggerNewPipelineRequest pipelineTriggerNewPipelineRequest = new PipelineTriggerNewPipelineRequest();
            pipelineTriggerNewPipelineRequest.parameters(this.parameters);
            pipelineTriggerNewPipelineRequest.branch(this.branch);
            pipelineTriggerNewPipelineRequest.tag(this.tag);
            return pipelineTriggerNewPipelineRequest;
        }

        /**
         * Execute triggerNewPipeline request
         * @return PipelineTriggerNewPipelineResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created pipeline. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public PipelineTriggerNewPipelineResponse execute() throws ApiException {
            PipelineTriggerNewPipelineRequest pipelineTriggerNewPipelineRequest = buildBodyParams();
            ApiResponse<PipelineTriggerNewPipelineResponse> localVarResp = triggerNewPipelineWithHttpInfo(projectSlug, pipelineTriggerNewPipelineRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute triggerNewPipeline request with HTTP info returned
         * @return ApiResponse&lt;PipelineTriggerNewPipelineResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created pipeline. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PipelineTriggerNewPipelineResponse> executeWithHttpInfo() throws ApiException {
            PipelineTriggerNewPipelineRequest pipelineTriggerNewPipelineRequest = buildBodyParams();
            return triggerNewPipelineWithHttpInfo(projectSlug, pipelineTriggerNewPipelineRequest);
        }

        /**
         * Execute triggerNewPipeline request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created pipeline. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PipelineTriggerNewPipelineResponse> _callback) throws ApiException {
            PipelineTriggerNewPipelineRequest pipelineTriggerNewPipelineRequest = buildBodyParams();
            return triggerNewPipelineAsync(projectSlug, pipelineTriggerNewPipelineRequest, _callback);
        }
    }

    /**
     * Trigger a new pipeline
     * Not yet available to projects that use GitLab or GitHub App. Triggers a new pipeline on the project.
     * @param projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings). (required)
     * @return TriggerNewPipelineRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created pipeline. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public TriggerNewPipelineRequestBuilder triggerNewPipeline(String projectSlug) throws IllegalArgumentException {
        if (projectSlug == null) throw new IllegalArgumentException("\"projectSlug\" is required but got null");
            

        return new TriggerNewPipelineRequestBuilder(projectSlug);
    }
}
