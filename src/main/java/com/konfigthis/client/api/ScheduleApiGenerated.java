/*
 * CircleCI API
 * This describes the resources that make up the CircleCI API v2.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ScheduleCreateNewScheduleRequest;
import com.konfigthis.client.model.ScheduleCreateNewScheduleRequestTimetable;
import com.konfigthis.client.model.ScheduleCreateNewScheduleResponse;
import com.konfigthis.client.model.ScheduleCreateNewScheduledefaultResponse;
import com.konfigthis.client.model.ScheduleGetAllSchedulesResponse;
import com.konfigthis.client.model.ScheduleGetAllSchedulesdefaultResponse;
import com.konfigthis.client.model.ScheduleGetByIdResponse;
import com.konfigthis.client.model.ScheduleGetByIddefaultResponse;
import com.konfigthis.client.model.ScheduleRemoveByIdResponse;
import com.konfigthis.client.model.ScheduleRemoveByIddefaultResponse;
import com.konfigthis.client.model.ScheduleUpdateScheduleRequest;
import com.konfigthis.client.model.ScheduleUpdateScheduleRequestTimetable;
import com.konfigthis.client.model.ScheduleUpdateScheduleResponse;
import com.konfigthis.client.model.ScheduleUpdateScheduledefaultResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ScheduleApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ScheduleApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ScheduleApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewScheduleCall(String projectSlug, ScheduleCreateNewScheduleRequest scheduleCreateNewScheduleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = scheduleCreateNewScheduleRequest;

        // create path and map variables
        String localVarPath = "/project/{project-slug}/schedule"
            .replace("{" + "project-slug" + "}", localVarApiClient.escapeString(projectSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewScheduleValidateBeforeCall(String projectSlug, ScheduleCreateNewScheduleRequest scheduleCreateNewScheduleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling createNewSchedule(Async)");
        }

        return createNewScheduleCall(projectSlug, scheduleCreateNewScheduleRequest, _callback);

    }


    private ApiResponse<ScheduleCreateNewScheduleResponse> createNewScheduleWithHttpInfo(String projectSlug, ScheduleCreateNewScheduleRequest scheduleCreateNewScheduleRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewScheduleValidateBeforeCall(projectSlug, scheduleCreateNewScheduleRequest, null);
        Type localVarReturnType = new TypeToken<ScheduleCreateNewScheduleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewScheduleAsync(String projectSlug, ScheduleCreateNewScheduleRequest scheduleCreateNewScheduleRequest, final ApiCallback<ScheduleCreateNewScheduleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewScheduleValidateBeforeCall(projectSlug, scheduleCreateNewScheduleRequest, _callback);
        Type localVarReturnType = new TypeToken<ScheduleCreateNewScheduleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewScheduleRequestBuilder {
        private final Map<String, Object> parameters;
        private final String name;
        private final ScheduleCreateNewScheduleRequestTimetable timetable;
        private final String attributionActor;
        private final String projectSlug;
        private String description;

        private CreateNewScheduleRequestBuilder(Map<String, Object> parameters, String name, ScheduleCreateNewScheduleRequestTimetable timetable, String attributionActor, String projectSlug) {
            this.parameters = parameters;
            this.name = name;
            this.timetable = timetable;
            this.attributionActor = attributionActor;
            this.projectSlug = projectSlug;
        }

        /**
         * Set description
         * @param description Description of the schedule. (optional)
         * @return CreateNewScheduleRequestBuilder
         */
        public CreateNewScheduleRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Build call for createNewSchedule
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A schedule object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ScheduleCreateNewScheduleRequest scheduleCreateNewScheduleRequest = buildBodyParams();
            return createNewScheduleCall(projectSlug, scheduleCreateNewScheduleRequest, _callback);
        }

        private ScheduleCreateNewScheduleRequest buildBodyParams() {
            ScheduleCreateNewScheduleRequest scheduleCreateNewScheduleRequest = new ScheduleCreateNewScheduleRequest();
            scheduleCreateNewScheduleRequest.description(this.description);
            scheduleCreateNewScheduleRequest.parameters(this.parameters);
            scheduleCreateNewScheduleRequest.name(this.name);
            scheduleCreateNewScheduleRequest.timetable(this.timetable);
            if (this.attributionActor != null)
            scheduleCreateNewScheduleRequest.attributionActor(ScheduleCreateNewScheduleRequest.AttributionActorEnum.fromValue(this.attributionActor));
            return scheduleCreateNewScheduleRequest;
        }

        /**
         * Execute createNewSchedule request
         * @return ScheduleCreateNewScheduleResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A schedule object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ScheduleCreateNewScheduleResponse execute() throws ApiException {
            ScheduleCreateNewScheduleRequest scheduleCreateNewScheduleRequest = buildBodyParams();
            ApiResponse<ScheduleCreateNewScheduleResponse> localVarResp = createNewScheduleWithHttpInfo(projectSlug, scheduleCreateNewScheduleRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewSchedule request with HTTP info returned
         * @return ApiResponse&lt;ScheduleCreateNewScheduleResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A schedule object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ScheduleCreateNewScheduleResponse> executeWithHttpInfo() throws ApiException {
            ScheduleCreateNewScheduleRequest scheduleCreateNewScheduleRequest = buildBodyParams();
            return createNewScheduleWithHttpInfo(projectSlug, scheduleCreateNewScheduleRequest);
        }

        /**
         * Execute createNewSchedule request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A schedule object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ScheduleCreateNewScheduleResponse> _callback) throws ApiException {
            ScheduleCreateNewScheduleRequest scheduleCreateNewScheduleRequest = buildBodyParams();
            return createNewScheduleAsync(projectSlug, scheduleCreateNewScheduleRequest, _callback);
        }
    }

    /**
     * Create a schedule
     * Not yet available to projects that use GitLab or GitHub App. Creates a schedule and returns the created schedule.
     * @param projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings). (required)
     * @return CreateNewScheduleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A schedule object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewScheduleRequestBuilder createNewSchedule(Map<String, Object> parameters, String name, ScheduleCreateNewScheduleRequestTimetable timetable, String attributionActor, String projectSlug) throws IllegalArgumentException {
        if (parameters == null) throw new IllegalArgumentException("\"parameters\" is required but got null");
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (timetable == null) throw new IllegalArgumentException("\"timetable\" is required but got null");
        if (attributionActor == null) throw new IllegalArgumentException("\"attributionActor\" is required but got null");
            

        if (projectSlug == null) throw new IllegalArgumentException("\"projectSlug\" is required but got null");
            

        return new CreateNewScheduleRequestBuilder(parameters, name, timetable, attributionActor, projectSlug);
    }
    private okhttp3.Call getAllSchedulesCall(String projectSlug, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{project-slug}/schedule"
            .replace("{" + "project-slug" + "}", localVarApiClient.escapeString(projectSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page-token", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllSchedulesValidateBeforeCall(String projectSlug, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling getAllSchedules(Async)");
        }

        return getAllSchedulesCall(projectSlug, pageToken, _callback);

    }


    private ApiResponse<ScheduleGetAllSchedulesResponse> getAllSchedulesWithHttpInfo(String projectSlug, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = getAllSchedulesValidateBeforeCall(projectSlug, pageToken, null);
        Type localVarReturnType = new TypeToken<ScheduleGetAllSchedulesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllSchedulesAsync(String projectSlug, String pageToken, final ApiCallback<ScheduleGetAllSchedulesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllSchedulesValidateBeforeCall(projectSlug, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ScheduleGetAllSchedulesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllSchedulesRequestBuilder {
        private final String projectSlug;
        private String pageToken;

        private GetAllSchedulesRequestBuilder(String projectSlug) {
            this.projectSlug = projectSlug;
        }

        /**
         * Set pageToken
         * @param pageToken A token to retrieve the next page of results. (optional)
         * @return GetAllSchedulesRequestBuilder
         */
        public GetAllSchedulesRequestBuilder pageToken(String pageToken) {
            this.pageToken = pageToken;
            return this;
        }
        
        /**
         * Build call for getAllSchedules
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A sequence of schedules. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllSchedulesCall(projectSlug, pageToken, _callback);
        }


        /**
         * Execute getAllSchedules request
         * @return ScheduleGetAllSchedulesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A sequence of schedules. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ScheduleGetAllSchedulesResponse execute() throws ApiException {
            ApiResponse<ScheduleGetAllSchedulesResponse> localVarResp = getAllSchedulesWithHttpInfo(projectSlug, pageToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllSchedules request with HTTP info returned
         * @return ApiResponse&lt;ScheduleGetAllSchedulesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A sequence of schedules. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ScheduleGetAllSchedulesResponse> executeWithHttpInfo() throws ApiException {
            return getAllSchedulesWithHttpInfo(projectSlug, pageToken);
        }

        /**
         * Execute getAllSchedules request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A sequence of schedules. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ScheduleGetAllSchedulesResponse> _callback) throws ApiException {
            return getAllSchedulesAsync(projectSlug, pageToken, _callback);
        }
    }

    /**
     * Get all schedules
     * Returns all schedules for this project.
     * @param projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings). (required)
     * @return GetAllSchedulesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A sequence of schedules. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllSchedulesRequestBuilder getAllSchedules(String projectSlug) throws IllegalArgumentException {
        if (projectSlug == null) throw new IllegalArgumentException("\"projectSlug\" is required but got null");
            

        return new GetAllSchedulesRequestBuilder(projectSlug);
    }
    private okhttp3.Call getByIdCall(UUID scheduleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedule/{schedule-id}"
            .replace("{" + "schedule-id" + "}", localVarApiClient.escapeString(scheduleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(UUID scheduleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scheduleId' is set
        if (scheduleId == null) {
            throw new ApiException("Missing the required parameter 'scheduleId' when calling getById(Async)");
        }

        return getByIdCall(scheduleId, _callback);

    }


    private ApiResponse<ScheduleGetByIdResponse> getByIdWithHttpInfo(UUID scheduleId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(scheduleId, null);
        Type localVarReturnType = new TypeToken<ScheduleGetByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(UUID scheduleId, final ApiCallback<ScheduleGetByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(scheduleId, _callback);
        Type localVarReturnType = new TypeToken<ScheduleGetByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final UUID scheduleId;

        private GetByIdRequestBuilder(UUID scheduleId) {
            this.scheduleId = scheduleId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A schedule object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(scheduleId, _callback);
        }


        /**
         * Execute getById request
         * @return ScheduleGetByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A schedule object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ScheduleGetByIdResponse execute() throws ApiException {
            ApiResponse<ScheduleGetByIdResponse> localVarResp = getByIdWithHttpInfo(scheduleId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;ScheduleGetByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A schedule object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ScheduleGetByIdResponse> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(scheduleId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A schedule object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ScheduleGetByIdResponse> _callback) throws ApiException {
            return getByIdAsync(scheduleId, _callback);
        }
    }

    /**
     * Get a schedule
     * Get a schedule by id.
     * @param scheduleId The unique ID of the schedule. (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A schedule object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(UUID scheduleId) throws IllegalArgumentException {
        if (scheduleId == null) throw new IllegalArgumentException("\"scheduleId\" is required but got null");
            

        return new GetByIdRequestBuilder(scheduleId);
    }
    private okhttp3.Call removeByIdCall(UUID scheduleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedule/{schedule-id}"
            .replace("{" + "schedule-id" + "}", localVarApiClient.escapeString(scheduleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeByIdValidateBeforeCall(UUID scheduleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scheduleId' is set
        if (scheduleId == null) {
            throw new ApiException("Missing the required parameter 'scheduleId' when calling removeById(Async)");
        }

        return removeByIdCall(scheduleId, _callback);

    }


    private ApiResponse<ScheduleRemoveByIdResponse> removeByIdWithHttpInfo(UUID scheduleId) throws ApiException {
        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(scheduleId, null);
        Type localVarReturnType = new TypeToken<ScheduleRemoveByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeByIdAsync(UUID scheduleId, final ApiCallback<ScheduleRemoveByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(scheduleId, _callback);
        Type localVarReturnType = new TypeToken<ScheduleRemoveByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveByIdRequestBuilder {
        private final UUID scheduleId;

        private RemoveByIdRequestBuilder(UUID scheduleId) {
            this.scheduleId = scheduleId;
        }

        /**
         * Build call for removeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A confirmation message. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeByIdCall(scheduleId, _callback);
        }


        /**
         * Execute removeById request
         * @return ScheduleRemoveByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A confirmation message. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ScheduleRemoveByIdResponse execute() throws ApiException {
            ApiResponse<ScheduleRemoveByIdResponse> localVarResp = removeByIdWithHttpInfo(scheduleId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeById request with HTTP info returned
         * @return ApiResponse&lt;ScheduleRemoveByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A confirmation message. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ScheduleRemoveByIdResponse> executeWithHttpInfo() throws ApiException {
            return removeByIdWithHttpInfo(scheduleId);
        }

        /**
         * Execute removeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A confirmation message. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ScheduleRemoveByIdResponse> _callback) throws ApiException {
            return removeByIdAsync(scheduleId, _callback);
        }
    }

    /**
     * Delete a schedule
     * Not yet available to projects that use GitLab or GitHub App. Deletes the schedule by id.
     * @param scheduleId The unique ID of the schedule. (required)
     * @return RemoveByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A confirmation message. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveByIdRequestBuilder removeById(UUID scheduleId) throws IllegalArgumentException {
        if (scheduleId == null) throw new IllegalArgumentException("\"scheduleId\" is required but got null");
            

        return new RemoveByIdRequestBuilder(scheduleId);
    }
    private okhttp3.Call updateScheduleCall(UUID scheduleId, ScheduleUpdateScheduleRequest scheduleUpdateScheduleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = scheduleUpdateScheduleRequest;

        // create path and map variables
        String localVarPath = "/schedule/{schedule-id}"
            .replace("{" + "schedule-id" + "}", localVarApiClient.escapeString(scheduleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateScheduleValidateBeforeCall(UUID scheduleId, ScheduleUpdateScheduleRequest scheduleUpdateScheduleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scheduleId' is set
        if (scheduleId == null) {
            throw new ApiException("Missing the required parameter 'scheduleId' when calling updateSchedule(Async)");
        }

        return updateScheduleCall(scheduleId, scheduleUpdateScheduleRequest, _callback);

    }


    private ApiResponse<ScheduleUpdateScheduleResponse> updateScheduleWithHttpInfo(UUID scheduleId, ScheduleUpdateScheduleRequest scheduleUpdateScheduleRequest) throws ApiException {
        okhttp3.Call localVarCall = updateScheduleValidateBeforeCall(scheduleId, scheduleUpdateScheduleRequest, null);
        Type localVarReturnType = new TypeToken<ScheduleUpdateScheduleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateScheduleAsync(UUID scheduleId, ScheduleUpdateScheduleRequest scheduleUpdateScheduleRequest, final ApiCallback<ScheduleUpdateScheduleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateScheduleValidateBeforeCall(scheduleId, scheduleUpdateScheduleRequest, _callback);
        Type localVarReturnType = new TypeToken<ScheduleUpdateScheduleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateScheduleRequestBuilder {
        private final UUID scheduleId;
        private String description;
        private Map<String, Object> parameters;
        private String name;
        private ScheduleUpdateScheduleRequestTimetable timetable;
        private String attributionActor;

        private UpdateScheduleRequestBuilder(UUID scheduleId) {
            this.scheduleId = scheduleId;
        }

        /**
         * Set description
         * @param description Description of the schedule. (optional)
         * @return UpdateScheduleRequestBuilder
         */
        public UpdateScheduleRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set parameters
         * @param parameters Pipeline parameters represented as key-value pairs. Must contain branch or tag. (optional)
         * @return UpdateScheduleRequestBuilder
         */
        public UpdateScheduleRequestBuilder parameters(Map<String, Object> parameters) {
            this.parameters = parameters;
            return this;
        }
        
        /**
         * Set name
         * @param name Name of the schedule. (optional)
         * @return UpdateScheduleRequestBuilder
         */
        public UpdateScheduleRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set timetable
         * @param timetable  (optional)
         * @return UpdateScheduleRequestBuilder
         */
        public UpdateScheduleRequestBuilder timetable(ScheduleUpdateScheduleRequestTimetable timetable) {
            this.timetable = timetable;
            return this;
        }
        
        /**
         * Set attributionActor
         * @param attributionActor The attribution-actor of the scheduled pipeline. (optional)
         * @return UpdateScheduleRequestBuilder
         */
        public UpdateScheduleRequestBuilder attributionActor(String attributionActor) {
            this.attributionActor = attributionActor;
            return this;
        }
        
        /**
         * Build call for updateSchedule
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A schedule object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ScheduleUpdateScheduleRequest scheduleUpdateScheduleRequest = buildBodyParams();
            return updateScheduleCall(scheduleId, scheduleUpdateScheduleRequest, _callback);
        }

        private ScheduleUpdateScheduleRequest buildBodyParams() {
            ScheduleUpdateScheduleRequest scheduleUpdateScheduleRequest = new ScheduleUpdateScheduleRequest();
            scheduleUpdateScheduleRequest.description(this.description);
            scheduleUpdateScheduleRequest.parameters(this.parameters);
            scheduleUpdateScheduleRequest.name(this.name);
            scheduleUpdateScheduleRequest.timetable(this.timetable);
            if (this.attributionActor != null)
            scheduleUpdateScheduleRequest.attributionActor(ScheduleUpdateScheduleRequest.AttributionActorEnum.fromValue(this.attributionActor));
            return scheduleUpdateScheduleRequest;
        }

        /**
         * Execute updateSchedule request
         * @return ScheduleUpdateScheduleResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A schedule object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ScheduleUpdateScheduleResponse execute() throws ApiException {
            ScheduleUpdateScheduleRequest scheduleUpdateScheduleRequest = buildBodyParams();
            ApiResponse<ScheduleUpdateScheduleResponse> localVarResp = updateScheduleWithHttpInfo(scheduleId, scheduleUpdateScheduleRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateSchedule request with HTTP info returned
         * @return ApiResponse&lt;ScheduleUpdateScheduleResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A schedule object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ScheduleUpdateScheduleResponse> executeWithHttpInfo() throws ApiException {
            ScheduleUpdateScheduleRequest scheduleUpdateScheduleRequest = buildBodyParams();
            return updateScheduleWithHttpInfo(scheduleId, scheduleUpdateScheduleRequest);
        }

        /**
         * Execute updateSchedule request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A schedule object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ScheduleUpdateScheduleResponse> _callback) throws ApiException {
            ScheduleUpdateScheduleRequest scheduleUpdateScheduleRequest = buildBodyParams();
            return updateScheduleAsync(scheduleId, scheduleUpdateScheduleRequest, _callback);
        }
    }

    /**
     * Update a schedule
     * Not yet available to projects that use GitLab or GitHub App. Updates a schedule and returns the updated schedule.
     * @param scheduleId The unique ID of the schedule. (required)
     * @return UpdateScheduleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A schedule object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateScheduleRequestBuilder updateSchedule(UUID scheduleId) throws IllegalArgumentException {
        if (scheduleId == null) throw new IllegalArgumentException("\"scheduleId\" is required but got null");
            

        return new UpdateScheduleRequestBuilder(scheduleId);
    }
}
