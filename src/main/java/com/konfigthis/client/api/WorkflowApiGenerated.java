/*
 * CircleCI API
 * This describes the resources that make up the CircleCI API v2.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.util.UUID;
import com.konfigthis.client.model.WorkflowApproveJobResponse;
import com.konfigthis.client.model.WorkflowApproveJobdefaultResponse;
import com.konfigthis.client.model.WorkflowCancelWorkflowResponse;
import com.konfigthis.client.model.WorkflowCancelWorkflowdefaultResponse;
import com.konfigthis.client.model.WorkflowGetByIdResponse;
import com.konfigthis.client.model.WorkflowGetByIddefaultResponse;
import com.konfigthis.client.model.WorkflowGetJobsResponse;
import com.konfigthis.client.model.WorkflowGetJobsdefaultResponse;
import com.konfigthis.client.model.WorkflowRerunWorkflowRequest;
import com.konfigthis.client.model.WorkflowRerunWorkflowResponse;
import com.konfigthis.client.model.WorkflowRerunWorkflowdefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WorkflowApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WorkflowApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public WorkflowApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call approveJobCall(UUID approvalRequestId, UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workflow/{id}/approve/{approval_request_id}"
            .replace("{" + "approval_request_id" + "}", localVarApiClient.escapeString(approvalRequestId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call approveJobValidateBeforeCall(UUID approvalRequestId, UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'approvalRequestId' is set
        if (approvalRequestId == null) {
            throw new ApiException("Missing the required parameter 'approvalRequestId' when calling approveJob(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling approveJob(Async)");
        }

        return approveJobCall(approvalRequestId, id, _callback);

    }


    private ApiResponse<WorkflowApproveJobResponse> approveJobWithHttpInfo(UUID approvalRequestId, UUID id) throws ApiException {
        okhttp3.Call localVarCall = approveJobValidateBeforeCall(approvalRequestId, id, null);
        Type localVarReturnType = new TypeToken<WorkflowApproveJobResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call approveJobAsync(UUID approvalRequestId, UUID id, final ApiCallback<WorkflowApproveJobResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = approveJobValidateBeforeCall(approvalRequestId, id, _callback);
        Type localVarReturnType = new TypeToken<WorkflowApproveJobResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ApproveJobRequestBuilder {
        private final UUID approvalRequestId;
        private final UUID id;

        private ApproveJobRequestBuilder(UUID approvalRequestId, UUID id) {
            this.approvalRequestId = approvalRequestId;
            this.id = id;
        }

        /**
         * Build call for approveJob
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> A confirmation message. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return approveJobCall(approvalRequestId, id, _callback);
        }


        /**
         * Execute approveJob request
         * @return WorkflowApproveJobResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> A confirmation message. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public WorkflowApproveJobResponse execute() throws ApiException {
            ApiResponse<WorkflowApproveJobResponse> localVarResp = approveJobWithHttpInfo(approvalRequestId, id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute approveJob request with HTTP info returned
         * @return ApiResponse&lt;WorkflowApproveJobResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> A confirmation message. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkflowApproveJobResponse> executeWithHttpInfo() throws ApiException {
            return approveJobWithHttpInfo(approvalRequestId, id);
        }

        /**
         * Execute approveJob request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> A confirmation message. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkflowApproveJobResponse> _callback) throws ApiException {
            return approveJobAsync(approvalRequestId, id, _callback);
        }
    }

    /**
     * Approve a job
     * Approves a pending approval job in a workflow.
     * @param approvalRequestId The ID of the job being approved. (required)
     * @param id The unique ID of the workflow. (required)
     * @return ApproveJobRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A confirmation message. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApproveJobRequestBuilder approveJob(UUID approvalRequestId, UUID id) throws IllegalArgumentException {
        if (approvalRequestId == null) throw new IllegalArgumentException("\"approvalRequestId\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new ApproveJobRequestBuilder(approvalRequestId, id);
    }
    private okhttp3.Call cancelWorkflowCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workflow/{id}/cancel"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelWorkflowValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling cancelWorkflow(Async)");
        }

        return cancelWorkflowCall(id, _callback);

    }


    private ApiResponse<WorkflowCancelWorkflowResponse> cancelWorkflowWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = cancelWorkflowValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<WorkflowCancelWorkflowResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call cancelWorkflowAsync(UUID id, final ApiCallback<WorkflowCancelWorkflowResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelWorkflowValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<WorkflowCancelWorkflowResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CancelWorkflowRequestBuilder {
        private final UUID id;

        private CancelWorkflowRequestBuilder(UUID id) {
            this.id = id;
        }

        /**
         * Build call for cancelWorkflow
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> A confirmation message. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return cancelWorkflowCall(id, _callback);
        }


        /**
         * Execute cancelWorkflow request
         * @return WorkflowCancelWorkflowResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> A confirmation message. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public WorkflowCancelWorkflowResponse execute() throws ApiException {
            ApiResponse<WorkflowCancelWorkflowResponse> localVarResp = cancelWorkflowWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute cancelWorkflow request with HTTP info returned
         * @return ApiResponse&lt;WorkflowCancelWorkflowResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> A confirmation message. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkflowCancelWorkflowResponse> executeWithHttpInfo() throws ApiException {
            return cancelWorkflowWithHttpInfo(id);
        }

        /**
         * Execute cancelWorkflow request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> A confirmation message. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkflowCancelWorkflowResponse> _callback) throws ApiException {
            return cancelWorkflowAsync(id, _callback);
        }
    }

    /**
     * Cancel a workflow
     * Cancels a running workflow.
     * @param id The unique ID of the workflow. (required)
     * @return CancelWorkflowRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A confirmation message. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public CancelWorkflowRequestBuilder cancelWorkflow(UUID id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new CancelWorkflowRequestBuilder(id);
    }
    private okhttp3.Call getByIdCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workflow/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getById(Async)");
        }

        return getByIdCall(id, _callback);

    }


    private ApiResponse<WorkflowGetByIdResponse> getByIdWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<WorkflowGetByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(UUID id, final ApiCallback<WorkflowGetByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<WorkflowGetByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final UUID id;

        private GetByIdRequestBuilder(UUID id) {
            this.id = id;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A workflow object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(id, _callback);
        }


        /**
         * Execute getById request
         * @return WorkflowGetByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A workflow object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public WorkflowGetByIdResponse execute() throws ApiException {
            ApiResponse<WorkflowGetByIdResponse> localVarResp = getByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;WorkflowGetByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A workflow object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkflowGetByIdResponse> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(id);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A workflow object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkflowGetByIdResponse> _callback) throws ApiException {
            return getByIdAsync(id, _callback);
        }
    }

    /**
     * Get a workflow
     * Returns summary fields of a workflow by ID.
     * @param id The unique ID of the workflow. (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A workflow object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(UUID id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetByIdRequestBuilder(id);
    }
    private okhttp3.Call getJobsCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workflow/{id}/job"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobsValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getJobs(Async)");
        }

        return getJobsCall(id, _callback);

    }


    private ApiResponse<WorkflowGetJobsResponse> getJobsWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = getJobsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<WorkflowGetJobsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getJobsAsync(UUID id, final ApiCallback<WorkflowGetJobsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<WorkflowGetJobsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetJobsRequestBuilder {
        private final UUID id;

        private GetJobsRequestBuilder(UUID id) {
            this.id = id;
        }

        /**
         * Build call for getJobs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paginated sequence of jobs. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getJobsCall(id, _callback);
        }


        /**
         * Execute getJobs request
         * @return WorkflowGetJobsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paginated sequence of jobs. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public WorkflowGetJobsResponse execute() throws ApiException {
            ApiResponse<WorkflowGetJobsResponse> localVarResp = getJobsWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getJobs request with HTTP info returned
         * @return ApiResponse&lt;WorkflowGetJobsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paginated sequence of jobs. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkflowGetJobsResponse> executeWithHttpInfo() throws ApiException {
            return getJobsWithHttpInfo(id);
        }

        /**
         * Execute getJobs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paginated sequence of jobs. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkflowGetJobsResponse> _callback) throws ApiException {
            return getJobsAsync(id, _callback);
        }
    }

    /**
     * Get a workflow&#39;s jobs
     * Returns a sequence of jobs for a workflow.
     * @param id The unique ID of the workflow. (required)
     * @return GetJobsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paginated sequence of jobs. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public GetJobsRequestBuilder getJobs(UUID id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetJobsRequestBuilder(id);
    }
    private okhttp3.Call rerunWorkflowCall(UUID id, WorkflowRerunWorkflowRequest workflowRerunWorkflowRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workflowRerunWorkflowRequest;

        // create path and map variables
        String localVarPath = "/workflow/{id}/rerun"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rerunWorkflowValidateBeforeCall(UUID id, WorkflowRerunWorkflowRequest workflowRerunWorkflowRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling rerunWorkflow(Async)");
        }

        return rerunWorkflowCall(id, workflowRerunWorkflowRequest, _callback);

    }


    private ApiResponse<WorkflowRerunWorkflowResponse> rerunWorkflowWithHttpInfo(UUID id, WorkflowRerunWorkflowRequest workflowRerunWorkflowRequest) throws ApiException {
        okhttp3.Call localVarCall = rerunWorkflowValidateBeforeCall(id, workflowRerunWorkflowRequest, null);
        Type localVarReturnType = new TypeToken<WorkflowRerunWorkflowResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call rerunWorkflowAsync(UUID id, WorkflowRerunWorkflowRequest workflowRerunWorkflowRequest, final ApiCallback<WorkflowRerunWorkflowResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = rerunWorkflowValidateBeforeCall(id, workflowRerunWorkflowRequest, _callback);
        Type localVarReturnType = new TypeToken<WorkflowRerunWorkflowResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RerunWorkflowRequestBuilder {
        private final UUID id;
        private Boolean enableSsh;
        private Boolean fromFailed;
        private List<UUID> jobs;
        private Boolean sparseTree;

        private RerunWorkflowRequestBuilder(UUID id) {
            this.id = id;
        }

        /**
         * Set enableSsh
         * @param enableSsh Whether to enable SSH access for the triggering user on the newly-rerun job. Requires the jobs parameter to be used and so is mutually exclusive with the from_failed parameter. (optional)
         * @return RerunWorkflowRequestBuilder
         */
        public RerunWorkflowRequestBuilder enableSsh(Boolean enableSsh) {
            this.enableSsh = enableSsh;
            return this;
        }
        
        /**
         * Set fromFailed
         * @param fromFailed Whether to rerun the workflow from the failed job. Mutually exclusive with the jobs parameter. (optional)
         * @return RerunWorkflowRequestBuilder
         */
        public RerunWorkflowRequestBuilder fromFailed(Boolean fromFailed) {
            this.fromFailed = fromFailed;
            return this;
        }
        
        /**
         * Set jobs
         * @param jobs A list of job IDs to rerun. (optional)
         * @return RerunWorkflowRequestBuilder
         */
        public RerunWorkflowRequestBuilder jobs(List<UUID> jobs) {
            this.jobs = jobs;
            return this;
        }
        
        /**
         * Set sparseTree
         * @param sparseTree Completes rerun using sparse trees logic, an optimization for workflows that have disconnected subgraphs. Requires jobs parameter and so is mutually exclusive with the from_failed parameter. (optional)
         * @return RerunWorkflowRequestBuilder
         */
        public RerunWorkflowRequestBuilder sparseTree(Boolean sparseTree) {
            this.sparseTree = sparseTree;
            return this;
        }
        
        /**
         * Build call for rerunWorkflow
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> A confirmation message. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WorkflowRerunWorkflowRequest workflowRerunWorkflowRequest = buildBodyParams();
            return rerunWorkflowCall(id, workflowRerunWorkflowRequest, _callback);
        }

        private WorkflowRerunWorkflowRequest buildBodyParams() {
            WorkflowRerunWorkflowRequest workflowRerunWorkflowRequest = new WorkflowRerunWorkflowRequest();
            workflowRerunWorkflowRequest.enableSsh(this.enableSsh);
            workflowRerunWorkflowRequest.fromFailed(this.fromFailed);
            workflowRerunWorkflowRequest.jobs(this.jobs);
            workflowRerunWorkflowRequest.sparseTree(this.sparseTree);
            return workflowRerunWorkflowRequest;
        }

        /**
         * Execute rerunWorkflow request
         * @return WorkflowRerunWorkflowResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> A confirmation message. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public WorkflowRerunWorkflowResponse execute() throws ApiException {
            WorkflowRerunWorkflowRequest workflowRerunWorkflowRequest = buildBodyParams();
            ApiResponse<WorkflowRerunWorkflowResponse> localVarResp = rerunWorkflowWithHttpInfo(id, workflowRerunWorkflowRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute rerunWorkflow request with HTTP info returned
         * @return ApiResponse&lt;WorkflowRerunWorkflowResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> A confirmation message. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkflowRerunWorkflowResponse> executeWithHttpInfo() throws ApiException {
            WorkflowRerunWorkflowRequest workflowRerunWorkflowRequest = buildBodyParams();
            return rerunWorkflowWithHttpInfo(id, workflowRerunWorkflowRequest);
        }

        /**
         * Execute rerunWorkflow request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> A confirmation message. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkflowRerunWorkflowResponse> _callback) throws ApiException {
            WorkflowRerunWorkflowRequest workflowRerunWorkflowRequest = buildBodyParams();
            return rerunWorkflowAsync(id, workflowRerunWorkflowRequest, _callback);
        }
    }

    /**
     * Rerun a workflow
     * Reruns a workflow.
     * @param id The unique ID of the workflow. (required)
     * @return RerunWorkflowRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A confirmation message. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public RerunWorkflowRequestBuilder rerunWorkflow(UUID id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new RerunWorkflowRequestBuilder(id);
    }
}
