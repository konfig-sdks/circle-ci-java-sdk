/*
 * CircleCI API
 * This describes the resources that make up the CircleCI API v2.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.InsightsGetFlakyTestsResponse;
import com.konfigthis.client.model.InsightsGetFlakyTestsdefaultResponse;
import com.konfigthis.client.model.InsightsGetJobTimeseriesDataResponse;
import com.konfigthis.client.model.InsightsGetJobTimeseriesDatadefaultResponse;
import com.konfigthis.client.model.InsightsGetProjectSummaryMetricsResponse;
import com.konfigthis.client.model.InsightsGetProjectSummaryMetricsdefaultResponse;
import com.konfigthis.client.model.InsightsGetProjectWorkflowJobMetricsResponse;
import com.konfigthis.client.model.InsightsGetProjectWorkflowJobMetricsdefaultResponse;
import com.konfigthis.client.model.InsightsGetProjectWorkflowMetricsResponse;
import com.konfigthis.client.model.InsightsGetProjectWorkflowMetricsdefaultResponse;
import com.konfigthis.client.model.InsightsGetProjectWorkflowTestMetricsResponse;
import com.konfigthis.client.model.InsightsGetProjectWorkflowTestMetricsdefaultResponse;
import com.konfigthis.client.model.InsightsGetRecentWorkflowRunsResponse;
import com.konfigthis.client.model.InsightsGetRecentWorkflowRunsdefaultResponse;
import com.konfigthis.client.model.InsightsGetSummaryMetricsWithTrendsResponse;
import com.konfigthis.client.model.InsightsGetSummaryMetricsWithTrendsdefaultResponse;
import com.konfigthis.client.model.InsightsGetWorkflowSummaryMetricsResponse;
import com.konfigthis.client.model.InsightsGetWorkflowSummaryMetricsdefaultResponse;
import com.konfigthis.client.model.InsightsListProjectBranchesResponse;
import com.konfigthis.client.model.InsightsListProjectBranchesdefaultResponse;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class InsightsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InsightsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public InsightsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getFlakyTestsCall(String projectSlug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/insights/{project-slug}/flaky-tests"
            .replace("{" + "project-slug" + "}", localVarApiClient.escapeString(projectSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFlakyTestsValidateBeforeCall(String projectSlug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling getFlakyTests(Async)");
        }

        return getFlakyTestsCall(projectSlug, _callback);

    }


    private ApiResponse<InsightsGetFlakyTestsResponse> getFlakyTestsWithHttpInfo(String projectSlug) throws ApiException {
        okhttp3.Call localVarCall = getFlakyTestsValidateBeforeCall(projectSlug, null);
        Type localVarReturnType = new TypeToken<InsightsGetFlakyTestsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFlakyTestsAsync(String projectSlug, final ApiCallback<InsightsGetFlakyTestsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFlakyTestsValidateBeforeCall(projectSlug, _callback);
        Type localVarReturnType = new TypeToken<InsightsGetFlakyTestsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFlakyTestsRequestBuilder {
        private final String projectSlug;

        private GetFlakyTestsRequestBuilder(String projectSlug) {
            this.projectSlug = projectSlug;
        }

        /**
         * Build call for getFlakyTests
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of flaky tests for a project </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFlakyTestsCall(projectSlug, _callback);
        }


        /**
         * Execute getFlakyTests request
         * @return InsightsGetFlakyTestsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of flaky tests for a project </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public InsightsGetFlakyTestsResponse execute() throws ApiException {
            ApiResponse<InsightsGetFlakyTestsResponse> localVarResp = getFlakyTestsWithHttpInfo(projectSlug);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFlakyTests request with HTTP info returned
         * @return ApiResponse&lt;InsightsGetFlakyTestsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of flaky tests for a project </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InsightsGetFlakyTestsResponse> executeWithHttpInfo() throws ApiException {
            return getFlakyTestsWithHttpInfo(projectSlug);
        }

        /**
         * Execute getFlakyTests request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of flaky tests for a project </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InsightsGetFlakyTestsResponse> _callback) throws ApiException {
            return getFlakyTestsAsync(projectSlug, _callback);
        }
    }

    /**
     * Get flaky tests for a project
     * Get a list of flaky tests for a given project. Flaky tests are branch agnostic.              A flaky test is a test that passed and failed in the same commit.
     * @param projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings). (required)
     * @return GetFlakyTestsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of flaky tests for a project </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public GetFlakyTestsRequestBuilder getFlakyTests(String projectSlug) throws IllegalArgumentException {
        if (projectSlug == null) throw new IllegalArgumentException("\"projectSlug\" is required but got null");
            

        return new GetFlakyTestsRequestBuilder(projectSlug);
    }
    private okhttp3.Call getJobTimeseriesDataCall(String projectSlug, String workflowName, String branch, String granularity, OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/insights/time-series/{project-slug}/workflows/{workflow-name}/jobs"
            .replace("{" + "project-slug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "workflow-name" + "}", localVarApiClient.escapeString(workflowName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (branch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("branch", branch));
        }

        if (granularity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("granularity", granularity));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start-date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end-date", endDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobTimeseriesDataValidateBeforeCall(String projectSlug, String workflowName, String branch, String granularity, OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling getJobTimeseriesData(Async)");
        }

        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling getJobTimeseriesData(Async)");
        }

        return getJobTimeseriesDataCall(projectSlug, workflowName, branch, granularity, startDate, endDate, _callback);

    }


    private ApiResponse<InsightsGetJobTimeseriesDataResponse> getJobTimeseriesDataWithHttpInfo(String projectSlug, String workflowName, String branch, String granularity, OffsetDateTime startDate, OffsetDateTime endDate) throws ApiException {
        okhttp3.Call localVarCall = getJobTimeseriesDataValidateBeforeCall(projectSlug, workflowName, branch, granularity, startDate, endDate, null);
        Type localVarReturnType = new TypeToken<InsightsGetJobTimeseriesDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getJobTimeseriesDataAsync(String projectSlug, String workflowName, String branch, String granularity, OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback<InsightsGetJobTimeseriesDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobTimeseriesDataValidateBeforeCall(projectSlug, workflowName, branch, granularity, startDate, endDate, _callback);
        Type localVarReturnType = new TypeToken<InsightsGetJobTimeseriesDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetJobTimeseriesDataRequestBuilder {
        private final String projectSlug;
        private final String workflowName;
        private String branch;
        private String granularity;
        private OffsetDateTime startDate;
        private OffsetDateTime endDate;

        private GetJobTimeseriesDataRequestBuilder(String projectSlug, String workflowName) {
            this.projectSlug = projectSlug;
            this.workflowName = workflowName;
        }

        /**
         * Set branch
         * @param branch The name of a vcs branch. If not passed we will scope the API call to the default branch. (optional)
         * @return GetJobTimeseriesDataRequestBuilder
         */
        public GetJobTimeseriesDataRequestBuilder branch(String branch) {
            this.branch = branch;
            return this;
        }
        
        /**
         * Set granularity
         * @param granularity The granularity for which to query timeseries data. (optional)
         * @return GetJobTimeseriesDataRequestBuilder
         */
        public GetJobTimeseriesDataRequestBuilder granularity(String granularity) {
            this.granularity = granularity;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate Include only executions that started at or after this date. This must be specified if an end-date is provided. (optional)
         * @return GetJobTimeseriesDataRequestBuilder
         */
        public GetJobTimeseriesDataRequestBuilder startDate(OffsetDateTime startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate Include only executions that started before this date. This date can be at most 90 days after the start-date. (optional)
         * @return GetJobTimeseriesDataRequestBuilder
         */
        public GetJobTimeseriesDataRequestBuilder endDate(OffsetDateTime endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Build call for getJobTimeseriesData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An array of timeseries data, one entry per job. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getJobTimeseriesDataCall(projectSlug, workflowName, branch, granularity, startDate, endDate, _callback);
        }


        /**
         * Execute getJobTimeseriesData request
         * @return InsightsGetJobTimeseriesDataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An array of timeseries data, one entry per job. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public InsightsGetJobTimeseriesDataResponse execute() throws ApiException {
            ApiResponse<InsightsGetJobTimeseriesDataResponse> localVarResp = getJobTimeseriesDataWithHttpInfo(projectSlug, workflowName, branch, granularity, startDate, endDate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getJobTimeseriesData request with HTTP info returned
         * @return ApiResponse&lt;InsightsGetJobTimeseriesDataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An array of timeseries data, one entry per job. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InsightsGetJobTimeseriesDataResponse> executeWithHttpInfo() throws ApiException {
            return getJobTimeseriesDataWithHttpInfo(projectSlug, workflowName, branch, granularity, startDate, endDate);
        }

        /**
         * Execute getJobTimeseriesData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An array of timeseries data, one entry per job. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InsightsGetJobTimeseriesDataResponse> _callback) throws ApiException {
            return getJobTimeseriesDataAsync(projectSlug, workflowName, branch, granularity, startDate, endDate, _callback);
        }
    }

    /**
     * Job timeseries data
     * Get timeseries data for all jobs within a workflow. Hourly granularity data is only retained for 48 hours while daily granularity data is retained for 90 days.
     * @param projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings). (required)
     * @param workflowName The name of the workflow. (required)
     * @return GetJobTimeseriesDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of timeseries data, one entry per job. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public GetJobTimeseriesDataRequestBuilder getJobTimeseriesData(String projectSlug, String workflowName) throws IllegalArgumentException {
        if (projectSlug == null) throw new IllegalArgumentException("\"projectSlug\" is required but got null");
            

        if (workflowName == null) throw new IllegalArgumentException("\"workflowName\" is required but got null");
            

        return new GetJobTimeseriesDataRequestBuilder(projectSlug, workflowName);
    }
    private okhttp3.Call getProjectSummaryMetricsCall(String projectSlug, String reportingWindow, Object branches, Object workflowNames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/insights/pages/{project-slug}/summary"
            .replace("{" + "project-slug" + "}", localVarApiClient.escapeString(projectSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (reportingWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reporting-window", reportingWindow));
        }

        if (branches != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("branches", branches));
        }

        if (workflowNames != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workflow-names", workflowNames));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectSummaryMetricsValidateBeforeCall(String projectSlug, String reportingWindow, Object branches, Object workflowNames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling getProjectSummaryMetrics(Async)");
        }

        return getProjectSummaryMetricsCall(projectSlug, reportingWindow, branches, workflowNames, _callback);

    }


    private ApiResponse<InsightsGetProjectSummaryMetricsResponse> getProjectSummaryMetricsWithHttpInfo(String projectSlug, String reportingWindow, Object branches, Object workflowNames) throws ApiException {
        okhttp3.Call localVarCall = getProjectSummaryMetricsValidateBeforeCall(projectSlug, reportingWindow, branches, workflowNames, null);
        Type localVarReturnType = new TypeToken<InsightsGetProjectSummaryMetricsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getProjectSummaryMetricsAsync(String projectSlug, String reportingWindow, Object branches, Object workflowNames, final ApiCallback<InsightsGetProjectSummaryMetricsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectSummaryMetricsValidateBeforeCall(projectSlug, reportingWindow, branches, workflowNames, _callback);
        Type localVarReturnType = new TypeToken<InsightsGetProjectSummaryMetricsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetProjectSummaryMetricsRequestBuilder {
        private final String projectSlug;
        private String reportingWindow;
        private Object branches;
        private Object workflowNames;

        private GetProjectSummaryMetricsRequestBuilder(String projectSlug) {
            this.projectSlug = projectSlug;
        }

        /**
         * Set reportingWindow
         * @param reportingWindow The time window used to calculate summary metrics. If not provided, defaults to last-90-days (optional)
         * @return GetProjectSummaryMetricsRequestBuilder
         */
        public GetProjectSummaryMetricsRequestBuilder reportingWindow(String reportingWindow) {
            this.reportingWindow = reportingWindow;
            return this;
        }
        
        /**
         * Set branches
         * @param branches The names of VCS branches to include in branch-level workflow metrics. (optional)
         * @return GetProjectSummaryMetricsRequestBuilder
         */
        public GetProjectSummaryMetricsRequestBuilder branches(Object branches) {
            this.branches = branches;
            return this;
        }
        
        /**
         * Set workflowNames
         * @param workflowNames The names of workflows to include in workflow-level metrics. (optional)
         * @return GetProjectSummaryMetricsRequestBuilder
         */
        public GetProjectSummaryMetricsRequestBuilder workflowNames(Object workflowNames) {
            this.workflowNames = workflowNames;
            return this;
        }
        
        /**
         * Build call for getProjectSummaryMetrics
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Aggregated summary metrics and trends by workflow and branches </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getProjectSummaryMetricsCall(projectSlug, reportingWindow, branches, workflowNames, _callback);
        }


        /**
         * Execute getProjectSummaryMetrics request
         * @return InsightsGetProjectSummaryMetricsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Aggregated summary metrics and trends by workflow and branches </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public InsightsGetProjectSummaryMetricsResponse execute() throws ApiException {
            ApiResponse<InsightsGetProjectSummaryMetricsResponse> localVarResp = getProjectSummaryMetricsWithHttpInfo(projectSlug, reportingWindow, branches, workflowNames);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getProjectSummaryMetrics request with HTTP info returned
         * @return ApiResponse&lt;InsightsGetProjectSummaryMetricsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Aggregated summary metrics and trends by workflow and branches </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InsightsGetProjectSummaryMetricsResponse> executeWithHttpInfo() throws ApiException {
            return getProjectSummaryMetricsWithHttpInfo(projectSlug, reportingWindow, branches, workflowNames);
        }

        /**
         * Execute getProjectSummaryMetrics request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Aggregated summary metrics and trends by workflow and branches </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InsightsGetProjectSummaryMetricsResponse> _callback) throws ApiException {
            return getProjectSummaryMetricsAsync(projectSlug, reportingWindow, branches, workflowNames, _callback);
        }
    }

    /**
     * Get summary metrics and trends for a project across it&#39;s workflows and branches
     * Get summary metrics and trends for a project at workflow and branch level.              Workflow runs going back at most 90 days are included in the aggregation window.              Trends are only supported upto last 30 days.              Please note that Insights is not a financial reporting tool and should not be used for precise credit reporting.  Credit reporting from Insights does not use the same source of truth as the billing information that is found in the Plan Overview page in the CircleCI UI, nor does the underlying data have the same data accuracy guarantees as the billing information in the CircleCI UI.  This may lead to discrepancies between credits reported from Insights and the billing information in the Plan Overview page of the CircleCI UI.  For precise credit reporting, always use the Plan Overview page in the CircleCI UI.
     * @param projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings). (required)
     * @return GetProjectSummaryMetricsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Aggregated summary metrics and trends by workflow and branches </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public GetProjectSummaryMetricsRequestBuilder getProjectSummaryMetrics(String projectSlug) throws IllegalArgumentException {
        if (projectSlug == null) throw new IllegalArgumentException("\"projectSlug\" is required but got null");
            

        return new GetProjectSummaryMetricsRequestBuilder(projectSlug);
    }
    private okhttp3.Call getProjectWorkflowJobMetricsCall(String projectSlug, String workflowName, String pageToken, Boolean allBranches, String branch, String reportingWindow, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/insights/{project-slug}/workflows/{workflow-name}/jobs"
            .replace("{" + "project-slug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "workflow-name" + "}", localVarApiClient.escapeString(workflowName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page-token", pageToken));
        }

        if (allBranches != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("all-branches", allBranches));
        }

        if (branch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("branch", branch));
        }

        if (reportingWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reporting-window", reportingWindow));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectWorkflowJobMetricsValidateBeforeCall(String projectSlug, String workflowName, String pageToken, Boolean allBranches, String branch, String reportingWindow, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling getProjectWorkflowJobMetrics(Async)");
        }

        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling getProjectWorkflowJobMetrics(Async)");
        }

        return getProjectWorkflowJobMetricsCall(projectSlug, workflowName, pageToken, allBranches, branch, reportingWindow, _callback);

    }


    private ApiResponse<InsightsGetProjectWorkflowJobMetricsResponse> getProjectWorkflowJobMetricsWithHttpInfo(String projectSlug, String workflowName, String pageToken, Boolean allBranches, String branch, String reportingWindow) throws ApiException {
        okhttp3.Call localVarCall = getProjectWorkflowJobMetricsValidateBeforeCall(projectSlug, workflowName, pageToken, allBranches, branch, reportingWindow, null);
        Type localVarReturnType = new TypeToken<InsightsGetProjectWorkflowJobMetricsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getProjectWorkflowJobMetricsAsync(String projectSlug, String workflowName, String pageToken, Boolean allBranches, String branch, String reportingWindow, final ApiCallback<InsightsGetProjectWorkflowJobMetricsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectWorkflowJobMetricsValidateBeforeCall(projectSlug, workflowName, pageToken, allBranches, branch, reportingWindow, _callback);
        Type localVarReturnType = new TypeToken<InsightsGetProjectWorkflowJobMetricsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetProjectWorkflowJobMetricsRequestBuilder {
        private final String projectSlug;
        private final String workflowName;
        private String pageToken;
        private Boolean allBranches;
        private String branch;
        private String reportingWindow;

        private GetProjectWorkflowJobMetricsRequestBuilder(String projectSlug, String workflowName) {
            this.projectSlug = projectSlug;
            this.workflowName = workflowName;
        }

        /**
         * Set pageToken
         * @param pageToken A token to retrieve the next page of results. (optional)
         * @return GetProjectWorkflowJobMetricsRequestBuilder
         */
        public GetProjectWorkflowJobMetricsRequestBuilder pageToken(String pageToken) {
            this.pageToken = pageToken;
            return this;
        }
        
        /**
         * Set allBranches
         * @param allBranches Whether to retrieve data for all branches combined. Use either this parameter OR the branch name parameter. (optional)
         * @return GetProjectWorkflowJobMetricsRequestBuilder
         */
        public GetProjectWorkflowJobMetricsRequestBuilder allBranches(Boolean allBranches) {
            this.allBranches = allBranches;
            return this;
        }
        
        /**
         * Set branch
         * @param branch The name of a vcs branch. If not passed we will scope the API call to the default branch. (optional)
         * @return GetProjectWorkflowJobMetricsRequestBuilder
         */
        public GetProjectWorkflowJobMetricsRequestBuilder branch(String branch) {
            this.branch = branch;
            return this;
        }
        
        /**
         * Set reportingWindow
         * @param reportingWindow The time window used to calculate summary metrics. If not provided, defaults to last-90-days (optional)
         * @return GetProjectWorkflowJobMetricsRequestBuilder
         */
        public GetProjectWorkflowJobMetricsRequestBuilder reportingWindow(String reportingWindow) {
            this.reportingWindow = reportingWindow;
            return this;
        }
        
        /**
         * Build call for getProjectWorkflowJobMetrics
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paginated list of summary metrics by workflow job. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getProjectWorkflowJobMetricsCall(projectSlug, workflowName, pageToken, allBranches, branch, reportingWindow, _callback);
        }


        /**
         * Execute getProjectWorkflowJobMetrics request
         * @return InsightsGetProjectWorkflowJobMetricsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paginated list of summary metrics by workflow job. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public InsightsGetProjectWorkflowJobMetricsResponse execute() throws ApiException {
            ApiResponse<InsightsGetProjectWorkflowJobMetricsResponse> localVarResp = getProjectWorkflowJobMetricsWithHttpInfo(projectSlug, workflowName, pageToken, allBranches, branch, reportingWindow);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getProjectWorkflowJobMetrics request with HTTP info returned
         * @return ApiResponse&lt;InsightsGetProjectWorkflowJobMetricsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paginated list of summary metrics by workflow job. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InsightsGetProjectWorkflowJobMetricsResponse> executeWithHttpInfo() throws ApiException {
            return getProjectWorkflowJobMetricsWithHttpInfo(projectSlug, workflowName, pageToken, allBranches, branch, reportingWindow);
        }

        /**
         * Execute getProjectWorkflowJobMetrics request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paginated list of summary metrics by workflow job. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InsightsGetProjectWorkflowJobMetricsResponse> _callback) throws ApiException {
            return getProjectWorkflowJobMetricsAsync(projectSlug, workflowName, pageToken, allBranches, branch, reportingWindow, _callback);
        }
    }

    /**
     * Get summary metrics for a project workflow&#39;s jobs.
     * Get summary metrics for a project workflow&#39;s jobs. Job runs going back at most 90 days are included in the aggregation window. Metrics are refreshed daily, and thus may not include executions from the last 24 hours. Please note that Insights is not a financial reporting tool and should not be used for precise credit reporting.  Credit reporting from Insights does not use the same source of truth as the billing information that is found in the Plan Overview page in the CircleCI UI, nor does the underlying data have the same data accuracy guarantees as the billing information in the CircleCI UI.  This may lead to discrepancies between credits reported from Insights and the billing information in the Plan Overview page of the CircleCI UI.  For precise credit reporting, always use the Plan Overview page in the CircleCI UI.
     * @param projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings). (required)
     * @param workflowName The name of the workflow. (required)
     * @return GetProjectWorkflowJobMetricsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paginated list of summary metrics by workflow job. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public GetProjectWorkflowJobMetricsRequestBuilder getProjectWorkflowJobMetrics(String projectSlug, String workflowName) throws IllegalArgumentException {
        if (projectSlug == null) throw new IllegalArgumentException("\"projectSlug\" is required but got null");
            

        if (workflowName == null) throw new IllegalArgumentException("\"workflowName\" is required but got null");
            

        return new GetProjectWorkflowJobMetricsRequestBuilder(projectSlug, workflowName);
    }
    private okhttp3.Call getProjectWorkflowMetricsCall(String projectSlug, String pageToken, Boolean allBranches, String branch, String reportingWindow, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/insights/{project-slug}/workflows"
            .replace("{" + "project-slug" + "}", localVarApiClient.escapeString(projectSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page-token", pageToken));
        }

        if (allBranches != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("all-branches", allBranches));
        }

        if (branch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("branch", branch));
        }

        if (reportingWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reporting-window", reportingWindow));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectWorkflowMetricsValidateBeforeCall(String projectSlug, String pageToken, Boolean allBranches, String branch, String reportingWindow, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling getProjectWorkflowMetrics(Async)");
        }

        return getProjectWorkflowMetricsCall(projectSlug, pageToken, allBranches, branch, reportingWindow, _callback);

    }


    private ApiResponse<InsightsGetProjectWorkflowMetricsResponse> getProjectWorkflowMetricsWithHttpInfo(String projectSlug, String pageToken, Boolean allBranches, String branch, String reportingWindow) throws ApiException {
        okhttp3.Call localVarCall = getProjectWorkflowMetricsValidateBeforeCall(projectSlug, pageToken, allBranches, branch, reportingWindow, null);
        Type localVarReturnType = new TypeToken<InsightsGetProjectWorkflowMetricsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getProjectWorkflowMetricsAsync(String projectSlug, String pageToken, Boolean allBranches, String branch, String reportingWindow, final ApiCallback<InsightsGetProjectWorkflowMetricsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectWorkflowMetricsValidateBeforeCall(projectSlug, pageToken, allBranches, branch, reportingWindow, _callback);
        Type localVarReturnType = new TypeToken<InsightsGetProjectWorkflowMetricsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetProjectWorkflowMetricsRequestBuilder {
        private final String projectSlug;
        private String pageToken;
        private Boolean allBranches;
        private String branch;
        private String reportingWindow;

        private GetProjectWorkflowMetricsRequestBuilder(String projectSlug) {
            this.projectSlug = projectSlug;
        }

        /**
         * Set pageToken
         * @param pageToken A token to retrieve the next page of results. (optional)
         * @return GetProjectWorkflowMetricsRequestBuilder
         */
        public GetProjectWorkflowMetricsRequestBuilder pageToken(String pageToken) {
            this.pageToken = pageToken;
            return this;
        }
        
        /**
         * Set allBranches
         * @param allBranches Whether to retrieve data for all branches combined. Use either this parameter OR the branch name parameter. (optional)
         * @return GetProjectWorkflowMetricsRequestBuilder
         */
        public GetProjectWorkflowMetricsRequestBuilder allBranches(Boolean allBranches) {
            this.allBranches = allBranches;
            return this;
        }
        
        /**
         * Set branch
         * @param branch The name of a vcs branch. If not passed we will scope the API call to the default branch. (optional)
         * @return GetProjectWorkflowMetricsRequestBuilder
         */
        public GetProjectWorkflowMetricsRequestBuilder branch(String branch) {
            this.branch = branch;
            return this;
        }
        
        /**
         * Set reportingWindow
         * @param reportingWindow The time window used to calculate summary metrics. If not provided, defaults to last-90-days (optional)
         * @return GetProjectWorkflowMetricsRequestBuilder
         */
        public GetProjectWorkflowMetricsRequestBuilder reportingWindow(String reportingWindow) {
            this.reportingWindow = reportingWindow;
            return this;
        }
        
        /**
         * Build call for getProjectWorkflowMetrics
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paginated list of summary metrics by workflow </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getProjectWorkflowMetricsCall(projectSlug, pageToken, allBranches, branch, reportingWindow, _callback);
        }


        /**
         * Execute getProjectWorkflowMetrics request
         * @return InsightsGetProjectWorkflowMetricsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paginated list of summary metrics by workflow </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public InsightsGetProjectWorkflowMetricsResponse execute() throws ApiException {
            ApiResponse<InsightsGetProjectWorkflowMetricsResponse> localVarResp = getProjectWorkflowMetricsWithHttpInfo(projectSlug, pageToken, allBranches, branch, reportingWindow);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getProjectWorkflowMetrics request with HTTP info returned
         * @return ApiResponse&lt;InsightsGetProjectWorkflowMetricsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paginated list of summary metrics by workflow </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InsightsGetProjectWorkflowMetricsResponse> executeWithHttpInfo() throws ApiException {
            return getProjectWorkflowMetricsWithHttpInfo(projectSlug, pageToken, allBranches, branch, reportingWindow);
        }

        /**
         * Execute getProjectWorkflowMetrics request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paginated list of summary metrics by workflow </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InsightsGetProjectWorkflowMetricsResponse> _callback) throws ApiException {
            return getProjectWorkflowMetricsAsync(projectSlug, pageToken, allBranches, branch, reportingWindow, _callback);
        }
    }

    /**
     * Get summary metrics for a project&#39;s workflows
     * Get summary metrics for a project&#39;s workflows.  Workflow runs going back at most 90 days are included in the aggregation window. Metrics are refreshed daily, and thus may not include executions from the last 24 hours.  Please note that Insights is not a financial reporting tool and should not be used for precise credit reporting.  Credit reporting from Insights does not use the same source of truth as the billing information that is found in the Plan Overview page in the CircleCI UI, nor does the underlying data have the same data accuracy guarantees as the billing information in the CircleCI UI.  This may lead to discrepancies between credits reported from Insights and the billing information in the Plan Overview page of the CircleCI UI.  For precise credit reporting, always use the Plan Overview page in the CircleCI UI.
     * @param projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings). (required)
     * @return GetProjectWorkflowMetricsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paginated list of summary metrics by workflow </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public GetProjectWorkflowMetricsRequestBuilder getProjectWorkflowMetrics(String projectSlug) throws IllegalArgumentException {
        if (projectSlug == null) throw new IllegalArgumentException("\"projectSlug\" is required but got null");
            

        return new GetProjectWorkflowMetricsRequestBuilder(projectSlug);
    }
    private okhttp3.Call getProjectWorkflowTestMetricsCall(String projectSlug, String workflowName, String branch, Boolean allBranches, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/insights/{project-slug}/workflows/{workflow-name}/test-metrics"
            .replace("{" + "project-slug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "workflow-name" + "}", localVarApiClient.escapeString(workflowName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (branch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("branch", branch));
        }

        if (allBranches != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("all-branches", allBranches));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectWorkflowTestMetricsValidateBeforeCall(String projectSlug, String workflowName, String branch, Boolean allBranches, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling getProjectWorkflowTestMetrics(Async)");
        }

        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling getProjectWorkflowTestMetrics(Async)");
        }

        return getProjectWorkflowTestMetricsCall(projectSlug, workflowName, branch, allBranches, _callback);

    }


    private ApiResponse<InsightsGetProjectWorkflowTestMetricsResponse> getProjectWorkflowTestMetricsWithHttpInfo(String projectSlug, String workflowName, String branch, Boolean allBranches) throws ApiException {
        okhttp3.Call localVarCall = getProjectWorkflowTestMetricsValidateBeforeCall(projectSlug, workflowName, branch, allBranches, null);
        Type localVarReturnType = new TypeToken<InsightsGetProjectWorkflowTestMetricsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getProjectWorkflowTestMetricsAsync(String projectSlug, String workflowName, String branch, Boolean allBranches, final ApiCallback<InsightsGetProjectWorkflowTestMetricsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectWorkflowTestMetricsValidateBeforeCall(projectSlug, workflowName, branch, allBranches, _callback);
        Type localVarReturnType = new TypeToken<InsightsGetProjectWorkflowTestMetricsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetProjectWorkflowTestMetricsRequestBuilder {
        private final String projectSlug;
        private final String workflowName;
        private String branch;
        private Boolean allBranches;

        private GetProjectWorkflowTestMetricsRequestBuilder(String projectSlug, String workflowName) {
            this.projectSlug = projectSlug;
            this.workflowName = workflowName;
        }

        /**
         * Set branch
         * @param branch The name of a vcs branch. If not passed we will scope the API call to the default branch. (optional)
         * @return GetProjectWorkflowTestMetricsRequestBuilder
         */
        public GetProjectWorkflowTestMetricsRequestBuilder branch(String branch) {
            this.branch = branch;
            return this;
        }
        
        /**
         * Set allBranches
         * @param allBranches Whether to retrieve data for all branches combined. Use either this parameter OR the branch name parameter. (optional)
         * @return GetProjectWorkflowTestMetricsRequestBuilder
         */
        public GetProjectWorkflowTestMetricsRequestBuilder allBranches(Boolean allBranches) {
            this.allBranches = allBranches;
            return this;
        }
        
        /**
         * Build call for getProjectWorkflowTestMetrics
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of test metrics by workflow </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getProjectWorkflowTestMetricsCall(projectSlug, workflowName, branch, allBranches, _callback);
        }


        /**
         * Execute getProjectWorkflowTestMetrics request
         * @return InsightsGetProjectWorkflowTestMetricsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of test metrics by workflow </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public InsightsGetProjectWorkflowTestMetricsResponse execute() throws ApiException {
            ApiResponse<InsightsGetProjectWorkflowTestMetricsResponse> localVarResp = getProjectWorkflowTestMetricsWithHttpInfo(projectSlug, workflowName, branch, allBranches);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getProjectWorkflowTestMetrics request with HTTP info returned
         * @return ApiResponse&lt;InsightsGetProjectWorkflowTestMetricsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of test metrics by workflow </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InsightsGetProjectWorkflowTestMetricsResponse> executeWithHttpInfo() throws ApiException {
            return getProjectWorkflowTestMetricsWithHttpInfo(projectSlug, workflowName, branch, allBranches);
        }

        /**
         * Execute getProjectWorkflowTestMetrics request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of test metrics by workflow </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InsightsGetProjectWorkflowTestMetricsResponse> _callback) throws ApiException {
            return getProjectWorkflowTestMetricsAsync(projectSlug, workflowName, branch, allBranches, _callback);
        }
    }

    /**
     * Get test metrics for a project&#39;s workflows
     * Get test metrics for a project&#39;s workflows. Currently tests metrics are calculated based on 10 most recent workflow runs.
     * @param projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings). (required)
     * @param workflowName The name of the workflow. (required)
     * @return GetProjectWorkflowTestMetricsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of test metrics by workflow </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public GetProjectWorkflowTestMetricsRequestBuilder getProjectWorkflowTestMetrics(String projectSlug, String workflowName) throws IllegalArgumentException {
        if (projectSlug == null) throw new IllegalArgumentException("\"projectSlug\" is required but got null");
            

        if (workflowName == null) throw new IllegalArgumentException("\"workflowName\" is required but got null");
            

        return new GetProjectWorkflowTestMetricsRequestBuilder(projectSlug, workflowName);
    }
    private okhttp3.Call getRecentWorkflowRunsCall(String projectSlug, String workflowName, Boolean allBranches, String branch, String pageToken, OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/insights/{project-slug}/workflows/{workflow-name}"
            .replace("{" + "project-slug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "workflow-name" + "}", localVarApiClient.escapeString(workflowName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (allBranches != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("all-branches", allBranches));
        }

        if (branch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("branch", branch));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page-token", pageToken));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start-date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end-date", endDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecentWorkflowRunsValidateBeforeCall(String projectSlug, String workflowName, Boolean allBranches, String branch, String pageToken, OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling getRecentWorkflowRuns(Async)");
        }

        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling getRecentWorkflowRuns(Async)");
        }

        return getRecentWorkflowRunsCall(projectSlug, workflowName, allBranches, branch, pageToken, startDate, endDate, _callback);

    }


    private ApiResponse<InsightsGetRecentWorkflowRunsResponse> getRecentWorkflowRunsWithHttpInfo(String projectSlug, String workflowName, Boolean allBranches, String branch, String pageToken, OffsetDateTime startDate, OffsetDateTime endDate) throws ApiException {
        okhttp3.Call localVarCall = getRecentWorkflowRunsValidateBeforeCall(projectSlug, workflowName, allBranches, branch, pageToken, startDate, endDate, null);
        Type localVarReturnType = new TypeToken<InsightsGetRecentWorkflowRunsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRecentWorkflowRunsAsync(String projectSlug, String workflowName, Boolean allBranches, String branch, String pageToken, OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback<InsightsGetRecentWorkflowRunsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecentWorkflowRunsValidateBeforeCall(projectSlug, workflowName, allBranches, branch, pageToken, startDate, endDate, _callback);
        Type localVarReturnType = new TypeToken<InsightsGetRecentWorkflowRunsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRecentWorkflowRunsRequestBuilder {
        private final String projectSlug;
        private final String workflowName;
        private Boolean allBranches;
        private String branch;
        private String pageToken;
        private OffsetDateTime startDate;
        private OffsetDateTime endDate;

        private GetRecentWorkflowRunsRequestBuilder(String projectSlug, String workflowName) {
            this.projectSlug = projectSlug;
            this.workflowName = workflowName;
        }

        /**
         * Set allBranches
         * @param allBranches Whether to retrieve data for all branches combined. Use either this parameter OR the branch name parameter. (optional)
         * @return GetRecentWorkflowRunsRequestBuilder
         */
        public GetRecentWorkflowRunsRequestBuilder allBranches(Boolean allBranches) {
            this.allBranches = allBranches;
            return this;
        }
        
        /**
         * Set branch
         * @param branch The name of a vcs branch. If not passed we will scope the API call to the default branch. (optional)
         * @return GetRecentWorkflowRunsRequestBuilder
         */
        public GetRecentWorkflowRunsRequestBuilder branch(String branch) {
            this.branch = branch;
            return this;
        }
        
        /**
         * Set pageToken
         * @param pageToken A token to retrieve the next page of results. (optional)
         * @return GetRecentWorkflowRunsRequestBuilder
         */
        public GetRecentWorkflowRunsRequestBuilder pageToken(String pageToken) {
            this.pageToken = pageToken;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate Include only executions that started at or after this date. This must be specified if an end-date is provided. (optional)
         * @return GetRecentWorkflowRunsRequestBuilder
         */
        public GetRecentWorkflowRunsRequestBuilder startDate(OffsetDateTime startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate Include only executions that started before this date. This date can be at most 90 days after the start-date. (optional)
         * @return GetRecentWorkflowRunsRequestBuilder
         */
        public GetRecentWorkflowRunsRequestBuilder endDate(OffsetDateTime endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Build call for getRecentWorkflowRuns
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paginated list of recent workflow runs </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRecentWorkflowRunsCall(projectSlug, workflowName, allBranches, branch, pageToken, startDate, endDate, _callback);
        }


        /**
         * Execute getRecentWorkflowRuns request
         * @return InsightsGetRecentWorkflowRunsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paginated list of recent workflow runs </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public InsightsGetRecentWorkflowRunsResponse execute() throws ApiException {
            ApiResponse<InsightsGetRecentWorkflowRunsResponse> localVarResp = getRecentWorkflowRunsWithHttpInfo(projectSlug, workflowName, allBranches, branch, pageToken, startDate, endDate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRecentWorkflowRuns request with HTTP info returned
         * @return ApiResponse&lt;InsightsGetRecentWorkflowRunsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paginated list of recent workflow runs </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InsightsGetRecentWorkflowRunsResponse> executeWithHttpInfo() throws ApiException {
            return getRecentWorkflowRunsWithHttpInfo(projectSlug, workflowName, allBranches, branch, pageToken, startDate, endDate);
        }

        /**
         * Execute getRecentWorkflowRuns request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paginated list of recent workflow runs </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InsightsGetRecentWorkflowRunsResponse> _callback) throws ApiException {
            return getRecentWorkflowRunsAsync(projectSlug, workflowName, allBranches, branch, pageToken, startDate, endDate, _callback);
        }
    }

    /**
     * Get recent runs of a workflow
     * Get recent runs of a workflow. Runs going back at most 90 days are returned. Please note that Insights is not a financial reporting tool and should not be used for precise credit reporting.  Credit reporting from Insights does not use the same source of truth as the billing information that is found in the Plan Overview page in the CircleCI UI, nor does the underlying data have the same data accuracy guarantees as the billing information in the CircleCI UI.  This may lead to discrepancies between credits reported from Insights and the billing information in the Plan Overview page of the CircleCI UI.  For precise credit reporting, always use the Plan Overview page in the CircleCI UI.
     * @param projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings). (required)
     * @param workflowName The name of the workflow. (required)
     * @return GetRecentWorkflowRunsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paginated list of recent workflow runs </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public GetRecentWorkflowRunsRequestBuilder getRecentWorkflowRuns(String projectSlug, String workflowName) throws IllegalArgumentException {
        if (projectSlug == null) throw new IllegalArgumentException("\"projectSlug\" is required but got null");
            

        if (workflowName == null) throw new IllegalArgumentException("\"workflowName\" is required but got null");
            

        return new GetRecentWorkflowRunsRequestBuilder(projectSlug, workflowName);
    }
    private okhttp3.Call getSummaryMetricsWithTrendsCall(String orgSlug, String reportingWindow, Object projectNames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/insights/{org-slug}/summary"
            .replace("{" + "org-slug" + "}", localVarApiClient.escapeString(orgSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (reportingWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reporting-window", reportingWindow));
        }

        if (projectNames != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("project-names", projectNames));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSummaryMetricsWithTrendsValidateBeforeCall(String orgSlug, String reportingWindow, Object projectNames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgSlug' is set
        if (orgSlug == null) {
            throw new ApiException("Missing the required parameter 'orgSlug' when calling getSummaryMetricsWithTrends(Async)");
        }

        return getSummaryMetricsWithTrendsCall(orgSlug, reportingWindow, projectNames, _callback);

    }


    private ApiResponse<InsightsGetSummaryMetricsWithTrendsResponse> getSummaryMetricsWithTrendsWithHttpInfo(String orgSlug, String reportingWindow, Object projectNames) throws ApiException {
        okhttp3.Call localVarCall = getSummaryMetricsWithTrendsValidateBeforeCall(orgSlug, reportingWindow, projectNames, null);
        Type localVarReturnType = new TypeToken<InsightsGetSummaryMetricsWithTrendsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSummaryMetricsWithTrendsAsync(String orgSlug, String reportingWindow, Object projectNames, final ApiCallback<InsightsGetSummaryMetricsWithTrendsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSummaryMetricsWithTrendsValidateBeforeCall(orgSlug, reportingWindow, projectNames, _callback);
        Type localVarReturnType = new TypeToken<InsightsGetSummaryMetricsWithTrendsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSummaryMetricsWithTrendsRequestBuilder {
        private final String orgSlug;
        private String reportingWindow;
        private Object projectNames;

        private GetSummaryMetricsWithTrendsRequestBuilder(String orgSlug) {
            this.orgSlug = orgSlug;
        }

        /**
         * Set reportingWindow
         * @param reportingWindow The time window used to calculate summary metrics. If not provided, defaults to last-90-days (optional)
         * @return GetSummaryMetricsWithTrendsRequestBuilder
         */
        public GetSummaryMetricsWithTrendsRequestBuilder reportingWindow(String reportingWindow) {
            this.reportingWindow = reportingWindow;
            return this;
        }
        
        /**
         * Set projectNames
         * @param projectNames List of project names. (optional)
         * @return GetSummaryMetricsWithTrendsRequestBuilder
         */
        public GetSummaryMetricsWithTrendsRequestBuilder projectNames(Object projectNames) {
            this.projectNames = projectNames;
            return this;
        }
        
        /**
         * Build call for getSummaryMetricsWithTrends
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> summary metrics with trends for an entire org and it&#39;s projects. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSummaryMetricsWithTrendsCall(orgSlug, reportingWindow, projectNames, _callback);
        }


        /**
         * Execute getSummaryMetricsWithTrends request
         * @return InsightsGetSummaryMetricsWithTrendsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> summary metrics with trends for an entire org and it&#39;s projects. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public InsightsGetSummaryMetricsWithTrendsResponse execute() throws ApiException {
            ApiResponse<InsightsGetSummaryMetricsWithTrendsResponse> localVarResp = getSummaryMetricsWithTrendsWithHttpInfo(orgSlug, reportingWindow, projectNames);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSummaryMetricsWithTrends request with HTTP info returned
         * @return ApiResponse&lt;InsightsGetSummaryMetricsWithTrendsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> summary metrics with trends for an entire org and it&#39;s projects. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InsightsGetSummaryMetricsWithTrendsResponse> executeWithHttpInfo() throws ApiException {
            return getSummaryMetricsWithTrendsWithHttpInfo(orgSlug, reportingWindow, projectNames);
        }

        /**
         * Execute getSummaryMetricsWithTrends request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> summary metrics with trends for an entire org and it&#39;s projects. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InsightsGetSummaryMetricsWithTrendsResponse> _callback) throws ApiException {
            return getSummaryMetricsWithTrendsAsync(orgSlug, reportingWindow, projectNames, _callback);
        }
    }

    /**
     * Get summary metrics with trends for the entire org, and for each project.
     * Gets aggregated summary metrics with trends for the entire org.               Also gets aggregated metrics and trends for each project belonging to the org.
     * @param orgSlug Org slug in the form &#x60;vcs-slug/org-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. (required)
     * @return GetSummaryMetricsWithTrendsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> summary metrics with trends for an entire org and it&#39;s projects. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public GetSummaryMetricsWithTrendsRequestBuilder getSummaryMetricsWithTrends(String orgSlug) throws IllegalArgumentException {
        if (orgSlug == null) throw new IllegalArgumentException("\"orgSlug\" is required but got null");
            

        return new GetSummaryMetricsWithTrendsRequestBuilder(orgSlug);
    }
    private okhttp3.Call getWorkflowSummaryMetricsCall(String projectSlug, String workflowName, Boolean allBranches, String branch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/insights/{project-slug}/workflows/{workflow-name}/summary"
            .replace("{" + "project-slug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "workflow-name" + "}", localVarApiClient.escapeString(workflowName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (allBranches != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("all-branches", allBranches));
        }

        if (branch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("branch", branch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorkflowSummaryMetricsValidateBeforeCall(String projectSlug, String workflowName, Boolean allBranches, String branch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling getWorkflowSummaryMetrics(Async)");
        }

        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling getWorkflowSummaryMetrics(Async)");
        }

        return getWorkflowSummaryMetricsCall(projectSlug, workflowName, allBranches, branch, _callback);

    }


    private ApiResponse<InsightsGetWorkflowSummaryMetricsResponse> getWorkflowSummaryMetricsWithHttpInfo(String projectSlug, String workflowName, Boolean allBranches, String branch) throws ApiException {
        okhttp3.Call localVarCall = getWorkflowSummaryMetricsValidateBeforeCall(projectSlug, workflowName, allBranches, branch, null);
        Type localVarReturnType = new TypeToken<InsightsGetWorkflowSummaryMetricsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWorkflowSummaryMetricsAsync(String projectSlug, String workflowName, Boolean allBranches, String branch, final ApiCallback<InsightsGetWorkflowSummaryMetricsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorkflowSummaryMetricsValidateBeforeCall(projectSlug, workflowName, allBranches, branch, _callback);
        Type localVarReturnType = new TypeToken<InsightsGetWorkflowSummaryMetricsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWorkflowSummaryMetricsRequestBuilder {
        private final String projectSlug;
        private final String workflowName;
        private Boolean allBranches;
        private String branch;

        private GetWorkflowSummaryMetricsRequestBuilder(String projectSlug, String workflowName) {
            this.projectSlug = projectSlug;
            this.workflowName = workflowName;
        }

        /**
         * Set allBranches
         * @param allBranches Whether to retrieve data for all branches combined. Use either this parameter OR the branch name parameter. (optional)
         * @return GetWorkflowSummaryMetricsRequestBuilder
         */
        public GetWorkflowSummaryMetricsRequestBuilder allBranches(Boolean allBranches) {
            this.allBranches = allBranches;
            return this;
        }
        
        /**
         * Set branch
         * @param branch The name of a vcs branch. If not passed we will scope the API call to the default branch. (optional)
         * @return GetWorkflowSummaryMetricsRequestBuilder
         */
        public GetWorkflowSummaryMetricsRequestBuilder branch(String branch) {
            this.branch = branch;
            return this;
        }
        
        /**
         * Build call for getWorkflowSummaryMetrics
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Metrics and trends for a workflow </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWorkflowSummaryMetricsCall(projectSlug, workflowName, allBranches, branch, _callback);
        }


        /**
         * Execute getWorkflowSummaryMetrics request
         * @return InsightsGetWorkflowSummaryMetricsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Metrics and trends for a workflow </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public InsightsGetWorkflowSummaryMetricsResponse execute() throws ApiException {
            ApiResponse<InsightsGetWorkflowSummaryMetricsResponse> localVarResp = getWorkflowSummaryMetricsWithHttpInfo(projectSlug, workflowName, allBranches, branch);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWorkflowSummaryMetrics request with HTTP info returned
         * @return ApiResponse&lt;InsightsGetWorkflowSummaryMetricsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Metrics and trends for a workflow </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InsightsGetWorkflowSummaryMetricsResponse> executeWithHttpInfo() throws ApiException {
            return getWorkflowSummaryMetricsWithHttpInfo(projectSlug, workflowName, allBranches, branch);
        }

        /**
         * Execute getWorkflowSummaryMetrics request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Metrics and trends for a workflow </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InsightsGetWorkflowSummaryMetricsResponse> _callback) throws ApiException {
            return getWorkflowSummaryMetricsAsync(projectSlug, workflowName, allBranches, branch, _callback);
        }
    }

    /**
     * Get metrics and trends for workflows
     * Get the metrics and trends for a particular workflow on a single branch or all branches
     * @param projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings). (required)
     * @param workflowName The name of the workflow. (required)
     * @return GetWorkflowSummaryMetricsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Metrics and trends for a workflow </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public GetWorkflowSummaryMetricsRequestBuilder getWorkflowSummaryMetrics(String projectSlug, String workflowName) throws IllegalArgumentException {
        if (projectSlug == null) throw new IllegalArgumentException("\"projectSlug\" is required but got null");
            

        if (workflowName == null) throw new IllegalArgumentException("\"workflowName\" is required but got null");
            

        return new GetWorkflowSummaryMetricsRequestBuilder(projectSlug, workflowName);
    }
    private okhttp3.Call listProjectBranchesCall(String projectSlug, String workflowName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/insights/{project-slug}/branches"
            .replace("{" + "project-slug" + "}", localVarApiClient.escapeString(projectSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (workflowName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workflow-name", workflowName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query", "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listProjectBranchesValidateBeforeCall(String projectSlug, String workflowName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling listProjectBranches(Async)");
        }

        return listProjectBranchesCall(projectSlug, workflowName, _callback);

    }


    private ApiResponse<InsightsListProjectBranchesResponse> listProjectBranchesWithHttpInfo(String projectSlug, String workflowName) throws ApiException {
        okhttp3.Call localVarCall = listProjectBranchesValidateBeforeCall(projectSlug, workflowName, null);
        Type localVarReturnType = new TypeToken<InsightsListProjectBranchesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listProjectBranchesAsync(String projectSlug, String workflowName, final ApiCallback<InsightsListProjectBranchesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listProjectBranchesValidateBeforeCall(projectSlug, workflowName, _callback);
        Type localVarReturnType = new TypeToken<InsightsListProjectBranchesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListProjectBranchesRequestBuilder {
        private final String projectSlug;
        private String workflowName;

        private ListProjectBranchesRequestBuilder(String projectSlug) {
            this.projectSlug = projectSlug;
        }

        /**
         * Set workflowName
         * @param workflowName The name of a workflow. If not passed we will scope the API call to the project. (optional)
         * @return ListProjectBranchesRequestBuilder
         */
        public ListProjectBranchesRequestBuilder workflowName(String workflowName) {
            this.workflowName = workflowName;
            return this;
        }
        
        /**
         * Build call for listProjectBranches
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of branches for a project </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listProjectBranchesCall(projectSlug, workflowName, _callback);
        }


        /**
         * Execute listProjectBranches request
         * @return InsightsListProjectBranchesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of branches for a project </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public InsightsListProjectBranchesResponse execute() throws ApiException {
            ApiResponse<InsightsListProjectBranchesResponse> localVarResp = listProjectBranchesWithHttpInfo(projectSlug, workflowName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listProjectBranches request with HTTP info returned
         * @return ApiResponse&lt;InsightsListProjectBranchesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of branches for a project </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InsightsListProjectBranchesResponse> executeWithHttpInfo() throws ApiException {
            return listProjectBranchesWithHttpInfo(projectSlug, workflowName);
        }

        /**
         * Execute listProjectBranches request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of branches for a project </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InsightsListProjectBranchesResponse> _callback) throws ApiException {
            return listProjectBranchesAsync(projectSlug, workflowName, _callback);
        }
    }

    /**
     * Get all branches for a project
     * Get a list of all branches for a specified project. The list will only contain branches currently available within Insights. The maximum number of branches returned by this endpoint is 5,000.
     * @param projectSlug Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped. For projects that use GitLab or GitHub App, use &#x60;circleci&#x60; as the &#x60;vcs-slug&#x60;, replace &#x60;org-name&#x60; with the organization ID (found in Organization Settings), and replace &#x60;repo-name&#x60; with the project ID (found in Project Settings). (required)
     * @return ListProjectBranchesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of branches for a project </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ListProjectBranchesRequestBuilder listProjectBranches(String projectSlug) throws IllegalArgumentException {
        if (projectSlug == null) throw new IllegalArgumentException("\"projectSlug\" is required but got null");
            

        return new ListProjectBranchesRequestBuilder(projectSlug);
    }
}
