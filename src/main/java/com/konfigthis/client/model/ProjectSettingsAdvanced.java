/*
 * CircleCI API
 * This describes the resources that make up the CircleCI API v2.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ProjectSettingsAdvanced
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ProjectSettingsAdvanced {
  public static final String SERIALIZED_NAME_AUTOCANCEL_BUILDS = "autocancel_builds";
  @SerializedName(SERIALIZED_NAME_AUTOCANCEL_BUILDS)
  private Boolean autocancelBuilds;

  public static final String SERIALIZED_NAME_BUILD_FORK_PRS = "build_fork_prs";
  @SerializedName(SERIALIZED_NAME_BUILD_FORK_PRS)
  private Boolean buildForkPrs;

  public static final String SERIALIZED_NAME_BUILD_PRS_ONLY = "build_prs_only";
  @SerializedName(SERIALIZED_NAME_BUILD_PRS_ONLY)
  private Boolean buildPrsOnly;

  public static final String SERIALIZED_NAME_DISABLE_SSH = "disable_ssh";
  @SerializedName(SERIALIZED_NAME_DISABLE_SSH)
  private Boolean disableSsh;

  public static final String SERIALIZED_NAME_FORKS_RECEIVE_SECRET_ENV_VARS = "forks_receive_secret_env_vars";
  @SerializedName(SERIALIZED_NAME_FORKS_RECEIVE_SECRET_ENV_VARS)
  private Boolean forksReceiveSecretEnvVars;

  public static final String SERIALIZED_NAME_OSS = "oss";
  @SerializedName(SERIALIZED_NAME_OSS)
  private Boolean oss;

  public static final String SERIALIZED_NAME_SET_GITHUB_STATUS = "set_github_status";
  @SerializedName(SERIALIZED_NAME_SET_GITHUB_STATUS)
  private Boolean setGithubStatus;

  public static final String SERIALIZED_NAME_SETUP_WORKFLOWS = "setup_workflows";
  @SerializedName(SERIALIZED_NAME_SETUP_WORKFLOWS)
  private Boolean setupWorkflows;

  public static final String SERIALIZED_NAME_WRITE_SETTINGS_REQUIRES_ADMIN = "write_settings_requires_admin";
  @SerializedName(SERIALIZED_NAME_WRITE_SETTINGS_REQUIRES_ADMIN)
  private Boolean writeSettingsRequiresAdmin;

  public static final String SERIALIZED_NAME_PR_ONLY_BRANCH_OVERRIDES = "pr_only_branch_overrides";
  @SerializedName(SERIALIZED_NAME_PR_ONLY_BRANCH_OVERRIDES)
  private List<String> prOnlyBranchOverrides = null;

  public ProjectSettingsAdvanced() {
  }

  public ProjectSettingsAdvanced autocancelBuilds(Boolean autocancelBuilds) {
    
    
    
    
    this.autocancelBuilds = autocancelBuilds;
    return this;
  }

   /**
   * Except for the default branch, cancel running pipelines on a branch when a new pipeline starts on that branch.
   * @return autocancelBuilds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Except for the default branch, cancel running pipelines on a branch when a new pipeline starts on that branch.")

  public Boolean getAutocancelBuilds() {
    return autocancelBuilds;
  }


  public void setAutocancelBuilds(Boolean autocancelBuilds) {
    
    
    
    this.autocancelBuilds = autocancelBuilds;
  }


  public ProjectSettingsAdvanced buildForkPrs(Boolean buildForkPrs) {
    
    
    
    
    this.buildForkPrs = buildForkPrs;
    return this;
  }

   /**
   * Run builds for pull requests from forks.
   * @return buildForkPrs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Run builds for pull requests from forks.")

  public Boolean getBuildForkPrs() {
    return buildForkPrs;
  }


  public void setBuildForkPrs(Boolean buildForkPrs) {
    
    
    
    this.buildForkPrs = buildForkPrs;
  }


  public ProjectSettingsAdvanced buildPrsOnly(Boolean buildPrsOnly) {
    
    
    
    
    this.buildPrsOnly = buildPrsOnly;
    return this;
  }

   /**
   * Once enabled, we will only build branches that have associated pull requests open.
   * @return buildPrsOnly
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Once enabled, we will only build branches that have associated pull requests open.")

  public Boolean getBuildPrsOnly() {
    return buildPrsOnly;
  }


  public void setBuildPrsOnly(Boolean buildPrsOnly) {
    
    
    
    this.buildPrsOnly = buildPrsOnly;
  }


  public ProjectSettingsAdvanced disableSsh(Boolean disableSsh) {
    
    
    
    
    this.disableSsh = disableSsh;
    return this;
  }

   /**
   * When set to true, job re-runs with SSH debugging access will be disabled for the project.
   * @return disableSsh
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "When set to true, job re-runs with SSH debugging access will be disabled for the project.")

  public Boolean getDisableSsh() {
    return disableSsh;
  }


  public void setDisableSsh(Boolean disableSsh) {
    
    
    
    this.disableSsh = disableSsh;
  }


  public ProjectSettingsAdvanced forksReceiveSecretEnvVars(Boolean forksReceiveSecretEnvVars) {
    
    
    
    
    this.forksReceiveSecretEnvVars = forksReceiveSecretEnvVars;
    return this;
  }

   /**
   * Run builds for forked pull requests with this project&#39;s configuration, environment variables, and secrets.
   * @return forksReceiveSecretEnvVars
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Run builds for forked pull requests with this project's configuration, environment variables, and secrets.")

  public Boolean getForksReceiveSecretEnvVars() {
    return forksReceiveSecretEnvVars;
  }


  public void setForksReceiveSecretEnvVars(Boolean forksReceiveSecretEnvVars) {
    
    
    
    this.forksReceiveSecretEnvVars = forksReceiveSecretEnvVars;
  }


  public ProjectSettingsAdvanced oss(Boolean oss) {
    
    
    
    
    this.oss = oss;
    return this;
  }

   /**
   * Free and Open Source. Enabling this grants additional credits, and lets others see your builds, both through the web UI and the API.
   * @return oss
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Free and Open Source. Enabling this grants additional credits, and lets others see your builds, both through the web UI and the API.")

  public Boolean getOss() {
    return oss;
  }


  public void setOss(Boolean oss) {
    
    
    
    this.oss = oss;
  }


  public ProjectSettingsAdvanced setGithubStatus(Boolean setGithubStatus) {
    
    
    
    
    this.setGithubStatus = setGithubStatus;
    return this;
  }

   /**
   * Report the status of every pushed commit to GitHub&#39;s status API. Updates reported per job.
   * @return setGithubStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Report the status of every pushed commit to GitHub's status API. Updates reported per job.")

  public Boolean getSetGithubStatus() {
    return setGithubStatus;
  }


  public void setSetGithubStatus(Boolean setGithubStatus) {
    
    
    
    this.setGithubStatus = setGithubStatus;
  }


  public ProjectSettingsAdvanced setupWorkflows(Boolean setupWorkflows) {
    
    
    
    
    this.setupWorkflows = setupWorkflows;
    return this;
  }

   /**
   * Enabling allows you to conditionally trigger configurations outside of the primary &#x60;.circleci&#x60; parent directory.
   * @return setupWorkflows
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Enabling allows you to conditionally trigger configurations outside of the primary `.circleci` parent directory.")

  public Boolean getSetupWorkflows() {
    return setupWorkflows;
  }


  public void setSetupWorkflows(Boolean setupWorkflows) {
    
    
    
    this.setupWorkflows = setupWorkflows;
  }


  public ProjectSettingsAdvanced writeSettingsRequiresAdmin(Boolean writeSettingsRequiresAdmin) {
    
    
    
    
    this.writeSettingsRequiresAdmin = writeSettingsRequiresAdmin;
    return this;
  }

   /**
   * Whether updating these settings requires a user to be an organization administrator. When disabled, updating settings can be done by any member.
   * @return writeSettingsRequiresAdmin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether updating these settings requires a user to be an organization administrator. When disabled, updating settings can be done by any member.")

  public Boolean getWriteSettingsRequiresAdmin() {
    return writeSettingsRequiresAdmin;
  }


  public void setWriteSettingsRequiresAdmin(Boolean writeSettingsRequiresAdmin) {
    
    
    
    this.writeSettingsRequiresAdmin = writeSettingsRequiresAdmin;
  }


  public ProjectSettingsAdvanced prOnlyBranchOverrides(List<String> prOnlyBranchOverrides) {
    
    
    
    
    this.prOnlyBranchOverrides = prOnlyBranchOverrides;
    return this;
  }

  public ProjectSettingsAdvanced addPrOnlyBranchOverridesItem(String prOnlyBranchOverridesItem) {
    if (this.prOnlyBranchOverrides == null) {
      this.prOnlyBranchOverrides = new ArrayList<>();
    }
    this.prOnlyBranchOverrides.add(prOnlyBranchOverridesItem);
    return this;
  }

   /**
   * This field is used in conjunction with the &#x60;build_prs_only&#x60;, it allows you to specify a list of branches that will always triger a build. The value passed will overwrite the existing value.
   * @return prOnlyBranchOverrides
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This field is used in conjunction with the `build_prs_only`, it allows you to specify a list of branches that will always triger a build. The value passed will overwrite the existing value.")

  public List<String> getPrOnlyBranchOverrides() {
    return prOnlyBranchOverrides;
  }


  public void setPrOnlyBranchOverrides(List<String> prOnlyBranchOverrides) {
    
    
    
    this.prOnlyBranchOverrides = prOnlyBranchOverrides;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ProjectSettingsAdvanced instance itself
   */
  public ProjectSettingsAdvanced putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectSettingsAdvanced projectSettingsAdvanced = (ProjectSettingsAdvanced) o;
    return Objects.equals(this.autocancelBuilds, projectSettingsAdvanced.autocancelBuilds) &&
        Objects.equals(this.buildForkPrs, projectSettingsAdvanced.buildForkPrs) &&
        Objects.equals(this.buildPrsOnly, projectSettingsAdvanced.buildPrsOnly) &&
        Objects.equals(this.disableSsh, projectSettingsAdvanced.disableSsh) &&
        Objects.equals(this.forksReceiveSecretEnvVars, projectSettingsAdvanced.forksReceiveSecretEnvVars) &&
        Objects.equals(this.oss, projectSettingsAdvanced.oss) &&
        Objects.equals(this.setGithubStatus, projectSettingsAdvanced.setGithubStatus) &&
        Objects.equals(this.setupWorkflows, projectSettingsAdvanced.setupWorkflows) &&
        Objects.equals(this.writeSettingsRequiresAdmin, projectSettingsAdvanced.writeSettingsRequiresAdmin) &&
        Objects.equals(this.prOnlyBranchOverrides, projectSettingsAdvanced.prOnlyBranchOverrides)&&
        Objects.equals(this.additionalProperties, projectSettingsAdvanced.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autocancelBuilds, buildForkPrs, buildPrsOnly, disableSsh, forksReceiveSecretEnvVars, oss, setGithubStatus, setupWorkflows, writeSettingsRequiresAdmin, prOnlyBranchOverrides, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectSettingsAdvanced {\n");
    sb.append("    autocancelBuilds: ").append(toIndentedString(autocancelBuilds)).append("\n");
    sb.append("    buildForkPrs: ").append(toIndentedString(buildForkPrs)).append("\n");
    sb.append("    buildPrsOnly: ").append(toIndentedString(buildPrsOnly)).append("\n");
    sb.append("    disableSsh: ").append(toIndentedString(disableSsh)).append("\n");
    sb.append("    forksReceiveSecretEnvVars: ").append(toIndentedString(forksReceiveSecretEnvVars)).append("\n");
    sb.append("    oss: ").append(toIndentedString(oss)).append("\n");
    sb.append("    setGithubStatus: ").append(toIndentedString(setGithubStatus)).append("\n");
    sb.append("    setupWorkflows: ").append(toIndentedString(setupWorkflows)).append("\n");
    sb.append("    writeSettingsRequiresAdmin: ").append(toIndentedString(writeSettingsRequiresAdmin)).append("\n");
    sb.append("    prOnlyBranchOverrides: ").append(toIndentedString(prOnlyBranchOverrides)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autocancel_builds");
    openapiFields.add("build_fork_prs");
    openapiFields.add("build_prs_only");
    openapiFields.add("disable_ssh");
    openapiFields.add("forks_receive_secret_env_vars");
    openapiFields.add("oss");
    openapiFields.add("set_github_status");
    openapiFields.add("setup_workflows");
    openapiFields.add("write_settings_requires_admin");
    openapiFields.add("pr_only_branch_overrides");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ProjectSettingsAdvanced
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ProjectSettingsAdvanced.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectSettingsAdvanced is not found in the empty JSON string", ProjectSettingsAdvanced.openapiRequiredFields.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("pr_only_branch_overrides") != null && !jsonObj.get("pr_only_branch_overrides").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pr_only_branch_overrides` to be an array in the JSON string but got `%s`", jsonObj.get("pr_only_branch_overrides").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectSettingsAdvanced.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectSettingsAdvanced' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectSettingsAdvanced> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectSettingsAdvanced.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectSettingsAdvanced>() {
           @Override
           public void write(JsonWriter out, ProjectSettingsAdvanced value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectSettingsAdvanced read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ProjectSettingsAdvanced instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProjectSettingsAdvanced given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProjectSettingsAdvanced
  * @throws IOException if the JSON string is invalid with respect to ProjectSettingsAdvanced
  */
  public static ProjectSettingsAdvanced fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectSettingsAdvanced.class);
  }

 /**
  * Convert an instance of ProjectSettingsAdvanced to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

