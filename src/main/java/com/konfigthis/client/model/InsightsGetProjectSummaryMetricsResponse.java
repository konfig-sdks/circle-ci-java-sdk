/*
 * CircleCI API
 * This describes the resources that make up the CircleCI API v2.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.InsightsGetProjectSummaryMetricsResponseProjectData;
import com.konfigthis.client.model.InsightsGetProjectSummaryMetricsResponseProjectWorkflowBranchDataInner;
import com.konfigthis.client.model.InsightsGetProjectSummaryMetricsResponseProjectWorkflowDataInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * InsightsGetProjectSummaryMetricsResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class InsightsGetProjectSummaryMetricsResponse {
  public static final String SERIALIZED_NAME_ORG_ID = "org_id";
  @SerializedName(SERIALIZED_NAME_ORG_ID)
  private Object orgId = null;

  public static final String SERIALIZED_NAME_PROJECT_ID = "project_id";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private Object projectId = null;

  public static final String SERIALIZED_NAME_PROJECT_DATA = "project_data";
  @SerializedName(SERIALIZED_NAME_PROJECT_DATA)
  private InsightsGetProjectSummaryMetricsResponseProjectData projectData;

  public static final String SERIALIZED_NAME_PROJECT_WORKFLOW_DATA = "project_workflow_data";
  @SerializedName(SERIALIZED_NAME_PROJECT_WORKFLOW_DATA)
  private List<InsightsGetProjectSummaryMetricsResponseProjectWorkflowDataInner> projectWorkflowData = null;

  public static final String SERIALIZED_NAME_PROJECT_WORKFLOW_BRANCH_DATA = "project_workflow_branch_data";
  @SerializedName(SERIALIZED_NAME_PROJECT_WORKFLOW_BRANCH_DATA)
  private List<InsightsGetProjectSummaryMetricsResponseProjectWorkflowBranchDataInner> projectWorkflowBranchData = null;

  public static final String SERIALIZED_NAME_ALL_BRANCHES = "all_branches";
  @SerializedName(SERIALIZED_NAME_ALL_BRANCHES)
  private List<String> allBranches = null;

  public static final String SERIALIZED_NAME_ALL_WORKFLOWS = "all_workflows";
  @SerializedName(SERIALIZED_NAME_ALL_WORKFLOWS)
  private List<String> allWorkflows = null;

  public InsightsGetProjectSummaryMetricsResponse() {
  }

  public InsightsGetProjectSummaryMetricsResponse orgId(Object orgId) {
    
    
    
    
    this.orgId = orgId;
    return this;
  }

   /**
   * The unique ID of the organization
   * @return orgId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The unique ID of the organization")

  public Object getOrgId() {
    return orgId;
  }


  public void setOrgId(Object orgId) {
    
    
    
    this.orgId = orgId;
  }


  public InsightsGetProjectSummaryMetricsResponse projectId(Object projectId) {
    
    
    
    
    this.projectId = projectId;
    return this;
  }

   /**
   * The unique ID of the project
   * @return projectId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The unique ID of the project")

  public Object getProjectId() {
    return projectId;
  }


  public void setProjectId(Object projectId) {
    
    
    
    this.projectId = projectId;
  }


  public InsightsGetProjectSummaryMetricsResponse projectData(InsightsGetProjectSummaryMetricsResponseProjectData projectData) {
    
    
    
    
    this.projectData = projectData;
    return this;
  }

   /**
   * Get projectData
   * @return projectData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public InsightsGetProjectSummaryMetricsResponseProjectData getProjectData() {
    return projectData;
  }


  public void setProjectData(InsightsGetProjectSummaryMetricsResponseProjectData projectData) {
    
    
    
    this.projectData = projectData;
  }


  public InsightsGetProjectSummaryMetricsResponse projectWorkflowData(List<InsightsGetProjectSummaryMetricsResponseProjectWorkflowDataInner> projectWorkflowData) {
    
    
    
    
    this.projectWorkflowData = projectWorkflowData;
    return this;
  }

  public InsightsGetProjectSummaryMetricsResponse addProjectWorkflowDataItem(InsightsGetProjectSummaryMetricsResponseProjectWorkflowDataInner projectWorkflowDataItem) {
    if (this.projectWorkflowData == null) {
      this.projectWorkflowData = new ArrayList<>();
    }
    this.projectWorkflowData.add(projectWorkflowDataItem);
    return this;
  }

   /**
   * A list of metrics and trends data for workflows for a given project.
   * @return projectWorkflowData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of metrics and trends data for workflows for a given project.")

  public List<InsightsGetProjectSummaryMetricsResponseProjectWorkflowDataInner> getProjectWorkflowData() {
    return projectWorkflowData;
  }


  public void setProjectWorkflowData(List<InsightsGetProjectSummaryMetricsResponseProjectWorkflowDataInner> projectWorkflowData) {
    
    
    
    this.projectWorkflowData = projectWorkflowData;
  }


  public InsightsGetProjectSummaryMetricsResponse projectWorkflowBranchData(List<InsightsGetProjectSummaryMetricsResponseProjectWorkflowBranchDataInner> projectWorkflowBranchData) {
    
    
    
    
    this.projectWorkflowBranchData = projectWorkflowBranchData;
    return this;
  }

  public InsightsGetProjectSummaryMetricsResponse addProjectWorkflowBranchDataItem(InsightsGetProjectSummaryMetricsResponseProjectWorkflowBranchDataInner projectWorkflowBranchDataItem) {
    if (this.projectWorkflowBranchData == null) {
      this.projectWorkflowBranchData = new ArrayList<>();
    }
    this.projectWorkflowBranchData.add(projectWorkflowBranchDataItem);
    return this;
  }

   /**
   * A list of metrics and trends data for branches for a given project.
   * @return projectWorkflowBranchData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of metrics and trends data for branches for a given project.")

  public List<InsightsGetProjectSummaryMetricsResponseProjectWorkflowBranchDataInner> getProjectWorkflowBranchData() {
    return projectWorkflowBranchData;
  }


  public void setProjectWorkflowBranchData(List<InsightsGetProjectSummaryMetricsResponseProjectWorkflowBranchDataInner> projectWorkflowBranchData) {
    
    
    
    this.projectWorkflowBranchData = projectWorkflowBranchData;
  }


  public InsightsGetProjectSummaryMetricsResponse allBranches(List<String> allBranches) {
    
    
    
    
    this.allBranches = allBranches;
    return this;
  }

  public InsightsGetProjectSummaryMetricsResponse addAllBranchesItem(String allBranchesItem) {
    if (this.allBranches == null) {
      this.allBranches = new ArrayList<>();
    }
    this.allBranches.add(allBranchesItem);
    return this;
  }

   /**
   * A list of all the branches for a given project.
   * @return allBranches
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of all the branches for a given project.")

  public List<String> getAllBranches() {
    return allBranches;
  }


  public void setAllBranches(List<String> allBranches) {
    
    
    
    this.allBranches = allBranches;
  }


  public InsightsGetProjectSummaryMetricsResponse allWorkflows(List<String> allWorkflows) {
    
    
    
    
    this.allWorkflows = allWorkflows;
    return this;
  }

  public InsightsGetProjectSummaryMetricsResponse addAllWorkflowsItem(String allWorkflowsItem) {
    if (this.allWorkflows == null) {
      this.allWorkflows = new ArrayList<>();
    }
    this.allWorkflows.add(allWorkflowsItem);
    return this;
  }

   /**
   * A list of all the workflows for a given project.
   * @return allWorkflows
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of all the workflows for a given project.")

  public List<String> getAllWorkflows() {
    return allWorkflows;
  }


  public void setAllWorkflows(List<String> allWorkflows) {
    
    
    
    this.allWorkflows = allWorkflows;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the InsightsGetProjectSummaryMetricsResponse instance itself
   */
  public InsightsGetProjectSummaryMetricsResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InsightsGetProjectSummaryMetricsResponse insightsGetProjectSummaryMetricsResponse = (InsightsGetProjectSummaryMetricsResponse) o;
    return Objects.equals(this.orgId, insightsGetProjectSummaryMetricsResponse.orgId) &&
        Objects.equals(this.projectId, insightsGetProjectSummaryMetricsResponse.projectId) &&
        Objects.equals(this.projectData, insightsGetProjectSummaryMetricsResponse.projectData) &&
        Objects.equals(this.projectWorkflowData, insightsGetProjectSummaryMetricsResponse.projectWorkflowData) &&
        Objects.equals(this.projectWorkflowBranchData, insightsGetProjectSummaryMetricsResponse.projectWorkflowBranchData) &&
        Objects.equals(this.allBranches, insightsGetProjectSummaryMetricsResponse.allBranches) &&
        Objects.equals(this.allWorkflows, insightsGetProjectSummaryMetricsResponse.allWorkflows)&&
        Objects.equals(this.additionalProperties, insightsGetProjectSummaryMetricsResponse.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(orgId, projectId, projectData, projectWorkflowData, projectWorkflowBranchData, allBranches, allWorkflows, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InsightsGetProjectSummaryMetricsResponse {\n");
    sb.append("    orgId: ").append(toIndentedString(orgId)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    projectData: ").append(toIndentedString(projectData)).append("\n");
    sb.append("    projectWorkflowData: ").append(toIndentedString(projectWorkflowData)).append("\n");
    sb.append("    projectWorkflowBranchData: ").append(toIndentedString(projectWorkflowBranchData)).append("\n");
    sb.append("    allBranches: ").append(toIndentedString(allBranches)).append("\n");
    sb.append("    allWorkflows: ").append(toIndentedString(allWorkflows)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("org_id");
    openapiFields.add("project_id");
    openapiFields.add("project_data");
    openapiFields.add("project_workflow_data");
    openapiFields.add("project_workflow_branch_data");
    openapiFields.add("all_branches");
    openapiFields.add("all_workflows");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to InsightsGetProjectSummaryMetricsResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!InsightsGetProjectSummaryMetricsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InsightsGetProjectSummaryMetricsResponse is not found in the empty JSON string", InsightsGetProjectSummaryMetricsResponse.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `project_data`
      if (jsonObj.get("project_data") != null && !jsonObj.get("project_data").isJsonNull()) {
        InsightsGetProjectSummaryMetricsResponseProjectData.validateJsonObject(jsonObj.getAsJsonObject("project_data"));
      }
      if (jsonObj.get("project_workflow_data") != null && !jsonObj.get("project_workflow_data").isJsonNull()) {
        JsonArray jsonArrayprojectWorkflowData = jsonObj.getAsJsonArray("project_workflow_data");
        if (jsonArrayprojectWorkflowData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("project_workflow_data").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `project_workflow_data` to be an array in the JSON string but got `%s`", jsonObj.get("project_workflow_data").toString()));
          }

          // validate the optional field `project_workflow_data` (array)
          for (int i = 0; i < jsonArrayprojectWorkflowData.size(); i++) {
            InsightsGetProjectSummaryMetricsResponseProjectWorkflowDataInner.validateJsonObject(jsonArrayprojectWorkflowData.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("project_workflow_branch_data") != null && !jsonObj.get("project_workflow_branch_data").isJsonNull()) {
        JsonArray jsonArrayprojectWorkflowBranchData = jsonObj.getAsJsonArray("project_workflow_branch_data");
        if (jsonArrayprojectWorkflowBranchData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("project_workflow_branch_data").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `project_workflow_branch_data` to be an array in the JSON string but got `%s`", jsonObj.get("project_workflow_branch_data").toString()));
          }

          // validate the optional field `project_workflow_branch_data` (array)
          for (int i = 0; i < jsonArrayprojectWorkflowBranchData.size(); i++) {
            InsightsGetProjectSummaryMetricsResponseProjectWorkflowBranchDataInner.validateJsonObject(jsonArrayprojectWorkflowBranchData.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("all_branches") != null && !jsonObj.get("all_branches").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `all_branches` to be an array in the JSON string but got `%s`", jsonObj.get("all_branches").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("all_workflows") != null && !jsonObj.get("all_workflows").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `all_workflows` to be an array in the JSON string but got `%s`", jsonObj.get("all_workflows").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InsightsGetProjectSummaryMetricsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InsightsGetProjectSummaryMetricsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InsightsGetProjectSummaryMetricsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InsightsGetProjectSummaryMetricsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<InsightsGetProjectSummaryMetricsResponse>() {
           @Override
           public void write(JsonWriter out, InsightsGetProjectSummaryMetricsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public InsightsGetProjectSummaryMetricsResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             InsightsGetProjectSummaryMetricsResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InsightsGetProjectSummaryMetricsResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InsightsGetProjectSummaryMetricsResponse
  * @throws IOException if the JSON string is invalid with respect to InsightsGetProjectSummaryMetricsResponse
  */
  public static InsightsGetProjectSummaryMetricsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InsightsGetProjectSummaryMetricsResponse.class);
  }

 /**
  * Convert an instance of InsightsGetProjectSummaryMetricsResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

