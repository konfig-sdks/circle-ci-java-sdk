/*
 * CircleCI API
 * This describes the resources that make up the CircleCI API v2.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Job
 */
@ApiModel(description = "Job")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Job {
  public static final String SERIALIZED_NAME_CANCELED_BY = "canceled_by";
  @SerializedName(SERIALIZED_NAME_CANCELED_BY)
  private UUID canceledBy;

  public static final String SERIALIZED_NAME_DEPENDENCIES = "dependencies";
  @SerializedName(SERIALIZED_NAME_DEPENDENCIES)
  private List<UUID> dependencies = new ArrayList<>();

  public static final String SERIALIZED_NAME_JOB_NUMBER = "job_number";
  @SerializedName(SERIALIZED_NAME_JOB_NUMBER)
  private Long jobNumber;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_STARTED_AT = "started_at";
  @SerializedName(SERIALIZED_NAME_STARTED_AT)
  private OffsetDateTime startedAt;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_APPROVED_BY = "approved_by";
  @SerializedName(SERIALIZED_NAME_APPROVED_BY)
  private UUID approvedBy;

  public static final String SERIALIZED_NAME_PROJECT_SLUG = "project_slug";
  @SerializedName(SERIALIZED_NAME_PROJECT_SLUG)
  private String projectSlug;

  /**
   * The current status of the job.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    SUCCESS("success"),
    
    RUNNING("running"),
    
    NOT_RUN("not_run"),
    
    FAILED("failed"),
    
    RETRIED("retried"),
    
    QUEUED("queued"),
    
    NOT_RUNNING("not_running"),
    
    INFRASTRUCTURE_FAIL("infrastructure_fail"),
    
    TIMEDOUT("timedout"),
    
    ON_HOLD("on_hold"),
    
    TERMINATED_UNKNOWN("terminated-unknown"),
    
    BLOCKED("blocked"),
    
    CANCELED("canceled"),
    
    UNAUTHORIZED("unauthorized");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  /**
   * The type of job.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    BUILD("build"),
    
    APPROVAL("approval");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_STOPPED_AT = "stopped_at";
  @SerializedName(SERIALIZED_NAME_STOPPED_AT)
  private OffsetDateTime stoppedAt;

  public static final String SERIALIZED_NAME_APPROVAL_REQUEST_ID = "approval_request_id";
  @SerializedName(SERIALIZED_NAME_APPROVAL_REQUEST_ID)
  private UUID approvalRequestId;

  public Job() {
  }

  public Job canceledBy(UUID canceledBy) {
    
    
    
    
    this.canceledBy = canceledBy;
    return this;
  }

   /**
   * The unique ID of the user.
   * @return canceledBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The unique ID of the user.")

  public UUID getCanceledBy() {
    return canceledBy;
  }


  public void setCanceledBy(UUID canceledBy) {
    
    
    
    this.canceledBy = canceledBy;
  }


  public Job dependencies(List<UUID> dependencies) {
    
    
    
    
    this.dependencies = dependencies;
    return this;
  }

  public Job addDependenciesItem(UUID dependenciesItem) {
    this.dependencies.add(dependenciesItem);
    return this;
  }

   /**
   * A sequence of the unique job IDs for the jobs that this job depends upon in the workflow.
   * @return dependencies
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A sequence of the unique job IDs for the jobs that this job depends upon in the workflow.")

  public List<UUID> getDependencies() {
    return dependencies;
  }


  public void setDependencies(List<UUID> dependencies) {
    
    
    
    this.dependencies = dependencies;
  }


  public Job jobNumber(Long jobNumber) {
    
    
    
    
    this.jobNumber = jobNumber;
    return this;
  }

   /**
   * The number of the job.
   * @return jobNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of the job.")

  public Long getJobNumber() {
    return jobNumber;
  }


  public void setJobNumber(Long jobNumber) {
    
    
    
    this.jobNumber = jobNumber;
  }


  public Job id(UUID id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * The unique ID of the job.
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The unique ID of the job.")

  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    
    
    
    this.id = id;
  }


  public Job startedAt(OffsetDateTime startedAt) {
    
    
    
    
    this.startedAt = startedAt;
    return this;
  }

   /**
   * The date and time the job started.
   * @return startedAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The date and time the job started.")

  public OffsetDateTime getStartedAt() {
    return startedAt;
  }


  public void setStartedAt(OffsetDateTime startedAt) {
    
    
    
    this.startedAt = startedAt;
  }


  public Job name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * The name of the job.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The name of the job.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public Job approvedBy(UUID approvedBy) {
    
    
    
    
    this.approvedBy = approvedBy;
    return this;
  }

   /**
   * The unique ID of the user.
   * @return approvedBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The unique ID of the user.")

  public UUID getApprovedBy() {
    return approvedBy;
  }


  public void setApprovedBy(UUID approvedBy) {
    
    
    
    this.approvedBy = approvedBy;
  }


  public Job projectSlug(String projectSlug) {
    
    
    
    
    this.projectSlug = projectSlug;
    return this;
  }

   /**
   * The project-slug for the job.
   * @return projectSlug
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "gh/CircleCI-Public/api-preview-docs", required = true, value = "The project-slug for the job.")

  public String getProjectSlug() {
    return projectSlug;
  }


  public void setProjectSlug(String projectSlug) {
    
    
    
    this.projectSlug = projectSlug;
  }


  public Job status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * The current status of the job.
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The current status of the job.")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public Job type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * The type of job.
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The type of job.")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }


  public Job stoppedAt(OffsetDateTime stoppedAt) {
    
    
    
    
    this.stoppedAt = stoppedAt;
    return this;
  }

   /**
   * The time when the job stopped.
   * @return stoppedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The time when the job stopped.")

  public OffsetDateTime getStoppedAt() {
    return stoppedAt;
  }


  public void setStoppedAt(OffsetDateTime stoppedAt) {
    
    
    
    this.stoppedAt = stoppedAt;
  }


  public Job approvalRequestId(UUID approvalRequestId) {
    
    
    
    
    this.approvalRequestId = approvalRequestId;
    return this;
  }

   /**
   * The unique ID of the job.
   * @return approvalRequestId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The unique ID of the job.")

  public UUID getApprovalRequestId() {
    return approvalRequestId;
  }


  public void setApprovalRequestId(UUID approvalRequestId) {
    
    
    
    this.approvalRequestId = approvalRequestId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Job instance itself
   */
  public Job putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Job job = (Job) o;
    return Objects.equals(this.canceledBy, job.canceledBy) &&
        Objects.equals(this.dependencies, job.dependencies) &&
        Objects.equals(this.jobNumber, job.jobNumber) &&
        Objects.equals(this.id, job.id) &&
        Objects.equals(this.startedAt, job.startedAt) &&
        Objects.equals(this.name, job.name) &&
        Objects.equals(this.approvedBy, job.approvedBy) &&
        Objects.equals(this.projectSlug, job.projectSlug) &&
        Objects.equals(this.status, job.status) &&
        Objects.equals(this.type, job.type) &&
        Objects.equals(this.stoppedAt, job.stoppedAt) &&
        Objects.equals(this.approvalRequestId, job.approvalRequestId)&&
        Objects.equals(this.additionalProperties, job.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canceledBy, dependencies, jobNumber, id, startedAt, name, approvedBy, projectSlug, status, type, stoppedAt, approvalRequestId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Job {\n");
    sb.append("    canceledBy: ").append(toIndentedString(canceledBy)).append("\n");
    sb.append("    dependencies: ").append(toIndentedString(dependencies)).append("\n");
    sb.append("    jobNumber: ").append(toIndentedString(jobNumber)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    startedAt: ").append(toIndentedString(startedAt)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    approvedBy: ").append(toIndentedString(approvedBy)).append("\n");
    sb.append("    projectSlug: ").append(toIndentedString(projectSlug)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    stoppedAt: ").append(toIndentedString(stoppedAt)).append("\n");
    sb.append("    approvalRequestId: ").append(toIndentedString(approvalRequestId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("canceled_by");
    openapiFields.add("dependencies");
    openapiFields.add("job_number");
    openapiFields.add("id");
    openapiFields.add("started_at");
    openapiFields.add("name");
    openapiFields.add("approved_by");
    openapiFields.add("project_slug");
    openapiFields.add("status");
    openapiFields.add("type");
    openapiFields.add("stopped_at");
    openapiFields.add("approval_request_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dependencies");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("started_at");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("project_slug");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Job
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Job.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Job is not found in the empty JSON string", Job.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Job.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("canceled_by") != null && !jsonObj.get("canceled_by").isJsonNull()) && !jsonObj.get("canceled_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `canceled_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("canceled_by").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("dependencies") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("dependencies").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dependencies` to be an array in the JSON string but got `%s`", jsonObj.get("dependencies").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("approved_by") != null && !jsonObj.get("approved_by").isJsonNull()) && !jsonObj.get("approved_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approved_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approved_by").toString()));
      }
      if (!jsonObj.get("project_slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `project_slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("project_slug").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("approval_request_id") != null && !jsonObj.get("approval_request_id").isJsonNull()) && !jsonObj.get("approval_request_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approval_request_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approval_request_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Job.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Job' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Job> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Job.class));

       return (TypeAdapter<T>) new TypeAdapter<Job>() {
           @Override
           public void write(JsonWriter out, Job value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Job read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Job instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Job given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Job
  * @throws IOException if the JSON string is invalid with respect to Job
  */
  public static Job fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Job.class);
  }

 /**
  * Convert an instance of Job to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

