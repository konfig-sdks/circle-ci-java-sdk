/*
 * CircleCI API
 * This describes the resources that make up the CircleCI API v2.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ScheduleCreateNewScheduleRequestTimetable
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ScheduleCreateNewScheduleRequestTimetable {
  public static final String SERIALIZED_NAME_PER_HOUR = "per-hour";
  @SerializedName(SERIALIZED_NAME_PER_HOUR)
  private Integer perHour;

  public static final String SERIALIZED_NAME_HOURS_OF_DAY = "hours-of-day";
  @SerializedName(SERIALIZED_NAME_HOURS_OF_DAY)
  private List<Integer> hoursOfDay = new ArrayList<>();

  /**
   * Day in a week, in three letters format
   */
  @JsonAdapter(DaysOfWeekEnum.Adapter.class)
 public enum DaysOfWeekEnum {
    TUE("TUE"),
    
    SAT("SAT"),
    
    SUN("SUN"),
    
    MON("MON"),
    
    THU("THU"),
    
    WED("WED"),
    
    FRI("FRI");

    private String value;

    DaysOfWeekEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DaysOfWeekEnum fromValue(String value) {
      for (DaysOfWeekEnum b : DaysOfWeekEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DaysOfWeekEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DaysOfWeekEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DaysOfWeekEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DaysOfWeekEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DAYS_OF_WEEK = "days-of-week";
  @SerializedName(SERIALIZED_NAME_DAYS_OF_WEEK)
  private List<DaysOfWeekEnum> daysOfWeek = null;

  public static final String SERIALIZED_NAME_DAYS_OF_MONTH = "days-of-month";
  @SerializedName(SERIALIZED_NAME_DAYS_OF_MONTH)
  private List<Integer> daysOfMonth = null;

  /**
   * Month, in three letters format.
   */
  @JsonAdapter(MonthsEnum.Adapter.class)
 public enum MonthsEnum {
    MAR("MAR"),
    
    NOV("NOV"),
    
    DEC("DEC"),
    
    JUN("JUN"),
    
    MAY("MAY"),
    
    OCT("OCT"),
    
    FEB("FEB"),
    
    APR("APR"),
    
    SEP("SEP"),
    
    AUG("AUG"),
    
    JAN("JAN"),
    
    JUL("JUL");

    private String value;

    MonthsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MonthsEnum fromValue(String value) {
      for (MonthsEnum b : MonthsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MonthsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MonthsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MonthsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MonthsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MONTHS = "months";
  @SerializedName(SERIALIZED_NAME_MONTHS)
  private List<MonthsEnum> months = null;

  public ScheduleCreateNewScheduleRequestTimetable() {
  }

  public ScheduleCreateNewScheduleRequestTimetable perHour(Integer perHour) {
    
    
    
    
    this.perHour = perHour;
    return this;
  }

   /**
   * Number of times a schedule triggers per hour, value must be between 1 and 60
   * @return perHour
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Number of times a schedule triggers per hour, value must be between 1 and 60")

  public Integer getPerHour() {
    return perHour;
  }


  public void setPerHour(Integer perHour) {
    
    
    
    this.perHour = perHour;
  }


  public ScheduleCreateNewScheduleRequestTimetable hoursOfDay(List<Integer> hoursOfDay) {
    
    
    
    
    this.hoursOfDay = hoursOfDay;
    return this;
  }

  public ScheduleCreateNewScheduleRequestTimetable addHoursOfDayItem(Integer hoursOfDayItem) {
    this.hoursOfDay.add(hoursOfDayItem);
    return this;
  }

   /**
   * Hours in a day in which the schedule triggers.
   * @return hoursOfDay
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Hours in a day in which the schedule triggers.")

  public List<Integer> getHoursOfDay() {
    return hoursOfDay;
  }


  public void setHoursOfDay(List<Integer> hoursOfDay) {
    
    
    
    this.hoursOfDay = hoursOfDay;
  }


  public ScheduleCreateNewScheduleRequestTimetable daysOfWeek(List<DaysOfWeekEnum> daysOfWeek) {
    
    
    
    
    this.daysOfWeek = daysOfWeek;
    return this;
  }

  public ScheduleCreateNewScheduleRequestTimetable addDaysOfWeekItem(DaysOfWeekEnum daysOfWeekItem) {
    if (this.daysOfWeek == null) {
      this.daysOfWeek = new ArrayList<>();
    }
    this.daysOfWeek.add(daysOfWeekItem);
    return this;
  }

   /**
   * Days in a week in which the schedule triggers.
   * @return daysOfWeek
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Days in a week in which the schedule triggers.")

  public List<DaysOfWeekEnum> getDaysOfWeek() {
    return daysOfWeek;
  }


  public void setDaysOfWeek(List<DaysOfWeekEnum> daysOfWeek) {
    
    
    
    this.daysOfWeek = daysOfWeek;
  }


  public ScheduleCreateNewScheduleRequestTimetable daysOfMonth(List<Integer> daysOfMonth) {
    
    
    
    
    this.daysOfMonth = daysOfMonth;
    return this;
  }

  public ScheduleCreateNewScheduleRequestTimetable addDaysOfMonthItem(Integer daysOfMonthItem) {
    if (this.daysOfMonth == null) {
      this.daysOfMonth = new ArrayList<>();
    }
    this.daysOfMonth.add(daysOfMonthItem);
    return this;
  }

   /**
   * Days in a month in which the schedule triggers. This is mutually exclusive with days in a week.
   * @return daysOfMonth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Days in a month in which the schedule triggers. This is mutually exclusive with days in a week.")

  public List<Integer> getDaysOfMonth() {
    return daysOfMonth;
  }


  public void setDaysOfMonth(List<Integer> daysOfMonth) {
    
    
    
    this.daysOfMonth = daysOfMonth;
  }


  public ScheduleCreateNewScheduleRequestTimetable months(List<MonthsEnum> months) {
    
    
    
    
    this.months = months;
    return this;
  }

  public ScheduleCreateNewScheduleRequestTimetable addMonthsItem(MonthsEnum monthsItem) {
    if (this.months == null) {
      this.months = new ArrayList<>();
    }
    this.months.add(monthsItem);
    return this;
  }

   /**
   * Months in which the schedule triggers.
   * @return months
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Months in which the schedule triggers.")

  public List<MonthsEnum> getMonths() {
    return months;
  }


  public void setMonths(List<MonthsEnum> months) {
    
    
    
    this.months = months;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ScheduleCreateNewScheduleRequestTimetable instance itself
   */
  public ScheduleCreateNewScheduleRequestTimetable putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScheduleCreateNewScheduleRequestTimetable scheduleCreateNewScheduleRequestTimetable = (ScheduleCreateNewScheduleRequestTimetable) o;
    return Objects.equals(this.perHour, scheduleCreateNewScheduleRequestTimetable.perHour) &&
        Objects.equals(this.hoursOfDay, scheduleCreateNewScheduleRequestTimetable.hoursOfDay) &&
        Objects.equals(this.daysOfWeek, scheduleCreateNewScheduleRequestTimetable.daysOfWeek) &&
        Objects.equals(this.daysOfMonth, scheduleCreateNewScheduleRequestTimetable.daysOfMonth) &&
        Objects.equals(this.months, scheduleCreateNewScheduleRequestTimetable.months)&&
        Objects.equals(this.additionalProperties, scheduleCreateNewScheduleRequestTimetable.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(perHour, hoursOfDay, daysOfWeek, daysOfMonth, months, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScheduleCreateNewScheduleRequestTimetable {\n");
    sb.append("    perHour: ").append(toIndentedString(perHour)).append("\n");
    sb.append("    hoursOfDay: ").append(toIndentedString(hoursOfDay)).append("\n");
    sb.append("    daysOfWeek: ").append(toIndentedString(daysOfWeek)).append("\n");
    sb.append("    daysOfMonth: ").append(toIndentedString(daysOfMonth)).append("\n");
    sb.append("    months: ").append(toIndentedString(months)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("per-hour");
    openapiFields.add("hours-of-day");
    openapiFields.add("days-of-week");
    openapiFields.add("days-of-month");
    openapiFields.add("months");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("per-hour");
    openapiRequiredFields.add("hours-of-day");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ScheduleCreateNewScheduleRequestTimetable
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ScheduleCreateNewScheduleRequestTimetable.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScheduleCreateNewScheduleRequestTimetable is not found in the empty JSON string", ScheduleCreateNewScheduleRequestTimetable.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ScheduleCreateNewScheduleRequestTimetable.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the required json array is present
      if (jsonObj.get("hours-of-day") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("hours-of-day").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hours-of-day` to be an array in the JSON string but got `%s`", jsonObj.get("hours-of-day").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("days-of-week") != null && !jsonObj.get("days-of-week").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `days-of-week` to be an array in the JSON string but got `%s`", jsonObj.get("days-of-week").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("days-of-month") != null && !jsonObj.get("days-of-month").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `days-of-month` to be an array in the JSON string but got `%s`", jsonObj.get("days-of-month").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("months") != null && !jsonObj.get("months").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `months` to be an array in the JSON string but got `%s`", jsonObj.get("months").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScheduleCreateNewScheduleRequestTimetable.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScheduleCreateNewScheduleRequestTimetable' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScheduleCreateNewScheduleRequestTimetable> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScheduleCreateNewScheduleRequestTimetable.class));

       return (TypeAdapter<T>) new TypeAdapter<ScheduleCreateNewScheduleRequestTimetable>() {
           @Override
           public void write(JsonWriter out, ScheduleCreateNewScheduleRequestTimetable value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ScheduleCreateNewScheduleRequestTimetable read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ScheduleCreateNewScheduleRequestTimetable instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ScheduleCreateNewScheduleRequestTimetable given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ScheduleCreateNewScheduleRequestTimetable
  * @throws IOException if the JSON string is invalid with respect to ScheduleCreateNewScheduleRequestTimetable
  */
  public static ScheduleCreateNewScheduleRequestTimetable fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScheduleCreateNewScheduleRequestTimetable.class);
  }

 /**
  * Convert an instance of ScheduleCreateNewScheduleRequestTimetable to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

