/*
 * CircleCI API
 * This describes the resources that make up the CircleCI API v2.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The parameters for an update webhook request
 */
@ApiModel(description = "The parameters for an update webhook request")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class WebhookUpdateOutboundWebhookRequest {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Gets or Sets events
   */
  @JsonAdapter(EventsEnum.Adapter.class)
 public enum EventsEnum {
    WORKFLOW_COMPLETED("workflow-completed"),
    
    JOB_COMPLETED("job-completed");

    private String value;

    EventsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EventsEnum fromValue(String value) {
      for (EventsEnum b : EventsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EventsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EventsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EventsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EventsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_EVENTS = "events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  private List<EventsEnum> events = null;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_SIGNING_SECRET = "signing-secret";
  @SerializedName(SERIALIZED_NAME_SIGNING_SECRET)
  private String signingSecret;

  public static final String SERIALIZED_NAME_VERIFY_TLS = "verify-tls";
  @SerializedName(SERIALIZED_NAME_VERIFY_TLS)
  private Boolean verifyTls;

  public WebhookUpdateOutboundWebhookRequest() {
  }

  public WebhookUpdateOutboundWebhookRequest name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Name of the webhook
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of the webhook")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public WebhookUpdateOutboundWebhookRequest events(List<EventsEnum> events) {
    
    
    
    
    this.events = events;
    return this;
  }

  public WebhookUpdateOutboundWebhookRequest addEventsItem(EventsEnum eventsItem) {
    if (this.events == null) {
      this.events = new ArrayList<>();
    }
    this.events.add(eventsItem);
    return this;
  }

   /**
   * Events that will trigger the webhook
   * @return events
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Events that will trigger the webhook")

  public List<EventsEnum> getEvents() {
    return events;
  }


  public void setEvents(List<EventsEnum> events) {
    
    
    
    this.events = events;
  }


  public WebhookUpdateOutboundWebhookRequest url(String url) {
    
    
    
    
    this.url = url;
    return this;
  }

   /**
   * URL to deliver the webhook to. Note: protocol must be included as well (only https is supported)
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "URL to deliver the webhook to. Note: protocol must be included as well (only https is supported)")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    
    
    
    this.url = url;
  }


  public WebhookUpdateOutboundWebhookRequest signingSecret(String signingSecret) {
    
    
    
    
    this.signingSecret = signingSecret;
    return this;
  }

   /**
   * Secret used to build an HMAC hash of the payload and passed as a header in the webhook request
   * @return signingSecret
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Secret used to build an HMAC hash of the payload and passed as a header in the webhook request")

  public String getSigningSecret() {
    return signingSecret;
  }


  public void setSigningSecret(String signingSecret) {
    
    
    
    this.signingSecret = signingSecret;
  }


  public WebhookUpdateOutboundWebhookRequest verifyTls(Boolean verifyTls) {
    
    
    
    
    this.verifyTls = verifyTls;
    return this;
  }

   /**
   * Whether to enforce TLS certificate verification when delivering the webhook
   * @return verifyTls
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether to enforce TLS certificate verification when delivering the webhook")

  public Boolean getVerifyTls() {
    return verifyTls;
  }


  public void setVerifyTls(Boolean verifyTls) {
    
    
    
    this.verifyTls = verifyTls;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the WebhookUpdateOutboundWebhookRequest instance itself
   */
  public WebhookUpdateOutboundWebhookRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookUpdateOutboundWebhookRequest webhookUpdateOutboundWebhookRequest = (WebhookUpdateOutboundWebhookRequest) o;
    return Objects.equals(this.name, webhookUpdateOutboundWebhookRequest.name) &&
        Objects.equals(this.events, webhookUpdateOutboundWebhookRequest.events) &&
        Objects.equals(this.url, webhookUpdateOutboundWebhookRequest.url) &&
        Objects.equals(this.signingSecret, webhookUpdateOutboundWebhookRequest.signingSecret) &&
        Objects.equals(this.verifyTls, webhookUpdateOutboundWebhookRequest.verifyTls)&&
        Objects.equals(this.additionalProperties, webhookUpdateOutboundWebhookRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, events, url, signingSecret, verifyTls, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookUpdateOutboundWebhookRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    signingSecret: ").append(toIndentedString(signingSecret)).append("\n");
    sb.append("    verifyTls: ").append(toIndentedString(verifyTls)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("events");
    openapiFields.add("url");
    openapiFields.add("signing-secret");
    openapiFields.add("verify-tls");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WebhookUpdateOutboundWebhookRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!WebhookUpdateOutboundWebhookRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebhookUpdateOutboundWebhookRequest is not found in the empty JSON string", WebhookUpdateOutboundWebhookRequest.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("events") != null && !jsonObj.get("events").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `events` to be an array in the JSON string but got `%s`", jsonObj.get("events").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("signing-secret") != null && !jsonObj.get("signing-secret").isJsonNull()) && !jsonObj.get("signing-secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signing-secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signing-secret").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebhookUpdateOutboundWebhookRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebhookUpdateOutboundWebhookRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebhookUpdateOutboundWebhookRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebhookUpdateOutboundWebhookRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<WebhookUpdateOutboundWebhookRequest>() {
           @Override
           public void write(JsonWriter out, WebhookUpdateOutboundWebhookRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public WebhookUpdateOutboundWebhookRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             WebhookUpdateOutboundWebhookRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WebhookUpdateOutboundWebhookRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WebhookUpdateOutboundWebhookRequest
  * @throws IOException if the JSON string is invalid with respect to WebhookUpdateOutboundWebhookRequest
  */
  public static WebhookUpdateOutboundWebhookRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookUpdateOutboundWebhookRequest.class);
  }

 /**
  * Convert an instance of WebhookUpdateOutboundWebhookRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

